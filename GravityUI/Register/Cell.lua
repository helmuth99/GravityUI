local addon, private = ...


-- the following convention is applied
--[[ save private.Addons[addonname] = {
name = addonName
import = importLink this needs to be a function
importText = importText Text that will be on the button
}
]]
local importText = "Import"
local addonName = "Cell"
local importString =
"!CELL:257:ALL!S3xd8rX119YSlliKmwijKz5lZIWGH18H0QpawdMSR(ajHqFSsiBJXOz)yKM1SA3XZmcme70yzSEux3eBLuC(41eIAACstAFjQuAsStBJ(rDItDQVw21DIBDBISJZNpNuIJtFjPpENZ9oZoZUAxXkqyt6B1peA3zUZ9EU375Ep)pN75CgUtvHu537qrdFeFkkrvuBwiMuVrfoMqe(XTC5B41xs)YcXdgkMqerPL0F0yQcY(gsnr3hlQAyXEdifuw942dn4XvfJg2UF5GrJypqq8rSprOGQQXegqoXqXJypuSGhpXqQJm2GbVV6teBObJRSOHvKcgoA8bUZfoEc5OcXvdQgnr8XeHVCIeW3InSucLO41k0OO3XcNAO4rvv6uqMvlffky8WWti3thD2wJn1JFLONqW9tuDifjHyXu2G)bJgxOUaHgQ)(voOxo)rdNiERDo)k36oRf))QRd))TxLDVCeN0R7PA8)3rv4)x32nVEDvPxE7WZYUmh9zPLFN7WSK7Ch0swd()vwTDIZrMurmXX8fp6G0oiV)bIL4y(BprCHrXB0TAWWhHNuCRJ7VJE6PJ9hOL92CpKvZXrw8KYrhquDlQj2smH(v93pmQ4(rMOEON5QbH(doum1Lj3XqQXG(O4WWia9rDy3RD72FeIRLrwRiz1ow18WVpb2unmKmLeejl19Y3KNqbLRdAe1esytekHQAIbb6Gub062HI8elASe93VqCLOhvqPxIDXaHdQOQ8YJ3qJ(6P591o2AUhUMD6PY686P2HRXtD1wP3QRu(29fiqlDeOWab6yVhOXvmA11vzv7SgVvvN)97BVW3RANvwDv70BvEcbuCJD3tHH6UzF73x74D84PMDc1H)93r77d(UNQ3zL141dToBRJ63Nx5QQYJhOaJ6PYARAhvc3AuOzRAhB3Bv1c0f8ynFG27PXayDvvnE2o(SD6RnFn0s7fgOHahOLgkmuJ92X(AmqHHyLSqYYEzYgxrbFfc5wwHtUpDDKn72j3R87vqTNJSv3fu5x2PJpKhsLRWPT3(zjvTcNoC(WKQlKuBHKDwi5wDxW9)OoT)7)pt2f8qp2he(9mKDdf6RSnYT5158hqWPJh8)0PJh4ttCEAYk83PCIWJIZ)a7Bc5wHjg7K142yYQImp3rwfYEqkJugLPa5fWjmkZbzDIKLZtNpjRydYjKW5xf3KvAHlxNx3JD5(dgrayyedOOE8ycJm1GjgsriXrPRMyKdYFx3Wjsi7lMKyq85QPw)XdoOqtbcJLX94HJfurPp6xOe3AAL4A5a5g4yrJOk6Emjb5W4I5beORpQLuS3q13iosZXnUAq5beu1BnkvXwxvL9jfHUtmSl1nSe2(OXsOOqlNBslSvM1YXzxwuIDXqHhsbyxBTthvU1QQA7P(h7YQc3N6qYcexYSnTuoHx)YjIjuNCd(qMWa8(7Xx77JpuZn6RTgdik6L0tDKdWt6vKC7ZvFBYWXGTsRhwZaBDP8ziBCKZxSx3bupUKqvHyJeSV5zm1edmqmHbfIpK3rXRSLGXudeGUjwbxyBxiySJf84k9qFeOU698fpCKOk09LdfoXGdMioH)Sft4FRds4)00)61n5ojh0n5UihYl5UjhgQfsq3Mx8SfNHsmkWnupT6GAjd3xQeLbHD8diOmKSSqyKvBY4jKhmySBbOcydFYTmYh0sJq6R3piH)dr4jbj8poHpcqEFiR33kf94wVriOSw)EyOoQAKilXkrnoDGsrmA)Qbih(Kpa0ArwcHxf(9KlH1MnCq8ZP0teOfn4R4fU2Hlynn4fU8HpPFVJfwvo2wOZgKd7KBn)twUsv4v26z8ooTXmUub)SewVc8yV(UCpkmXPxGdA(fpqlhIsUbWQAlT6M9nSqSp5j5NQo5NQHCWgoygi(qqFmdxomjcPYrUPPDRi4iZ8HrKLQpQCEyu5MOF)mlXn5EWYEeSSWaYl9(PJhNh(ZaKd)wUS2bRMC4gwVxsuYHxNxkBBnKdF2cyFSwy44bRXBYomu2cU528sejh(ME)ELwcDOmLrpNC34GEj9dFWURUTmwJp5x9lywt1q6sAPBdymDDxVNKBxD3UQQAVtHfXYZ1LuztVC7Ke8s3jj3l5WEQDN1P35iYWxRQ6D6LOqoCGQRUYTd3rf(yvvwzDvs7u(bXpWNgcU42RUAp1s7jH8uzn7yhv7LCu4Y1S9TVJD4LCSSq(14LCCsxKtC(dMHPRqIZFjNPKCHQDA7x9TTq1W0bsZKhGsVgZaKFp2Keo0(volLQto6tEqk5wWdEokTsUpD6IeoeBLn52g5Khm110VuXm(Oxh3Pb(9Ka)0lvC2wx)6fN6c73Q40xyVZJs6RPEUjGHe(D(3fRY75MYwfc1X8VllFFP3u6vy1J8PN2WQtUV(pgPDGV)1nwha)9tJ0(sYyHdEpPndax95PZbo5(g)nEjNe)We)A6aVtUFqHVEMRMqq7KXBeM8WKDD6NV103NTZ5tltbptxW2uPrcfuXpK2ErySHf08WSz679nPZMf81QJYD4K7ohGYwuWd9A6e6h85Pt0WhEMKZ00UYJV(x4GzNe8sIb7R9NJBU8INWcXmC8eQ(rO9mAzeDsBeDAye8HyF9EFtsF9RcdZppBu)Bt4Fbc)lcBuFWzOR)TNPHLqIKDpY5VR7HnR44H(VyDfhFWTZMmCC69X61oEWJzsZWS)5bMRpSod2speiZK(9Pn744HkIemtxDPhkJLnK4zZCLGtX36i)HP3xC64x9byDMvDgGQEyGqoiJOEic)Fi(Tz8jc(XMgJz7Fok)Wh(MTkvC3Wg2(8og9c4(K9ctk7bMqdmyWWYjKdhtiyCfbRpbuIcw5QyJMl4JUVhAgjJq8p8mEFGLzsODowK6b9waWxkBGWxiPRcLkpA8irdhunHCNYchfu7KI10(4bti0SqWyiyjJIUKWIbJpGqSedOW0pDczp1U9Tila0UIWOakpb54bnQA3ar)Vd)E0Xckjjeug0nu4uRwQCDuXnb0bcUSdqzqbvUqkQG6qbdT)gBOLdS)leeuoQfq9WoyfUxPLgrxDjkIZg1vd(cgxTbHWGgDX4gnOHMDbIlaBUNSabWLhhqsCQuQhfVE5SZbqT5qO212QDoUfkhAagCBe8DaLWbJbyNRARvUDY(B1EZ75f)NlC3s)jFNKFGBkqosBrdHdwiCnXXKsCmDm8UhN(zD85yfUDZ)B0(hkwmwX4928E(IlH(tZ7z8sP)K8dWig0raocHyrcG9jfHMIglg)yMx2Tiv5fqlF5KA2gQ7btKqvKeiu9YjIh9(cLSOnVNxDdv9fljufnVNF6N8vwvr7H3U9PebYhyaawb8H9kkAO)rnxGs99iklaATglIY94fgL8sV325yDk7uTVRux)g(Hb6qxBHUMPEgPD7KoyL57(lN4XM38M30)aPrKq4ghgK3lQ4dW1WtvhHXMoweHGQIMJIF3Fo(Z)X0)W4bdJkczOeJxyM8fkznxxnF9phTtkvooa4lKsc5qTehgyzLuuQS069Tbn9LEeymZAJoG)tQU6Dq7vV0)2N4J)D(KpAYpyhhRsYUv9fsmKAh9haxLL8I1eQ)ybpkutYcQbJgBC0UoniqnIYgu7OUt(P615c(JlPPajKJii7ymuFwMUjHcnKQAI4JclJIqTCZkiRCuyvw4J4)4T0GOZf8j6VjYxUiYxH8vjpfCpYtJxBXW1wuQx7VneCTfMw5AdUMDRxt9t1KZf8cTo9I(fFo4Aos7AFJ0FC4ApB6nn0lIlihm2rDUGp(9mD66ZMb66lT3P3yFIVeCTfN21ooCTIt9AV8)50hp(shmDc98TEdKV2n40Xh)t1)44GT(wuhmt64xgtx5sCapN1MBy6SeStpzLHWDDveip2W9hvwrnWqXfhlu0b0NHZW(ZDJ7iTiGX3WyqW2T3GtBxyt8WE0tcAIc6Pgq4EhsqrDeIDrGRGvtYQrhua4VkFcGxwcOybKa8emwSlWEOy4EQ(p((f4hh1yxVFDIs9HBlA3hAYJvnVI8JcO8JfG834oaSPsCH7Pv2(N1aLRm6gPoKkLPsTqKUP2(BVq)nl2bzcABRtXNgOyY3OCY3K8SKYDpc2esrVpHyNa3JMw9gdOphXPm9jBjcaTE0Ok(hkAm1wIZpkAwrdtOWzpe27PLH40PTYSp8reo(XG1kkt1jU3SRwI3)qkqhfBlYlCIw5WTBsTDitI4MErEYlrVl5Fc)kwzsKxE0wIdSOhnOQaOpUyqyhulITUh)HGTN2oz1OfeVWrIN4yXzdhDep2X5NmSOq4J0s)nEFrvuv4Nuwqk2XRpbSlduoEj0AVcgFL(a6Zt(JblHJbpdirMzjxtRaFoYglKClfsU1cjvwi1(hJmjUHrFrJROIsGLkTDQMeBRzb5erd7kaCtIdGjHAbZPSAN4QQLmvkxOMkjtr3(PpMnMhF)0)WQJciVMFfyu3Vy0ictqlfqzrsKqMmfP3riFp4poiVg51H)(9HFFdYpaFgYpK8Ji)y473(mvKxJwKBJALVDxizxfIg9RkO)N(IJnq(eoKPw4fKqkTudSgYGOJo1TFTxp90rNDo)A8S16UdhE2rnWUUSLijhxpZklW1ioTDVRUGV37TGV397KBNt5C(l6)WPJF56CAF971PTF7FNthb940Hu9oD8twOt7VNx15c2(FPZf8qpUZf8OFyNo(r3RZf8apRthFU3Nth)vL7C()2pQtoylJf8(oRth)1D5Cbp8p05cEfBWVLc7gtPW)m3f48OUl1Nx91rUD64j7a)EZ75Z(5B8F4w7RYM3Zx)307DnVt(JSd37Z1P7kQVAV2XcUG)OBLvWVZhf)5JWU2TP)WoXFCbp8J)y)O1DSATJ3BhzO8Vh3L2aCTPMCYA(jFSLHF4fU9)LLDu4dLwIQ7VtVqzEIAT0OpXUS(f3gFzyL4rb0EQkxFDYbbUszy7mYELkh2rZLcAaoxrJ7svuWv4OQh3F4ereQOWc52a5c8K36(MF)BzlUmQaxHdg3vibx9JCEUcQ6suvvsX7222arvfhk0wdNyWTjehe5fx4ij2gAg(TPcly22GbvayOBBRg1tHqDIA8xX2aAXfwUg8Fx3SXDV57(UQ8U3D8OXCfaW1gmYbAzJBQcxQjCb7rkOcuAufdkQqSMqB26c4RDHN8HlMawxr73LOKlDtT6AxU2y8HgmKGSxxvULQ2uH13yBT1xt(AOX(64a90hAIZEAUVoBmaAgwx72f020AoyKiUugcn3NlCdmfKi6wnO6qkUWDuCLKt31gdbBkaAlSzxmebUsaBoO3oDFG9V)oAVVwQVJ27UVgB3N)2ASbOr6hqLluOXqHIGeahxvWf1iXUccJVIcOXEHbBzxmB5AP9yKJrRQ3qbAS(E81(EpqB(c0x9hO7E6y)91s7n0s9(6PJaSMpLM9aqZghM(rJxR4QFzObAGs8kR1vdbhm4acU2piTWANRDO49eCGTaqVDflAi5GYgDY2BP(91JV9MX(NSWGaUyx4(pq)uDijxryTdRrrwpvOfuJk5kr)0VI7EzmtMwNSNo6OTEAPtOZU)o6TX(c4RLg6R7g75aD2xdn2JVwAl1(yikcmKNb6NckkEtHjbhLXrsdUd9MWFhbAOXa91DlhSrOYQInhz5X0RukkuxB89kVzxdSzxH2SRGpWMDnD2m9AR(oARJaq19ERCZUy)RQhGwZ4oJUWnZr2vvxGGfOUX5exBSIEBS5wQVTgRyZUQODF7h)lWAAWw1Ch3EF7nqhqpVZg7PVoU92HwblLfgyKZYIEqwMjJNi(wySQ6v3b6UX(ARf)4AH67y)7pLrXW6s8CrpvekhjoSTTqXsq39qNRuHsXb6b44Adj56XdKQc96VEyERbGi7R7EUZ2qA0SOfc)q(ANQ0HPN2hmQksQheuGcT6HXxO0cGEaTFo)e4rayi2ym1es9XowoPsyhbWbKIaRI8JOR4PNEyN4jWYtPuHi8sLzTy6a6a5668Fkg18bhJDwJ4rMkRFuIKY4wtQnJpqVvf(XrL(KbITT92e)Way(4WUQQ8sLGDa)XIEIteuocJmO9qK5wCY(PY)KJMqg211RB)7py048UhTBPeQ0d5r09eDHh0Sl2jnlkTu8ShIjmeozQkYiaqzOLyTvWQMFk2bsBm0Xha7Ck9RdBiGGspaOtzqDYcHH5XPkRfqqkHSQBXYhhhq6b1hrqUvXjzJT4zPbJ0l3955pP3adgu(ikTYZhcUPyFIEjR(oMF11U1Q60rn1uZw3oGKnyKJ7lEKobvPBvKcBTp2ch3KxRy3nSULEBYmisk9tETtpMj7ZzCDoIDEYZnCie24wIgFm6GuBGc2XStAMQIOD7sLDuby5CmH2TaGWT)MHHbo8S2Es8S2i7Du82U6bXex8bjLnQiDyZFqzsz2x18MmzRIfByC5gw0lGZp7fxl2oDDS4Oi5F70ZTJSpkm6pdLe14CQXT8nrBVYOT346cgyTO3qm(NY9JhgPg3noMc924DNcBe)WqmdbhFi6gjkNwUJMAQTwANQCT9a7T5o6Uh6hhUHgRhVEdSdeSQDY(F7d7R(6BSZEGRtVGh76)XFdn6Rb9NmqlTVVwAFV6LGDEJqL3uJTS32HIO)eYD2iiNakwYR4Xxt7Jwf01quggXrm65qNLXeAm8gGDK8FvnUQ3884WElB0gVDO(rSTQnjZUuv1btKtWKNzEgPAC16h2rsGTMbGFpOK6X7qUjGfsu)b90e8GACBxV4AC7qJBNIJgriw0bJcRek1LUHxuQtVGnVN)1dH)C32BEpF)AP)ap4K6LQpOJjdZm3QTXnnmqYNfu3WOrU1s3cmv7GovxomvFouDiDgahix5Nk5P8wozL8K9ogtjg9XgnU1HdmRJBHW4YOuBpH3bQDY(WEaP7tTeYg3a9qr5j3IXhUnEYM5jBLNSB6vUDEzDzb8Kk1VcPk9p4b2)NNulpzN6pTN27SEEYUQtVUGIwTLpFRMFUFJ(cGhSeJ50K2vbiyy7f2mzYloMAYpUc3u1fPMOZ(OjLXA)OwyuSaxcxh(MGY2Vj3tZzUIaVdmswoEc9l)0wwCzhwdhaKwL8zRaE2kw18w18GhEy8SQXBmo(HEyhMDRHagn1HIkvDlXboI(dgw4q(IePJ4khQXyh9aTCO6tilCO9lejAWdP)ikhQNGXpYwvhiOuTZIhchQeKPpMNzXJ1qNDJpZ4itodHLm6zcLuI1rS2G9prDG171Lb96Y4wmoGfJEh8gtqxMOlteDwLLTSrmNkhND9KvXQHQy1lQnCCBm2XqJ3rQCeJkZQTTNqnPewyOViOgx7ATqusljaURUR6rTJnQxy1oDjpUu5gNIUTp9(6ZOplDg1YMgsLsH1rroVrjqeaa4YKNGwjSRIftVsCeii1MIg1LyMQlMznmRRF68W1AtXUS1ktJ7q0Ta3ouDRE1h1S6M03aWMXa8OyrJFKnzoSt5tdI3ZpEhOowiDW2YJoUXJgK1BUi9bzmPSNmOmLBEPU30ISSEBkJNJcMCtqXhNvC63142lqTlV4tN6Mnm)HzVJ1nDpmxO0SI)aJPR)IFFbwiPIfXves1JY2MdkHuz48C3W24DK040k8HyAxus)w7jjA0L(5lq73jpTbsZOEKACrl)LrlYKrtg5bq(6GUqMwB2PEDZL2ZDGzYg1pJcxggwrbhhBdghBZbhzXKBKSorCROsmomdZYTu3LV(StsACXYif9KPsrpz6uuznyyhVuij)iyqKJxceYb0LpD6Q0KM9lfcBDxscRmDcJNSCrgHvoLs4S7fnoa9hq01Ve)5TBEp)S(O)yuSk4SRtV3GXiOIRBXvsAxjL9mzJJWI7BCIGXszeC1R266QBa3p0LVWQyVF)a2QbONCrYzeUyiNT0svHIXkLLcXKDYmthYVaSSl19kx45SSR(AGRSM1qThy3OYedhsh6kzVYnqnLMIXQOlsx(jZmWMIP7pHMiDYbKdgbDjYTigmw)0jJU7N8T4X6ap4l(aaWlaVFG6hsg)2(doq0W8H6mruLeX5FBGG0NdCqjmPLXWmN0CtDJGdcpKkp5BHZXKNj9PioV0jKI2yGTn9pyofXXMIK110yCkAkgWCEkvJBJkr3gf41xhfHjmc5URUG)9gW8cqM2Pinxhc4MECc6dL3i5VoxwFnbDJs923CACHyRRX9qIxWy3HEsiHwegfiTLTyHLysqjf0wQUOA7ybrZMPZptiXUn9UaLwTuPwUIUrxDZZtN3FglCccACN0oDmyngJxTzmEDHE0TuTlMTznPBoZD2nSJnoenPU9fzxrKk)Y6ENRb3cdhDRI(Fu0ARHIBFkwtbR0hcfKBkqQiOLM0WD8y3R768ibkFa)NeVSULufFglndSn(jDW6tjNzAlBZmtvpE2VUmo8xtwbPyZh7MKhLY8fBH0zKEnfKk7JzGsSm)C0h4eIy36e2(JcQmgFax(nMYPaa4weoBni7ESBb7jOd9ALR8ulnRBxrwx5bWd)v5m1wqf)Wiv60g)dwWd9AoT9DhPGVwDONta)sC64x)IoD8h8MOxgGoyGthF8570rCbNo(BFjNogVmNooB)oD8zFwNoo)J7Cbf4Y5cw4J50Xd(EDUaF)iNlOMNZ5cQ1HtUx8wrpfX58F77SGx4wDAlYB60(IVtN2fB1Pn)7158dvPth)K)C43Ne(9pd(9Z70EX)JoT9R6CDfm2FYzlWj3w)soD8ft867YPJx5mf8Zs40Xl1Sthp94oTfAmNCU(7CUGVv94A5vXlR7Y0Uzs5tQqyvuov6WzaQz2qardJ9FCJh)46i6KcmdlvUVWHbKyOVy7QtaHh(5WhxFlInppypI38gP)aBn8jXFotZ75VVC8NB4r04(J13KWH(MemuLM7BZrLYmU(XdIkQYpgiLTtb52IgxyrHqNn2)XRyqbMkjKMrCgACFCnU)NACpXkGEpAM3arH1GrqrzO5QqmaailsPGQwuK9aULTeg9wX4QPmm4rJ7tcCF389eqjrSOrAT598sfn5Hw8ckQ598gF5U(50to9FG7gl6q)fDzVvoqbGw5SZz3T(z2JFCHu9c04(uafof0mDy6d7Ujxp)W1FGMoa6R697pucfLtvUuzdPi0SHA66GMfVavLjZliTPPb4gnGSouBMofqJrXMJvivzm8eInQqJoULRPX9514(mKR)ca(RJPk2quDF3KSEPstA3a64hLfim0EsLzwljVdPlPLOattOpu4tPtkywCVOgkQly17Oj92vrPsnOml9u5JfncSzJYlpAm0Ih4LrFkNSMEX9AqFyNS2qkIbbb3IY3dObD0(poSRydexKLUC664IBkGuIOXvjLjNG6ch3zj6F4o4MuwiwquEDN0s0gP5n4rEGquwVNJ0Ig3a9sf3S8Ygx20JgGlaBiTAQFnWaDYpAsbXnfqeVopsKhe2GhMRxdvPH10Rg3FnzTACFz45)kOEcnqEsYsxTorc1jPcnUNcbj)04)91a(9M3Gg3FJj1u7WXGbkKNN0ADboAWydz4T0phzFWQX7Rx8sao)AqdYmgAMMMOgAq6gVlGDwuYlv)(7219F)UUljbZlmgZcdutlKsJ214wS9Gy26dltN(ldO)nJ0VdK8ldvNVlQHDAa0dIP0loyw(ymtDGtM1rrDS8YdGeRsV0)4HnO)m2OvlQx8tXHvFByT2wQ0xAKuYPEAfv7Cvfv9CvfvvV0(7Zm(DfmKI(G)mvNzWCnzRnEsJ2OM5aIvMUnAq5tbRHoztGow4MzJrTrhfVfFi2sioGbFC8SMAjo1EyCtOhSaSVnj18Sb13na4iHR2tIMbC2C0kJbZa29XaVfDBm5HKa93DISg(prIedYrkwJ7Milfi8O7M06jVoCT1HpNbHZtxokrjFJUg0lGElcDahUX()tViYsx7uS4(PNeDIHBKkVSWG0Ds3Wfacf5(bL1rskcp1ONnYUlUGteL6aWkckFK6mu5ewu3kvxkPLQyL21XGjEbgqPUzNIvc5k2YTfahbKtJ0RoJKE1msFx46jyyETSW(bRyEll3(PCSP4Vg5IJtRB2cEYdlTe88KclkeXWCWnPZe8ujFK2gJ6ycut5wNg35n3mrJ7VFH4HwNSh1wWqcXQy9QbW5xzefziMvtediJEbK4WdgnEYO)O6AhEWG3hZZNihuKYuyegrmnHgdp7i9PFnUjejpZBGJNOYyNXbR)rNtPe7czdiHyrLXPkzCl(bI4u4ouTNizuknbmvE7Irvfqvwehg2Md0UjymXrdzOhZpUaxJuG3pzbr(8fi8hBC05L)G0JpN77FVWVYWVk0Je3XV4vWJtFCO3z0caf9z5Lk5yyB0guDgNxHizH8JEmJwUWXJd9vJghjQK6rXpom4KS2gLHyP9oRhpxGbLAmo69IQItYUotGPI4fqbSbmDPkyG6JSbY1BFy0hWa0jX4WHC0OokoiRzdHuWaet5ZK6QB2wkzvfnJDUxnYPSAQWi9nwg2WBeZqfsT9SodvswmDHBaKsqFkEMEv9iIGmPlJ7I0AxdBaI5LP7x9Q8WYiyLgLB0Nssmp8mFtSj6CVOu5yzAMANglfcE(NffTSMlGCdDGoNMHDazRvUOv((lYONFqY7eRe4wZVC6904(M6e5IiTkqwMjF5ISYx(OgY5OF9)4ulrJ7caf8Fb)(BGc)wWF)LWV)Fot5F4VybpW5aMRVNto(FHthV1fE990GVcw5Qk4(3Vt7R6cf8GNRGV6xOG36J5K7BEVOJwxqNVFaQFDoDO4bybFrNC3)5CAFEX14()c13BxOg3VIYbQX9lGV)BHp)FICEACxe(6VwuNTqZgGY0MTfbScA2SphXgSmnBZF2XaSSSXaufP1Q04EpFgM4qBuqqwLm9P0STqrPLKC)ADwfr6PdOpnuTX0ahB)b6XhKnmklFyzDJE2eoHsjILtAD5wGF9MPU34rJQenu0yWkBB0ZzS50rideI7gU5xvQeDSHScOJq8JSiJJjWenlaPwAjsPH9gUyG(taiIo1nOX95GN8pJI8(laF6p3adUg3)lnUVOg3xI0Lg34i65NDt0rUxf(9Vek5F1PaHbNthzCgLONSFsbeuIU8dgGag6s2qpUpSiWVZgHQM0A1i3DjmUBKJJYzdn7BFzSnQoVRiJNfxEaSZ)AOY(nmwzBZtKXMFr9LsFeG7f04765qMOK8ZZgMqAFpJRayprg40XhHg9KgJwBs)2iKCQ5bqgz6ocACD3eoELSORwhhpLkqRiGJIBI06MyGYfzm7FtXuh1XDVY2exQO4OS50kNEuzlh2ZcThY)qDm9uwMg3ZbvZ3ofiGPl1N12DzmJNvgM)X5KA55NtQfYCsTm5CsT8IiQ4)nyI97c34Fh4dEz45)NHF)oWVAW3Ff46)l6iy14(xZv8Rp9IYo8vS9xku6VhwNgaqr0NNe6iVeVocDnU)joQkNVb5HzmhFF45F9PJ3e7XzfUPrB9AaGvnUPOYMn5c)PCj37WIC00vZqJ7hoDeLAC)iacPMTIsDnZY138ndRzEpMRzOciSUMbeqOzRqtjcMKWQnxIK9zX9LkrWL9fUjncGg3Fl83)orJrXJ)gu)ww366u1ydZmT(GutRJRExXPrlqUd9PmyVl74Xyr(epBa04fkLbqyJpGQyjJIzfb0doukB0(LrNmoE4JZWkRXDczDRrfie1c(mYgp8YNArj7WW)DuOLcjexo4ac8HKy2138OUAWe1mF2SkHKU0stXfa9(u2nyrP8KPT1vTdJbiIUvjM(CUnhg470STaEkonBfisN9a8APZ9CrgFvXz6IiZMTfjAcqRiCXKg3p(0uE3FcCNFk83)3mnq04Etu3dnUFMXO4pNQPHg3xVjkbnbpZanKX3aB(TCkyVPl8BjmzrPla8IIPbjtmPCSKI3Mdr)9R51fhAhH3Xehw(7EIdPZjLzIRdfhwKg3DMHvvTLXvv9MZL8Sa3Y1ztx3DlAZYwayUI)IA2UEetwBRAxlrZ2Ifdjr1Ype7a01SvmcNYgmB(5jh8ulnhbBHNrZ5xmAQYjgmQSmqamlyYWDD2SI9ITXkDR0zf2l(KSFmiYZ1yV4tQVaf7LU6kuSx8wXELPLGLzHdKE2FPZ89vZeZ3xjffcsJ5Jo1LRAJWQPKAJKMUfW6HsUCWKHkGOX9nmrL1vwqLHnRUkfgWYqd1(uxNLnPO28mvCz8x54YsLz6FCoPwE(5KAH0RXa4lKUvBCyvCrxzZAMzA8v6kcSwQeywbRLr8jicUCa9gdx1Sbl2RMRi(mxVGAPU2Cf9MXJTR5z8CMO3SU5twqV1qP49k16EWiqwt4A8PTFq6W1yQsNU(8uf5Nj4AxhNv4lPHxlL1BZoaBaknEdeB05l8aBqaBA2wjF2XKPzR8Y0SDdLOzBzWFDAaCawnBRmqE7s5PsplLNI06yA2wrwrIDcnU3l2W2G9OST6mb3kTENXKeDhf8)07Cvmn4wA2UXSd0Ih3gdaAHgeJ3eO1RkQprFYYrJMuCod1c9nfdBHXqAjQJ0s8kgP10f1zbPvsJOrrArfyLzBFXeAn3I0kt6tuX1Qc)UXuf(Dvabgdw15l95wmcedHwzfm1eSJ5G9)NAzxbgXAK5gByDfRrW7a6SmJNjCg1(QAD10Z5TdUMql7RIg9czfP6g4ICqgpjLnTH18fkwZ2AAIjD1YKXQNWAyQWBLf2JeW5oBm)QAbRMX6QRhWF1BN38RVRy(10x5YSjdtgDkITN1c9pHMTLpts4rBTGOjMbr8ZGfvqpgDgmPs2wuNuHfBxA1vYT1tDL3iY5nI8VdAe5SBv2zPW)R2Y6nb9EnHi58248k2gNm7rQJXal8HMNj3SokK7V8nxkduIlnBR1kwd4RNQ0CbQrsdpA1uJoZvCgm3dQeR7lzXxctIZGjffDzaouuVoyJ)R3baBq510bBqbEakZGXIYgUmM6M98hgt2SkAtgLRcl6tTiRRq(6nrbzy6uNgcILUXu8KsQRvA1xl1LtBXN7YGCAtK)wik02iiwbDtJ0ftinUF8mAvXlph(lDb1xU1YZpNulPBvXNEZZlfOlm9G0nP49U(N49vGcAsX2(lA6z(U)Imu1w1SAY5ek8ftXZirPNjfBAiihfIpRSNio1Iicq0aFxr22oFV092quJduAktU6RFoALEjmniThyrQmGBW6JLndrYESK4gYSxhQdt4hKek0UGc80)RLMBNcCU4iotxyOvNIoDHHS1owF6C4uGTi4nfNX2A1KQrfzwuKQQHo(baRaIFGspfO7pAOP4wuU5cAwhrFv(uSvWXP2kBfNgvuHQVIUQl6mgphvrKzWOLuTtOAPGARScRB8TiDvBsAZsdlBwkqcLNZQ0mnx)EAEUEwuOH85WvJdJEmp69uIPo8gsnHQWGkVSHOkCbYzkcLdBZwrVtjPGkykJS(jp4jt5NME344Yc0m4n6Xz9By1tZQb6jp9VLoW324ya1O7my2OEZQp19h8(Oz4blSMjbUXaHy6LFP58HweBFvZ5dft15d1TyWVM)DnH4x0Qq8YSCIGLBviEVM74K2I9u1HB8GXun84qmgYKkZmawm9l10Mrt(4Lrx3t1JyrwveyyAoWxVkHjWISubxm1kW2w4XhEcdF7L6tHSQQetFEi3Tepvhe9fq3zw3XRT02XRBZHRLrADzP1FxSzjzqEFoM9HLkhaePYYRk3TlKD(wrpxpDRg7FWGrJ)gKRZHEOaTehKswePi7tqZ6pDZcdnUjrNmpACbA6hrrCumXg0bgacEbic3o5aKsHz7I9skRth14P2TU97WrTvT9TUZXuaOx(poMPe4jarXXYXe4mOJHrsQBHy9ZpoTPyow8JWlY(zufJKnZZW81yFYuhCFqH4Q(uOjKgY1TqYswya67uKcPoCCNXcgwat)dyOnvCHivnLjld7HqYGkVOoSl)W3TMT1)YA28QxBJJPKoJSflwMjOVLumUIELQzB3SkAs6DBq3d)fPj7UKLfR9jS400k6jtdr8nmWTy8bmJxq)WTZt2SizRI08HH(v048jsZPgIg5ud2vRxKuRinLAGfuJZVinJAyup724jUnrpXLctdbVRBHdBKhVeHokRB4Lpzxb6AjhtspP)Hl2oTg3YoZAoxkjbdJ0EJg3kCtEtyheZuCJg3QObglkDMfzSGumnU1IPQgQOhnoxItpF1uI(dxbWnHjMeQCo4rxVg3gG(DvWV3mqjBKz8qUnP)3k1)7TKw6MrJBZ63zlPLMz042QzgLrJBBw)I70sMnwIFvnopgrHRE4MdQGaYvHLJ1vxkjbgPse6VFbAuO3NEQEdbhPX5nJjlgmxUai(2LrLWz3ssE5w04UTzo7VqtVlPN9x0BelP)fnU9ygZTlKs9VhO2cXYmyaDWNRP8fGZmdz7fGtmLK9cWPoBZ1lACnqPRgbSvW4ttPKixSK2p04A2mYR3fBMOf9igE9RNz7PU4z5QfnUwTe4Q0IUpmniuU(OvBTQXTFnU2146qJRZuAKajt4g2xm9b7gKOXNEwnrJ7aPLmtaPCAC3EgtyjAC3H5KaJAUt9CsYAx7iwl3btnfKOXDxwYui7S60tqcAC3DA5zenUdpJ5wenU(snHIOXXNPejIgxW0YFiACHYuMdrJlm9MrWeecIooZjjenobsXFasfSCcID6JmaiFdgIfftP6Uh69ocMFpyz6dgkurZCNrwJm8ClhFOXnOLu6bT1IJ5FbAsPGLdpMRBWewcNEwoPsJ7E1BtF6PNd8u5PXRSzU44s0U(9uzLEk3AtRzR5utDbACYwAA9ElMJcwe0YRNUIif(pvZvyTXk8qw37IMcn20ItpfASYvY0EbRH7ljN(MNxr0A446oLHrAXagyVFGN7bGFFFWV)EWVVFJKGXcPTbo2)G6eLzAdzZZl10EHzktP80hVhMActAMYaB1VfkA29YxoSAlLSybRlCshuS9pKyUnx(WwsBfS8Ebf07ijtvfMJM)psF18PWusHg3VplduS(1BnBniyMTgEe2ROjdQaRQhXOvlR47NTA8pG1nEuSVTPnLBPxcnU)WutPeACFas3G2HFqyq5XHFFm(PLajy5(HCAOzulzgd2OsSfYg8tjJrOX9HOjlcnUpCQsA)Jsn9qOXD6zrsHqJ7joJN3HZiegzccJmdXLFgHGLfiaLtCRZQ8rns8dWGiQWsrgPsbmbgWMok)smD8jmZDnhAES5JpjvjwCa)JbWGFgtyWA2Una97EGF9jsbgAasKIA0a5m3t2)SXk6N866I2b(l1TGUTnAXIcMASNLtNsxD2zJR(KHdGq3vFsvbylU0dZsdPCE7w0ITi6W109nGmEg5SnDswvVd2bOSoVJDacP4Tcxq0QL7VCDd4CWlvS6DPVtgAwxB7cWx51YvzV9D2DQ6PzD8mLybmDViGqON0n6gBZWbPpTdDNDQ6Pz)(mLia05XqDnmARzLZ9E1l0S4NRoH6uNfNdcnRRE(feZVFMjp)f9BOz0VGYCSH4yM9PXz2e6A2U50mE(CtmPOzBtPy9AQrRrRxNS4wCt0Bbid32S4WdZwhg22Mhz6Z8LPBuvCAJzxuJdxX6PKyBRz4rVO5JI2B122O2KfRMumMAU6iSzW3jYOhdyrcmZBHFNwcSv)Owmv)OoRMX)QIFuBXq8ZY4dZWB2V65cUNvmPHRrpgLzAA0i1aZuLg(QrjtZTqzo0rwCO5DZCLiXzkQ8Z4QWzH7AKr)wGXY9UMZBKXmnroH5DwVQGPFsYdCZ0HqZj31W208hJwUKi80t1ePDMYP6ogIx5UJXmHW7YTwE(5KAHmNultoNulZToErUMgPmq7zeCviwVlPRAG8gwDvJCkRpLeSNrt995ZrhVWk)5LeHxMo)V3Kb4lf3UGFUYTlYecVCZTlsbHhBGdX5XILR0r0z4RduirZKRoaG0Oq5ML(vbL6ZnaDMBP7idBPpto5DV58r0oBd0LUNXX9vBk(XQZgKXZy3qGJfxp4xCvX1dMgKLFtAqw0D9adpf9DsrquhWWI)HAbxOfqW58jUNse8LMRe9Q8xwUsKr87zbZdfOdZwzg4F(nmGpRjzvuUfFraD11zzqZlAA1nBvKhmuEWq5bdLhmuEWq5bdLhmuEWqxtbgspY2tZaq6iEGH4tv(ma55VGS(PJ7z(fA50gF55gipZWk)PjC)Q96X8Gh(VtGhUmpRmyPBKfnBoRmolNv2YV6FwzwAQPDuzMsNp08Usca1zBCMEnawJSDagSTkljn5zVlFag8z4am4tvayMsemfM2bpq9DIR6stYMZzyjFyLmlfFnG7zWBbGsAdOw1XvCgC2cFP6SfjTSaibfePEY1F(sHEPakH1IavBRBwLGym8CNzmdXCzjp9QPuSzlo0RIQwCvgmqUVN2vF0CPdes3oxiF5nXB12wCMRqy8QSmgZ1BKjzmzwx)S6W)o51T7uzwF78276Ad7D9FJ1oopA88MYlVP8wVAEB0CfAJMRLGTKZWkSMBDUQdWiRMGjlhQ2ZvQ1tvRm98eJrTBbMrvyyWQzB7I0GGTisrGCKAHhSA43A8sdZ1Eb686XaD9If3Pdp1U9TwlPuSs8WP7v8)PDRzBhpcV(pA225ZWI9sQp1FRRqZguN7IpzGxsdzw7vV16Udhv7zhqTnDNS3M)mg2O3MOE0IU7KbfAMdvu)PfQO1NAOIAjytTgkQa2k3eekw9NtpQa0S1apg3OjJFwG8tg1VSUGN625wRnjLtMAUjKrDjAnSrN1HmAMcx00dWZ5Qah1imuRI)YkKr1S1u2druA4HI3C2gIOjd)tmyQUSdrunB7Dgcp0nNs0CIXjQLa9mBHkA9PfQO(tnurnI0uYTLLWdn1qdfdx0zv4HA5D5FMIp00JkumAsPrix(WdDoj8qNP3H8zj8qffXqentHhAU8sG3AmCYcZZlRieLPStmhujJZ4R49P1G37LBeIQh9CgT56MP2m1GgLfHN6TRr8GMZXhkgvO0Od1o)CtWHM1a(KfAOziIrPPbhZigfd8Vucouwv)Gz5DH(LkOq1FnNBjMsxxwcouer7jNLVEZtn6qnEPMpxfCOSW(8shEOS29rPDL5QGd9X4Xae9s92fphJn0z61jE(Gd9Yp4qPX15vySHYcW0udouAaHUhwgubrdAafKf0O(endo0R0ZT9Sz7SBVSYg55EqkLP0TvgAVlZifAwfNJ5Ff0DnF2d(k2ArgNI7Sj9dYF5M(b5sA7XPN9b5UKzFqDEWdL(B8Plp)(AwARJlv2sDwFAAxBK7tTSIwspPAA5y9SyAOR2XIvUKA74tl12v4m)(WfhB5FxmL0zkt4IPNs6kYQr3MtJI2u2Ji3dLx93PhgNAlEsy0tU1AolUKz3BN2Cjo4Y)6r4AT3oT5HgK)flq(3oTVlLceU682P9AN3ekZH6XC1p2WZ)kL9)F4vkRLxHdLBj7nKwuXL(lWHRW4G7S5beLhquEar5beLhquEar5beLhq01caISghCt)n86vf32)DVxSR8Vt)IDDUCL(1eBgFveB0L(T6QJuFRUYCVFRmRRFwzRYCYT9Zdnp)RY18heBELlYRCX10Vgx5Vw814kF(xJR)o7RXvtV4)k514Q1eqF(xJRxt(ACnhIFUPji(DO4N7A7xtRx51YVR)czL)A8xiRxBNkSUIEDSMw4yL81Xk)v7xhRIVJ86y1iWJzVowxEUQwYLB0eN1mjFkVWu(DNxbRPN76N2BEvmB1JzT(8VKvNJFjRMBj4lAY(NMt)NLVjv1t2)507qvmP)FL(Mtv8Y5nNAUKz5sjb0Zs78PB51Q0FhP(N2DYOdnL4anTWevpQqXWfLfeP1rJSumEkzbeQr4uo9xdNzlEkXGj16BOjlrtAgEww4KIbOP131Pgr1zMJP0nN6BJ056xfPwJmwYp4ZKp4qZhCO5do08bhA(GdnFWHMp4qZhCO5do0Fhn4q1bvMpGpZFoJ5d4Z8b8z(a(mFaFMpGpZhWN5JVH8X3qExqkVliLp(gYhFd5JVH8X3q(a(mpGO8aIYdikpGO8aIYdikpGO8aIYhWN5d4ZzFaF()J9o)InkQ2JJVtxk1APiTLAzfQTcu)dwHavWed4gHgDTbtULe1xkXdIqMM0OyGBmetmrHNm8cVipDZ9wutFJN8bv4b)lMGMWEj3CtnbsmMaVOrns0x4bC(D(DoZ5pZzMDo7oZ2TLZeJHa7Co7oZCMZ3Z3F)(C(5a(0jn3b8PlqSUfx4wCHd4thWNoGpDaF6a(0b8Pd4thWNoGpDaF6a(0b8Pd4Zgg4t7R4rcgrFDKruKj0T5rRKOu0qFXQVaGgkLC0)rXDS5TH0JUdGruKvuoNOrlCObFF)Hn(eIUENe23fGE0AuTqLX6elBO5czN(bhV7rp(RDWxA6J5x9Nmu9q5aPUlFSsQUPF(XlX(2p7(pYQE(JFm)Pp4W77at)Qdx5qhyMSbsubGOaWOwdj6wJbuuoqNzdEO6yNM9qIc)9uqrTfsuklvCiqZjirFkkNOBwq2zCGHUBnWq3JkyOsOLktDQzirF2I6GIAfKOa1NXZikfko2vkvArDqIMjqIw6Ea5Fwbj60DdGIAcsuapueuuuYLGoZ4zfREiefHlLYRzWsLzqIM1DOgHOiFPS(8PzqIg8uGgoO1QFTMquKVukJODxDKSbsuGFpe8td8GcyIkXdASaLQajkCL)DyFPuO90kyrr(sHE9sXajk(t4KTtf5EcF7zefrlLQ(lBGefjYSwiIIOKI)moLFwbj6PPGIgbsue3tRPeLXaDh4fFhKOzeKOiGNniLOustJUXNqv7s34t8X6iVIuqknP1PtVGlVkRCwSY0yIGcBrDkRq7ZmTcTpnjtYPR4tFzG4ziwgOA8GLPtIETkASRngdx8noHnvt8ha95MMMj3krt)p8LDxohtRu06pz8hBor(vUFR)i)Q2kxotALQzsRCLmPvYOi)Q57RWqgzJFb3GHVIbFrOrJf8CoHG9gjWWyKF1CM2qxX8RM6mnVVer(voTxw8MwPQ3fZG0kn)YBf0734ZBfmVwsmVvu)12G5TsSgehnyMM73KZUpn7APU0IGzW(4s5R4J6dM3k7oND(6XCFu7oFFmxhHBBm7dzboiQ7JMsEa8ubBjBBl(O7JpgrX9X0MrMgIVVXOAlndmeS9M)mWszCWTuY4a68OMnZgNlnBZ4az7OTmnzZ)Kc9J9vC6f93fC6f98noeRXKoObqS24OqlsPaJXwhFKBblbd4PUO9AETEubU4KWaljsyXSkLcIOWRjLsbjPWREBLlNjTs1mPvUsM0kzBkfykl)ssThD)mJP1RMjHa8SHCsiejj)suShVRUozjrkfysHx6sPaffE4foqN3XVbQYsvrhpo(ujrPjm(wMZaMJ4FnELUDr83IO1An6fPngOkHC3yKM5t4ifa(BMlbGpIKLBPjzHfaEE2m2mNcIMgcs5WOKUW6je1CnpqkXONMmxJuxPjd4kUMMhQqh0RmnOQhkSj6xkK9q6yMbiw7ed5ed5ed5ed5ed5ed5ed5ed1AigscXAjdGykEA4TSwJBxT1HKNeg5hzY98E8Ot8WsjXd1zSY4BsTPowzEsXkRu(hRmPUksOYeZopvHgbssBzHSfqRrCbWaFvzpAZNTahadIHayquNaKyiag3TwGhO5orUpBsCjNboOi88OpH2cKEgwV5ihnzlEA1KTi0zbPnTw6gw7kLNqnp2ZsQR5tZZzXSvhAoU0ICwmq6FNw(RMtxieZNl45syViziL2GncbFwf3gtwjF7nr8W6iwf8VuTNL487AbWVRLWRo2Pg3zLNZkVroMZJMg0JMwjzlPwwH8()sUlWiwlyIjOA8nPKHcFkhwVjV1LmzIv3nPeIcaEkaeLYbPmGOy9cDBEXak6oqctJJ0ZNksn8CxHaDAgZZDRH55EuX8Cmf0rnwesrYurUojuWuHe6hHtnemvbHOZ32ZbSHoIsdbqKwgHPfGTLxrtPKUYAJVC8dD4d8pN5yuYqFFGm0HJNm059wRxuYq7didTVImaZ4OHIuqzIm0(ujdn4LIBuHmu)fiYqjkKHc7adWJQCuVIHnuodOPRaIwP8vNco2FXkLV(2Ph0p8Uc(WTLy9eLsiLP6jA1znskAWfw4R)gKyffETFWRvmJkQCXeD0Mv9ennOIIKoDbpfurlvkEurxxb2tIaSO90JnWI6jGf1pdGfL)iKgUOLkLoCrlY)SlwjfDEVdJOI6fIkAGuDFsTqfnoeXaylZQckku2jRz9enAhgwqrNtTdNlnfuurFUHA2NQftuzOjh0RyW7r(IttpcEnYFch)vLY)2ltpczR0ROmaPIXg4VEcwHr1irwcEugs8C4rrrmaA7ucsxBhrlZOKuuMrrw28muLrhAigaPTJaKYMarark7I5yb3)0UE49K0F9D9W7Blr)dIRhEjYw6Ktg8Fnb2s9vylL)A6rnIx6qdDrPRYaEPff1G0505e(9IWUzyji9bEGMhDP7nz6s5JjMzzlmaMU9MmGPCWs5GMw)aMUM2ELZUgVH)81S8lTN4Hnfjd1aTPZ79VyJxgTqWaMF9(PhbJt(3WX)Ps5VPF44Ed)GR3RDfouzBedsyO2jC3dfKuTcmDbVppZ9f89goXZY6)EN37dcojqAxWl8)OjQu()11vMQ7L3vLY34tM83luOqLYFN3931uNBYI0fYpHxrVIBI(sGG5uc(JDWQ54b)w)qu6pXwEw)6UNK(kghpR35XZQ02Oz3ciSe34hO6ediCfC(2EqbrRtgprRZr3vBgleP1GpZ5xHNmvBBhoDzKwjl1rALE9Z7)Q7u6Ofy7gVIMky1qVXiN5TVRJcRgAVN7zU4pEZyV(UKa0v)wuqxVAVWz3NfOUQvZvJG6APQtucD6YVvd1vchZtJOUsII6A)1dQRVzYOU69w1g1v8H)JeH11rf7SV9T4g2vYInyxjoyxB9GD1Vjb7633Dgb76JWb01X3rRhFh(UGc7ckSJVdRY5sFhFhPldwmiPJLOJfXvpslnkoepCiEuBep8B68UU31TZvjhAE(GzCaZTRlIxjcF5QbXR1BffHewrrobrBtqpB1bXYbyIuoatmOdIqdFrmB35jeidZBd6ZvD1dy32GoCgQBd6EM2g07bFEyRvNyRjqc78EFBeTstAOwJaM4q76ss9l4u2fwh7Hh0Pmz1sKL6vBezNYcleG0PdKMgWqkdyOLHppE9Tjwcsa5tg1qKX1Ke)eQjjOIb5N2tvnjr906SXQjj)sVb)BJ3lBKgiSu2Omj)Wuer5LkWvMngruRi80h0uvirmEZ6Yqcr1Hi69QMvvcrev4eRsiY)6u(XaVmH9gL1NxYOSWPk7KrLWevYvRdstOADquRwheU4PwQPUuwlHCrYsAQRgIGwAv3XxsEfXQQUZPcER3foz)86UdRR7S6ehsbHwnBLAeeAhVlPaC()ZiVD1ERa9YzmgOh)sEgR6Qhu0HWiu6yvMN9RpQn2EFvY5TVq4rkJq3aMnqpMi01)DmrOl(2XKYJOxCB52gAfklsFS2szrlvS(oMTlPRaKYpnHDn5wbi12qPyxS8022ANnXy5DQcH7TZ0)FuREKIEoF(p5fDOgEKWrVS2LPs2CXFUgRnhN5XKbaPBsmjJbytjPhpfIGr0BJtGMi7Tzz8u8f(m4tLtO5wGsqsalkPpKTSGXlNFMEsDys4(fatNfUmBPQvMsUNWU71H2sCgl4Mx71ZnVbZUBEs5QIsDM1pFSciy5)YvYC1BvThHg4XFORfCvSZgdgy94nLPSa73cXcCdyd9F3ENpHevFrXXrN77CZzIuFs4xSgWfPLuiK)B0PIYucx0IKKYI(J64tFdo2m(M3tsuZk0YmccdPiOiAvTPGKOf2UeCJHfsHTjQqRLb1I(T5h15nVH0rkifeDXmWHZCo3ZDEZbM5(U8o3pCwQSaVWdMY8pi3It4b5w8kfoW6RzWboTvaCGnxNxNFVQNeh4K4aVSkMI9zxFPxnL)osW1U8woR2Kv)nz1FtIeCsKGxf39YYgjy91oib3Zg3X)isWlIf40ELhxXrM1UPXwIFEvQJgdg4gIddCw2WaN1HukPOsl0x9kLUtFfwrC2yR2tTj2Rv1J1HTSbO1bkxNP7Eb44My)LLhz36XMEC4B)da8UkXBCEVDXycxzCuH3NUtkMUBhmH3tdjIBSUZRH7WkyG2QQXOMUJKriwDenJObdFMQ01c0220TcuZNcyf1mC71PDwtldTOUJOA2OrRAMAnF4iAHcf9GbJAEVtaz6Jc5MgbYSthYmReQd0oBpfK5FtilVFiPGqMZyqk9d523kOl1aOR7f0WVH13fYD9yqxJLjgKhJNBgEa96YbnWlz5KG6mcOU(cOPNM1Zb6Dzb6YFN97d0GvaAi2(Ipf0fy7(DXVVBqTFhqpACq3VAwubn2Tb9FJb657h04NoMTOMnd1H)juVsUqK6qqKtHqikGLtb1r8cXX(ae9wme9nbeM1dH1dGO7xafpBbkRpxEUgq8X)hkipO4Zdu8FdESPCS9mxmBXS9dXx5RBxVNZT9Y5q(GMH)o2HgOiZc6wS(j)a0d5C8zhacLjH6vhf0KzcPWflzdP)Jdzfsil4Zq6DdFRzTMSAPL66kIwvHdf2OZultTPuuBnfvdBwBkFMu6XXHTvjoo57t0BzQgUSJQj(VCNF(iy3SJZXoC97pdo8(CCepcBvr8o7s8k9R"


local Serializer = LibStub:GetLibrary("LibSerialize")
local LibDeflate = LibStub:GetLibrary("LibDeflate")
local importLink = function()
    

    local F = Cell.funcs

    local importString = importString

    local version, data = string.match(importString, "^!CELL:(%d+):ALL!(.+)$")
    version = tonumber(version)
    
    if version and data then
        if version >= Cell.MIN_VERSION and version <= Cell.versionNum then
            local success
            local imported = {}
            local ignoredIndices = {}

            data = LibDeflate:DecodeForPrint(data)                                    -- decode
            success, data = pcall(LibDeflate.DecompressDeflate, LibDeflate, data)     -- decompress
            success, data = Serializer:Deserialize(data)    
            useDevTool(success, "success")                          -- deserialize
            useDevTool(data, "import data")
            if success and data then
                imported = data
                -- raid debuffs

                for instanceID in pairs(imported["raidDebuffs"]) do
                    if not Cell.snippetVars.loadedDebuffs[instanceID] then
                        imported["raidDebuffs"][instanceID] = nil
                    end
                end

                -- deal with invalid
                if Cell.isRetail then
                    imported["appearance"]["useLibHealComm"] = false
                end

                -- layouts
                local builtInFound = {}
                for _, layout in pairs(imported["layouts"]) do
                    -- indicators
                    for i = #layout["indicators"], 1, -1 do
                        if layout["indicators"][i]["type"] == "built-in" then     -- remove unsupported built-in
                            local indicatorName = layout["indicators"][i]["indicatorName"]
                            builtInFound[indicatorName] = true
                            if not Cell.defaults.indicatorIndices[indicatorName] then
                                tremove(layout["indicators"], i)
                            end
                        else     -- remove invalid spells from custom indicators
                            F:FilterInvalidSpells(layout["indicators"][i]["auras"])
                        end
                    end
                    -- powerFilters
                    if Cell.flavor ~= imported.flavor then
                        layout.powerFilters = F:Copy(Cell.defaults.layout.powerFilters)
                    end
                end

                -- add missing indicators
                if F:Getn(builtInFound) ~= Cell.defaults.builtIns then
                    for indicatorName, index in pairs(Cell.defaults.indicatorIndices) do
                        if not builtInFound[indicatorName] then
                            for _, layout in pairs(imported["layouts"]) do
                                tinsert(layout["indicators"], index, Cell.defaults.layout.indicators[index])
                            end
                        end
                    end
                end

                -- click-castings
                local clickCastings
                if Cell.isRetail then     -- RETAIL -> RETAIL
                    clickCastings = imported["clickCastings"]
                end
                imported["clickCastings"] = nil

                -- layout auto switch
                local layoutAutoSwitch
                if imported["layoutAutoSwitch"] then
                    if Cell.isRetail then     -- RETAIL -> RETAIL
                        layoutAutoSwitch = imported["layoutAutoSwitch"]
                    else                      -- RETAIL -> WRATH
                        layoutAutoSwitch = nil
                    end
                    imported["layoutAutoSwitch"] = nil
                end

                -- remove characterDB
                imported["characterDB"] = nil

                -- remove invalid spells
                F:FilterInvalidSpells(imported["debuffBlacklist"])
                F:FilterInvalidSpells(imported["bigDebuffs"])
                F:FilterInvalidSpells(imported["actions"])
                F:FilterInvalidSpells(imported["customDefensives"])
                F:FilterInvalidSpells(imported["customExternals"])
                F:FilterInvalidSpells(imported["targetedSpellsList"])

                --! overwrite
                if Cell.isRetail then
                    if not ignoredIndices["clickCastings"] then
                        CellDB["clickCastings"] = clickCastings
                    end
                    if not ignoredIndices["layouts"] then
                        CellDB["layoutAutoSwitch"] = layoutAutoSwitch
                    end
                end

                for k, v in pairs(imported) do
                    CellDB[k] = v
                end
            end
        end
    end

end

table.insert(private.Addons, {
    name = addonName,
    import = importLink,
    importText = importText
})
