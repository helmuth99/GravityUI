local Addon, private = ...

PlaterDump = {
    ["target_shady_combat_only"] = false,
    ["extra_icon_use_blizzard_border_color"] = false,
    ["script_data"] = {
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
            ["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
            ["ScriptType"] = 1,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
            ["Time"] = 1740198451,
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_invalid",
            ["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
            ["Revision"] = 118,
            ["Options"] = {
            },
            ["Author"] = "Izimode-Azralon",
            ["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
            ["NpcNames"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
            ["Name"] = "Aura - Invalidate Unit [Plater]",
            ["PlaterCore"] = 1,
            ["Desc"] =
            "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
            ["SpellIds"] = {
                261265,
                261266,
                271590,
            },
            ["Prio"] = 99,
            ["Enabled"] = true,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
            ["ScriptType"] = 1,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1724877436,
            ["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
            ["Revision"] = 639,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option1",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] =
                    "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option3",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "glowEnabled",
                    ["Value"] = false,
                    ["Name"] = "Glow Enabled",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "glowColor",
                    ["Value"] = {
                        0.40392156862745,
                        0.003921568627451,
                        0,
                        1,
                    },
                    ["Name"] = "Glow Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option3",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "dotsEnabled",
                    ["Value"] = true,
                    ["Name"] = "Dots Enabled",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "dotsColor",
                    ["Value"] = {
                        1,
                        0.32156862745098,
                        0,
                        1,
                    },
                    ["Name"] = "Dots Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
            },
            ["Author"] = "Tercioo-Sylvanas",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "Add the buff name in the trigger box.",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
            ["Name"] = "Aura - Buff Alert [Plater]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
            ["Enabled"] = true,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
            ["OptionsValues"] = {
                ["dotColor"] = {
                    0.5647059082984924,
                    0.5647059082984924,
                    0.5647059082984924,
                    1,
                },
                ["castBarColor"] = {
                    1,
                    0.4313725829124451,
                    0,
                    1,
                },
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198520,
            ["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
            ["Revision"] = 892,
            ["semver"] = "1.0.0",
            ["url"] = "https://wago.io/Now2_IBi2/1",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option1",
                    ["Value"] = 0,
                    ["Name"] = "Option 1",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] = "Plays a big animation when the cast start.",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] =
                    "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Option 4",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] = "Flash:",
                    ["Name"] = "Flash",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1.2,
                    ["Desc"] = "How long is the flash played when the cast starts.",
                    ["Min"] = 0.1,
                    ["Key"] = "flashDuration",
                    ["Value"] = 0.8,
                    ["Name"] = "Flash Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "flashColor",
                    ["Value"] = {
                        1,
                        1,
                        1,
                        1,
                    },
                    ["Name"] = "Flash Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Color of the Flash",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Option 7",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] = "Shake:",
                    ["Name"] = "Shake",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 0.5,
                    ["Desc"] =
                    "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
                    ["Min"] = 0.1,
                    ["Key"] = "shakeDuration",
                    ["Value"] = 0.2,
                    ["Name"] = "Shake Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "How strong is the shake.",
                    ["Min"] = 1,
                    ["Key"] = "shakeAmplitude",
                    ["Value"] = 5,
                    ["Name"] = "Shake Amplitude",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 80,
                    ["Desc"] = "How fast the shake moves.",
                    ["Min"] = 1,
                    ["Key"] = "shakeFrequency",
                    ["Value"] = 40,
                    ["Name"] = "Shake Frequency",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option13",
                    ["Value"] = 0,
                    ["Name"] = "Option 13",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option14",
                    ["Value"] = "Dot Animation:",
                    ["Name"] = "Dot Animation",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "dotColor",
                    ["Value"] = {
                        0.56470588235294,
                        0.56470588235294,
                        0.56470588235294,
                        1,
                    },
                    ["Name"] = "Dot Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Adjust the color of the dots around the nameplate",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 20,
                    ["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
                    ["Min"] = -10,
                    ["Key"] = "xOffset",
                    ["Value"] = 8,
                    ["Name"] = "Dot X Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
                    ["Min"] = -10,
                    ["Key"] = "yOffset",
                    ["Value"] = 3,
                    ["Name"] = "Dot Y Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option19",
                    ["Value"] = "Cast Bar",
                    ["Name"] = "Option 19",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useCastbarColor",
                    ["Value"] = true,
                    ["Name"] = "Use Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Use cast bar color.",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "castBarColor",
                    ["Value"] = {
                        0.41176470588235,
                        1,
                        0,
                        1,
                    },
                    ["Name"] = "Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Cast bar color.",
                },
            },
            ["Author"] = "Bombad�o-Azralon",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] =
            "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Name"] = "Cast - Very Important [Plater]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = 1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
            ["ScriptType"] = 1,
            ["Temp_Initialization"] =
            "					function (scriptTable)\n						--insert code here\n						\n					end\n				",
            ["Time"] = 1724877435,
            ["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
            ["Revision"] = 371,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option1",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] =
                    "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option3",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "glowEnabled",
                    ["Value"] = false,
                    ["Name"] = "Glow Enabled",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "glowColor",
                    ["Value"] = {
                        0.40392156862745,
                        0.003921568627451,
                        0,
                        1,
                    },
                    ["Name"] = "Glow Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option3",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "dotsEnabled",
                    ["Value"] = true,
                    ["Name"] = "Dots Enabled",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "dotsColor",
                    ["Value"] = {
                        1,
                        0.32156862745098,
                        0,
                        1,
                    },
                    ["Name"] = "Dots Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
            },
            ["Author"] = "Tercioo-Sylvanas",
            ["Initialization"] = "					function (scriptTable)\n						--insert code here\n						\n					end\n				",
            ["Desc"] = "Add the debuff name in the trigger box.",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
            ["Name"] = "Aura - Debuff Alert [Plater]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
            ["Enabled"] = true,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the reference of the arrow texture\n    local movingArrowTexture = unitFrame._movingArrowTexture\n    \n    --if it doesn't exists yet, create now\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    local mAT = movingArrowTexture\n    \n    if (not mAT.movingAnimation) then\n        local onPlay = function()\n            mAT:Show() \n        end\n        \n        local onStop =  function()\n            mAT:Hide() \n        end\n        \n        mAT.movingAnimation = Plater:CreateAnimationHub( mAT, onPlay, onStop )\n        mAT.movingAnimation:SetLooping( \"REPEAT\" )\n    end\n    \n    if (not mAT.arrowAnimation) then\n        local arrowAnimation = Plater:CreateAnimation (mAT.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n        mAT.arrowAnimation = arrowAnimation\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    mAT.movingAnimation:Stop()\n    \nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    \n    mAT:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    mAT:SetSize(16, self:GetHeight())\n    mAT:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    mAT:SetParent(self.FrameOverlay)\n    mAT:SetDrawLayer(\"overlay\",  7)\n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    mAT:SetDesaturated(scriptTable.config.desaturateArrow)        \n    \n    mAT:ClearAllPoints()\n    mAT:SetPoint(\"left\", self, \"left\", -16, 0)\n    \n    local arrowAnimation = mAT.arrowAnimation\n    arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    arrowAnimation:SetOffset(self:GetWidth(), 0)\n    \n    mAT.movingAnimation:Play()\n    \n    if (scriptTable.config.bChangeSpellName) then\n        self.Text:SetText(scriptTable.config.spellNameText)\n    end\n    \n    --DetailsFramework:DebugVisibility(mAT)\n\nend\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198543,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    local maxAlpha = scriptTable.config.arrowAlpha\n    \n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = mAT.movingAnimation:GetProgress()\n    \n    if (percent < 0.20) then\n        local value = DetailsFramework.Math.MapRangeClamped(0, 0.20, 0, maxAlpha, percent)\n        mAT:SetAlpha(value)\n        \n    elseif (percent > 0.8) then\n        local value = DetailsFramework.Math.MapRangeClamped(0.8, 1, maxAlpha, 0, percent)\n        mAT:SetAlpha(value)\n    end\n    \n    self.ThrottleUpdate = 0\n    \n    --mAT:SetAlpha(1)\nend",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the reference of the arrow texture\n    local movingArrowTexture = unitFrame._movingArrowTexture\n    \n    --if it doesn't exists yet, create now\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    local mAT = movingArrowTexture\n    \n    if (not mAT.movingAnimation) then\n        local onPlay = function()\n            mAT:Show() \n        end\n        \n        local onStop =  function()\n            mAT:Hide() \n        end\n        \n        mAT.movingAnimation = Plater:CreateAnimationHub( mAT, onPlay, onStop )\n        mAT.movingAnimation:SetLooping( \"REPEAT\" )\n    end\n    \n    if (not mAT.arrowAnimation) then\n        local arrowAnimation = Plater:CreateAnimation (mAT.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n        mAT.arrowAnimation = arrowAnimation\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    mAT.movingAnimation:Stop()\n    \nend\n\n\n",
            ["Revision"] = 755,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option1",
                    ["Value"] = 0,
                    ["Name"] = "Option 1",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] =
                    "Produces an effect to indicate the spell will hit players in front of the enemy.",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option4",
                    ["Value"] =
                    "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                    ["Name"] = "Option 4",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option3",
                    ["Value"] = 0,
                    ["Name"] = "Option 3",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Set the alpha of the moving arrow",
                    ["Min"] = 0,
                    ["Key"] = "arrowAlpha",
                    ["Value"] = 0.73,
                    ["Name"] = "Arrow Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Time that takes for an arrow to travel from the to right.",
                    ["Min"] = 0,
                    ["Key"] = "animSpeed",
                    ["Value"] = 0.2,
                    ["Name"] = "Animation Speed",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "desaturateArrow",
                    ["Value"] = false,
                    ["Name"] = "Use White Arrow",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "If enabled, the arrow color will be desaturated.",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option8",
                    ["Value"] = 0,
                    ["Name"] = "Option 8",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "bChangeSpellName",
                    ["Value"] = true,
                    ["Name"] = "Change Spell Name",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Change the spell name to the text entered below",
                },
                {
                    ["Type"] = 3,
                    ["Key"] = "spellNameText",
                    ["Value"] = "Frontal",
                    ["Name"] = "New Spell Name",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
                    ["Desc"] = "The customized spell name",
                },
            },
            ["Author"] = "Terciob",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] =
            "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
            ["SpellIds"] = {
                431494,
                426860,
                448213,
                434407,
                439789,
                434824,
                453161,
                435012,
                439506,
                443500,
                434779,
                451543,
                439621,
                441384,
                441381,
                447395,
                456711,
                448105,
                323137,
                321968,
                331718,
                331721,
                325223,
                340160,
                321834,
                320596,
                324323,
                333488,
                323496,
                333477,
                256627,
                257292,
                454438,
                269029,
                257862,
                425027,
                449130,
                428202,
                448640,
                427869,
                265540,
                226304,
                393432,
                375327,
                372202,
                369409,
                260894,
                226406,
                193505,
                375348,
                413529,
                408141,
                412215,
                197974,
                200913,
                164357,
                169179,
                428293,
                169929,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    local maxAlpha = scriptTable.config.arrowAlpha\n    \n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = mAT.movingAnimation:GetProgress()\n    \n    if (percent < 0.20) then\n        local value = DetailsFramework.Math.MapRangeClamped(0, 0.20, 0, maxAlpha, percent)\n        mAT:SetAlpha(value)\n        \n    elseif (percent > 0.8) then\n        local value = DetailsFramework.Math.MapRangeClamped(0.8, 1, maxAlpha, 0, percent)\n        mAT:SetAlpha(value)\n    end\n    \n    self.ThrottleUpdate = 0\n    \n    --mAT:SetAlpha(1)\nend",
            ["Name"] = "Cast - Frontal Cone [Plater]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    \n    mAT:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    mAT:SetSize(16, self:GetHeight())\n    mAT:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    mAT:SetParent(self.FrameOverlay)\n    mAT:SetDrawLayer(\"overlay\",  7)\n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    mAT:SetDesaturated(scriptTable.config.desaturateArrow)        \n    \n    mAT:ClearAllPoints()\n    mAT:SetPoint(\"left\", self, \"left\", -16, 0)\n    \n    local arrowAnimation = mAT.arrowAnimation\n    arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    arrowAnimation:SetOffset(self:GetWidth(), 0)\n    \n    mAT.movingAnimation:Play()\n    \n    if (scriptTable.config.bChangeSpellName) then\n        self.Text:SetText(scriptTable.config.spellNameText)\n    end\n    \n    --DetailsFramework:DebugVisibility(mAT)\n\nend\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
            ["ScriptType"] = 3,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
            ["Time"] = 1740198589,
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
            ["Icon"] = 136048,
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
            ["Revision"] = 149,
            ["Options"] = {
            },
            ["Author"] = "Celian-Sylvanas",
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
            ["NpcNames"] = {
                "Guardian of Yogg-Saron",
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
            ["Name"] = "UnitPower [Plater]",
            ["PlaterCore"] = 1,
            ["Desc"] = "Show the energy amount above the nameplate",
            ["SpellIds"] = {
            },
            ["Prio"] = 99,
            ["Enabled"] = true,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
            ["OptionsValues"] = {
                ["castbarColor"] = {
                    1,
                    0.4313725829124451,
                    0,
                    1,
                },
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
            ["Time"] = 1740198550,
            ["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
            ["Revision"] = 1430,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option1",
                    ["Value"] = 0,
                    ["Name"] = "Blank Line",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] =
                    "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option3",
                    ["Value"] =
                    "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                    ["Name"] = "Option 3",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useCastbarColor",
                    ["Value"] = true,
                    ["Name"] = "Cast Bar Color Enabled",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "When enabled, changes the cast bar color,",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "castbarColor",
                    ["Value"] = {
                        1,
                        0.43137254901961,
                        0,
                        1,
                    },
                    ["Name"] = "Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Color of the cast bar.",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Blank Line",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] =
                    "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
                    ["Min"] = 0.05,
                    ["Key"] = "flashDuration",
                    ["Value"] = 0.4,
                    ["Name"] = "Flash Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Increases the cast bar height by this value",
                    ["Min"] = 0,
                    ["Key"] = "castBarHeight",
                    ["Value"] = 5,
                    ["Name"] = "Cast Bar Height Mod",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] =
                    "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
                    ["Min"] = 0.1,
                    ["Key"] = "shakeDuration",
                    ["Value"] = 0.2,
                    ["Name"] = "Shake Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 100,
                    ["Desc"] = "How strong is the shake.",
                    ["Min"] = 2,
                    ["Key"] = "shakeAmplitude",
                    ["Value"] = 8,
                    ["Name"] = "Shake Amplitude",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 80,
                    ["Desc"] = "How fast the shake moves.",
                    ["Min"] = 1,
                    ["Key"] = "shakeFrequency",
                    ["Value"] = 40,
                    ["Name"] = "Shake Frequency",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
            },
            ["Author"] = "Tercioo-Sylvanas",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
            ["Desc"] =
            "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
            ["SpellIds"] = {
                263365,
                395872,
                387975,
                265089,
                278755,
                266106,
                272183,
                265523,
                202181,
                374080,
                400386,
                372711,
                88010,
                410870,
                266209,
                342797,
                204243,
                279118,
                225562,
                264390,
                265346,
                264407,
                411300,
                412378,
                412233,
                407891,
                416139,
                165213,
                169839,
            },
            ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Name"] = "Cast - Big Alert [Plater]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"pink\" \n    \nend\n\n\n",
            ["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
            ["ScriptType"] = 1,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    \nend\n\n\n",
            ["Time"] = 1740507356,
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"pink\" \n    \nend\n\n\n",
            ["Icon"] = "INTERFACE\\ICONS\\Achievement_PVP_P_01",
            ["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
            ["Revision"] = 50,
            ["Options"] = {
            },
            ["Author"] = "抹了油的大叔-白银之手",
            ["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
            ["NpcNames"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    \nend\n\n\n",
            ["Name"] = "NameplaterColor with Special Buff ID",
            ["PlaterCore"] = 1,
            ["Desc"] = "NameplaterColor with Special Buff ID",
            ["SpellIds"] = {
                277242,
            },
            ["Prio"] = 99,
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740507325,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
            ["Icon"] = 2175503,
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
            ["Revision"] = 546,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 2,
                    ["Max"] = 6,
                    ["Desc"] = "Increases the cast bar height by this value",
                    ["Min"] = 0,
                    ["Key"] = "castBarHeight",
                    ["Value"] = 3,
                    ["Name"] = "Cast Bar Height Mod",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "castBarColor",
                    ["Value"] = {
                        1,
                        0.5843137254902,
                        0,
                        1,
                    },
                    ["Name"] = "Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Changes the cast bar color to this one.",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Option 7",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option6",
                    ["Value"] = "Arrow:",
                    ["Name"] = "Arrow:",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "showArrow",
                    ["Value"] = true,
                    ["Name"] = "Show Arrow",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Arrow alpha.",
                    ["Min"] = 0,
                    ["Key"] = "arrowAlpha",
                    ["Value"] = 1,
                    ["Name"] = "Arrow Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 12,
                    ["Desc"] = "Arrow Width.",
                    ["Min"] = 4,
                    ["Key"] = "arrowWidth",
                    ["Value"] = 8,
                    ["Name"] = "Arrow Width",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 12,
                    ["Desc"] = "Arrow Height.",
                    ["Min"] = 4,
                    ["Key"] = "arrowHeight",
                    ["Value"] = 8,
                    ["Name"] = "Arrow Height",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option13",
                    ["Value"] = 0,
                    ["Name"] = "Option 13",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option12",
                    ["Value"] = "Dot Animation:",
                    ["Name"] = "Dot Animation:",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "dotColor",
                    ["Value"] = {
                        1,
                        0.6156862745098,
                        0,
                        1,
                    },
                    ["Name"] = "Dot Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Adjust the color of the dot animation.",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Dot X Offset",
                    ["Min"] = -10,
                    ["Key"] = "xOffset",
                    ["Value"] = 4,
                    ["Name"] = "Dot X Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Dot Y Offset",
                    ["Min"] = -10,
                    ["Key"] = "yOffset",
                    ["Value"] = 3,
                    ["Name"] = "Dot Y Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "Option 18",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option17",
                    ["Value"] = "Nameplate Color",
                    ["Name"] = "Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useNameplateColor",
                    ["Value"] = false,
                    ["Name"] = "Change Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Change Nameplate Color",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "healthBarColor",
                    ["Value"] = {
                        1,
                        0.1843137294054,
                        0,
                        1,
                    },
                    ["Name"] = "Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Health Bar Color",
                },
            },
            ["Author"] = "Bombad o-Azralon",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] =
            "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
            ["SpellIds"] = {
                273577,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
            ["Name"] = "Explosion Affix M+ [Plater]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "--gray lines are comments and doesn't affect the code\n\n--1) add the aura you want by typing its name or spellID into the \"Add Trigger\" and click the \"Add\" button.\n--2) the border will use the default color set below, to a custom color type aura name and the color you want in the BorderColorByAura table.\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --default color if the aura name isn't found in the Color By Aura table below\n    envTable.DefaultBorderColor = \"orange\"\n    \n    --transparency, affect all borders\n    envTable.BorderAlpha = 1.0\n    \n    --add the aura name and the color, \n    envTable.BorderColorByAura = {\n        \n        --examples:\n        --[\"Aura Name\"] = \"yellow\", --using regular aura name | using the name of the color\n        --[\"aura name\"] = \"#FFFF00\", --using lower case in the aura name |using html #hex for the color\n        --[54214] = {1, 1, 0}, --using the spellID instead of the name | using rgb table (0 to 1) for the color\n        --color table uses zero to one values: 255 = 1.0, 127 = 0.5, orange color = {1, 0.7, 0}\n        \n        --add your custom border colors below:\n        \n        [\"Aura Name\"] = {1, .5, 0}, --example to copy/paste\n        \n    }\n    \n    \nend\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --reset the border color\n    self:SetBackdropBorderColor (0, 0, 0, 0)\n    \nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --get the aura name in lower case\n    local auraLowerName = string.lower (envTable._SpellName)\n    \n    --attempt to get a custom color added by the user in the constructor script\n    local hasCustomBorderColor = envTable.BorderColorByAura [auraLowerName] or envTable.BorderColorByAura [envTable._SpellName] or envTable.BorderColorByAura [envTable._SpellID]\n    \n    --save the custom color\n    envTable.CustomBorderColor = hasCustomBorderColor\n    \nend\n\n\n",
            ["ScriptType"] = 1,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --get the custom color added by the user or the default color\n    local color = envTable.CustomBorderColor or envTable.DefaultBorderColor\n    --parse the color since it can be a color name, hex or color table\n    local r, g, b = DetailsFramework:ParseColors (color)\n    \n    --set the border color\n    self:SetBackdropBorderColor (r, g, b, envTable.BorderAlpha)\n    \nend\n\n\n\n\n",
            ["Time"] = 1724877436,
            ["Temp_ConstructorCode"] =
            "--gray lines are comments and doesn't affect the code\n\n--1) add the aura you want by typing its name or spellID into the \"Add Trigger\" and click the \"Add\" button.\n--2) the border will use the default color set below, to a custom color type aura name and the color you want in the BorderColorByAura table.\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --default color if the aura name isn't found in the Color By Aura table below\n    envTable.DefaultBorderColor = \"orange\"\n    \n    --transparency, affect all borders\n    envTable.BorderAlpha = 1.0\n    \n    --add the aura name and the color, \n    envTable.BorderColorByAura = {\n        \n        --examples:\n        --[\"Aura Name\"] = \"yellow\", --using regular aura name | using the name of the color\n        --[\"aura name\"] = \"#FFFF00\", --using lower case in the aura name |using html #hex for the color\n        --[54214] = {1, 1, 0}, --using the spellID instead of the name | using rgb table (0 to 1) for the color\n        --color table uses zero to one values: 255 = 1.0, 127 = 0.5, orange color = {1, 0.7, 0}\n        \n        --add your custom border colors below:\n        \n        [\"Aura Name\"] = {1, .5, 0}, --example to copy/paste\n        \n    }\n    \n    \nend\n\n\n\n\n",
            ["Icon"] = 133006,
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --reset the border color\n    self:SetBackdropBorderColor (0, 0, 0, 0)\n    \nend\n\n\n",
            ["Revision"] = 61,
            ["Options"] = {
            },
            ["Author"] = "Izimode-Azralon",
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --get the aura name in lower case\n    local auraLowerName = string.lower (envTable._SpellName)\n    \n    --attempt to get a custom color added by the user in the constructor script\n    local hasCustomBorderColor = envTable.BorderColorByAura [auraLowerName] or envTable.BorderColorByAura [envTable._SpellName] or envTable.BorderColorByAura [envTable._SpellID]\n    \n    --save the custom color\n    envTable.CustomBorderColor = hasCustomBorderColor\n    \nend\n\n\n",
            ["NpcNames"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --get the custom color added by the user or the default color\n    local color = envTable.CustomBorderColor or envTable.DefaultBorderColor\n    --parse the color since it can be a color name, hex or color table\n    local r, g, b = DetailsFramework:ParseColors (color)\n    \n    --set the border color\n    self:SetBackdropBorderColor (r, g, b, envTable.BorderAlpha)\n    \nend\n\n\n\n\n",
            ["Name"] = "Aura - Border Color [Plater]",
            ["PlaterCore"] = 1,
            ["Desc"] =
            "Add a border to an aura icon. Add the aura into the Add Trigger entry. You can customize the icon color at the constructor script.",
            ["SpellIds"] = {
            },
            ["Prio"] = 99,
            ["Enabled"] = true,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
            ["ScriptType"] = 1,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198560,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
            ["Revision"] = 378,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option10",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option17",
                    ["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
                    ["Name"] = "Option 17",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option10",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "blinkEnabled",
                    ["Value"] = true,
                    ["Name"] = "Blink Enabled",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "set to 'false' to disable blink",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "glowEnabled",
                    ["Value"] = true,
                    ["Name"] = "Glow Enabled",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "set to 'false' to disable glows",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "changeNameplateColor",
                    ["Value"] = false,
                    ["Name"] = "Change NamePlate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "set to 'true' to enable nameplate color change",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 20,
                    ["Desc"] = "in seconds, affects the blink effect only",
                    ["Min"] = 1,
                    ["Key"] = "timeleftToBlink",
                    ["Value"] = 3,
                    ["Name"] = "Timeleft to Blink",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 3,
                    ["Desc"] = "time to complete a blink loop",
                    ["Min"] = 0.5,
                    ["Key"] = "blinkSpeed",
                    ["Value"] = 1,
                    ["Name"] = "Blink Speed",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
                    ["Min"] = 0.1,
                    ["Key"] = "blinkMaxAlpha",
                    ["Value"] = 0.6,
                    ["Name"] = "Blink Max Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "blinkColor",
                    ["Value"] = {
                        1,
                        1,
                        1,
                        1,
                    },
                    ["Name"] = "Blink Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "color of the blink",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "nameplateColor",
                    ["Value"] = {
                        0.28627450980392,
                        0.003921568627451,
                        0,
                        1,
                    },
                    ["Name"] = "Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "nameplate color if ChangeNameplateColor is true",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option10",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "timerColorEnabled",
                    ["Value"] = true,
                    ["Name"] = "Timer Color Enabled",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "set to 'false' to disable changes in the color of the time left text",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 20,
                    ["Desc"] = "in seconds, affects the color of the text",
                    ["Min"] = 1,
                    ["Key"] = "timeLeftWarning",
                    ["Value"] = 8,
                    ["Name"] = "Time Left Warning",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "in seconds, affects the color of the text",
                    ["Min"] = 1,
                    ["Key"] = "timeLeftCritical",
                    ["Value"] = 3,
                    ["Name"] = "Time Left Critical",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "warningColor",
                    ["Value"] = {
                        1,
                        0.87058823529412,
                        0,
                        1,
                    },
                    ["Name"] = "Warning Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "color when the time left entered in a warning zone",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "criticalColor",
                    ["Value"] = {
                        1,
                        0.074509803921569,
                        0,
                        1,
                    },
                    ["Name"] = "Critical Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "color when the time left is critical",
                },
            },
            ["Author"] = "Izimode-Azralon",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] =
            "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
            ["Name"] = "Aura - Blink by Time Left [Plater]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --custom frames\n    unitFrame.JadeFireGlowEffect = unitFrame.JadeFireGlowEffect or Plater.CreateNameplateGlow (unitFrame.healthBar)\n    unitFrame.JadeFireGlowEffect:SetOffset (-27, 25, 6, -8)\n    unitFrame.JadeFireGlowEffect:Hide()\n    \nend\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:Hide() \nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:Show() \nend\n\n\n",
            ["ScriptType"] = 1,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:SetAlpha (.5)\nend\n\n\n",
            ["Time"] = 1740507344,
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --custom frames\n    unitFrame.JadeFireGlowEffect = unitFrame.JadeFireGlowEffect or Plater.CreateNameplateGlow (unitFrame.healthBar)\n    unitFrame.JadeFireGlowEffect:SetOffset (-27, 25, 6, -8)\n    unitFrame.JadeFireGlowEffect:Hide()\n    \nend\n\n\n",
            ["Icon"] = 132221,
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:Hide() \nend\n\n\n",
            ["Revision"] = 44,
            ["Options"] = {
            },
            ["Author"] = "Kastfall-Azralon",
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:Show() \nend\n\n\n",
            ["NpcNames"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:SetAlpha (.5)\nend\n\n\n",
            ["Name"] = "Jadefire [BOD] - Fire Shield",
            ["PlaterCore"] = 1,
            ["Desc"] = "Alert when the unit has the Fire Shield to be broken.",
            ["SpellIds"] = {
                286425,
            },
            ["Prio"] = 99,
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
            ["OptionsValues"] = {
                ["castColor"] = {
                    {
                        "200682",
                        "darkslateblue",
                    },
                    {
                        "192307",
                        "goldenrod",
                    },
                    {
                        "196838",
                        "maroon",
                    },
                    {
                        "193827",
                        "darkgreen",
                    },
                    {
                        "194043",
                        "darkgreen",
                    },
                    {
                        "156718",
                        "DRUID",
                    },
                    {
                        "395859",
                        "ROGUE",
                    },
                },
                ["useNameplateColor"] = false,
                ["castBarColor"] = {
                    1,
                    0.9058824181556702,
                    0.02745098248124123,
                    1,
                },
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198523,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
            ["Revision"] = 741,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option1",
                    ["Value"] = 0,
                    ["Name"] = "Option 1",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] = "Plays a special animation showing the explosion time.",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option3",
                    ["Value"] = 0,
                    ["Name"] = "Option 3",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 6,
                    ["Desc"] = "Increases the health bar height by this value",
                    ["Min"] = 0,
                    ["Key"] = "castBarHeight",
                    ["Value"] = 3,
                    ["Name"] = "Health Bar Height Mod",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useNameplateColor",
                    ["Value"] = true,
                    ["Name"] = "Change Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Change Nameplate Color",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "healthBarColor",
                    ["Value"] = {
                        1,
                        0.5843137254902,
                        0,
                        1,
                    },
                    ["Name"] = "Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Nameplate Color",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Option 7",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useCastbarColor",
                    ["Value"] = true,
                    ["Name"] = "Use Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Show an arrow above Use Cast Bar Color",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "castBarColor",
                    ["Value"] = {
                        1,
                        0.431372,
                        0,
                        1,
                    },
                    ["Name"] = "Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Cast Bar Color",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Option 7",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option6",
                    ["Value"] = "Arrow:",
                    ["Name"] = "Arrow:",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "showArrow",
                    ["Value"] = true,
                    ["Name"] = "Show Arrow",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Arrow alpha.",
                    ["Min"] = 0,
                    ["Key"] = "arrowAlpha",
                    ["Value"] = 0.5,
                    ["Name"] = "Arrow Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 12,
                    ["Desc"] = "Arrow Width.",
                    ["Min"] = 4,
                    ["Key"] = "arrowWidth",
                    ["Value"] = 8,
                    ["Name"] = "Arrow Width",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 12,
                    ["Desc"] = "Arrow Height.",
                    ["Min"] = 4,
                    ["Key"] = "arrowHeight",
                    ["Value"] = 8,
                    ["Name"] = "Arrow Height",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option13",
                    ["Value"] = 0,
                    ["Name"] = "Option 13",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option12",
                    ["Value"] = "Dot Animation:",
                    ["Name"] = "Dot Animation:",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "dotColor",
                    ["Value"] = {
                        1,
                        0.6156862745098,
                        0,
                        1,
                    },
                    ["Name"] = "Dot Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Adjust the color of the dot animation.",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Dot X Offset",
                    ["Min"] = -10,
                    ["Key"] = "xOffset",
                    ["Value"] = 4,
                    ["Name"] = "Dot X Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Dot Y Offset",
                    ["Min"] = -10,
                    ["Key"] = "yOffset",
                    ["Value"] = 3,
                    ["Name"] = "Dot Y Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 7,
                    ["Key"] = "castColor",
                    ["Value"] = {
                        {
                            "200682",
                            "darkslateblue",
                        },
                        {
                            "192307",
                            "goldenrod",
                        },
                        {
                            "196838",
                            "maroon",
                        },
                        {
                            "193827",
                            "darkgreen",
                        },
                        {
                            "194043",
                            "darkgreen",
                        },
                        {
                            "156718",
                            "DRUID",
                        },
                        {
                            "395859",
                            "ROGUE",
                        },
                    },
                    ["Name"] = "Color List by SpellId",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
                    ["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
                },
            },
            ["Author"] = "Bombad o-Azralon",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
            ["Name"] = "Cast - Ultra Important [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["ScriptType"] = 3,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1711123193,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
            ["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Revision"] = 74,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 5,
                    ["Key"] = "option1",
                    ["Value"] = "Auto set a raid target Skull on the unit.",
                    ["Name"] = "Option 1",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option2",
                    ["Value"] = 0,
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "onlyInCombat",
                    ["Value"] = false,
                    ["Name"] = "Only in Combat",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Set the mark only if the unit is in combat.",
                },
            },
            ["Author"] = "Aelerolor-Torghast",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "Auto set skull marker",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
            ["Name"] = "Auto Set Skull",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end --compatibility\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        --[225976] = {secondCastBar = true, altCastId = \"Uber Strike\",  debuffTimer = 167385, name = GetSpellInfo(167385), spellIcon = 167385}, --tank dummy        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        config.text = npcInfo.name\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend",
            ["ScriptType"] = 3,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198438,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end --compatibility\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        --[225976] = {secondCastBar = true, altCastId = \"Uber Strike\",  debuffTimer = 167385, name = GetSpellInfo(167385), spellIcon = 167385}, --tank dummy        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        config.text = npcInfo.name\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
            ["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
            ["NpcNames"] = {
                "164427",
                "164414",
                "164185",
                "164567",
                "165408",
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
            ["Revision"] = 236,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
            },
            ["Author"] = "Aelerolor-Torghast",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] =
            "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend",
            ["Name"] = "Countdown",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend",
            ["Enabled"] = true,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
            ["ScriptType"] = 3,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198446,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
            ["Icon"] = 136048,
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
            ["Revision"] = 242,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option1",
                    ["Value"] = 0,
                    ["Name"] = "Option 1",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option3",
                    ["Value"] = "Show the power of the unit above the nameplate.",
                    ["Name"] = "script desc",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option3",
                    ["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
                    ["Name"] = "add trigger",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option2",
                    ["Value"] = 0,
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "showLater",
                    ["Value"] = true,
                    ["Name"] = "Show at 80% of Energy",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option2",
                    ["Value"] = 0,
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 32,
                    ["Desc"] = "Text size.",
                    ["Min"] = 8,
                    ["Key"] = "fontSize",
                    ["Value"] = 16,
                    ["Name"] = "Text Size",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "fontColor",
                    ["Value"] = {
                        0.80392156862745,
                        0.80392156862745,
                        0.80392156862745,
                        1,
                    },
                    ["Name"] = "Font Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Color of the text.",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "outline",
                    ["Value"] = true,
                    ["Name"] = "Enable Text Outline",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "If enabled, the text uses outline.",
                },
            },
            ["Author"] = "Celian-Sylvanas",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "Show the energy amount above the nameplate.",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
            ["Name"] = "Unit - Show Energy [Plater]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
            ["Enabled"] = true,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 38, 0)\n        unitFrame.spitefulTexture:SetSize(25, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
            ["OptionsValues"] = {
                ["bgColor"] = {
                    0.3960784673690796,
                    0.02745098248124123,
                    1,
                    0.8100000023841858,
                },
                ["textColor"] = {
                    0.9294118285179138,
                    1,
                    0.9764706492424011,
                    1,
                },
                ["targetingColor"] = {
                    0.3960784673690796,
                    1,
                    0.8000000715255737,
                    1,
                },
                ["bgWidth"] = 25,
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
            ["ScriptType"] = 3,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740507346,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 38, 0)\n        unitFrame.spitefulTexture:SetSize(25, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
            ["Icon"] = 135945,
            ["NpcNames"] = {
                "174773",
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
            ["Revision"] = 250,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 5,
                    ["Key"] = "option12",
                    ["Value"] = "Time to Die",
                    ["Name"] = "Time to Die",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 50,
                    ["Desc"] = "",
                    ["Min"] = 10,
                    ["Key"] = "bgWidth",
                    ["Value"] = 27,
                    ["Name"] = "Width",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "bgColor",
                    ["Value"] = {
                        0.50588235294118,
                        0.070588235294118,
                        1,
                        1,
                    },
                    ["Name"] = "Background Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 24,
                    ["Desc"] = "",
                    ["Min"] = 7,
                    ["Key"] = "textSize",
                    ["Value"] = 8,
                    ["Name"] = "Text Size",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "textColor",
                    ["Value"] = {
                        1,
                        0.5843137254902,
                        0,
                        1,
                    },
                    ["Name"] = "Text Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Option 7",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option11",
                    ["Value"] = "Targeting",
                    ["Name"] = "Targeting",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "switchTargetName",
                    ["Value"] = true,
                    ["Name"] = "Show Target instead of Name",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useTargetingColor",
                    ["Value"] = true,
                    ["Name"] = "Change Color if targeting You",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "targetingColor",
                    ["Value"] = {
                        0.070588235294118,
                        0.61960784313725,
                        0,
                        1,
                    },
                    ["Name"] = "Color if targeting You",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option11",
                    ["Value"] = 0,
                    ["Name"] = "Option 11",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
            },
            ["Author"] = "Symantec-Azralon",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "Time to die Spiteful affix",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
            ["Name"] = "M+ Spiteful",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
            ["OptionsValues"] = {
                ["timerList"] = {
                },
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
            ["Time"] = 1711197638,
            ["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
            ["Revision"] = 1222,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option1",
                    ["Value"] = 0,
                    ["Name"] = "Blank Line",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] = "Cast start animation settings",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useCastbarColor",
                    ["Value"] = true,
                    ["Name"] = "Cast Bar Color Enabled",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "When enabled, changes the cast bar color,",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "castbarColor",
                    ["Value"] = {
                        1,
                        0.43137254901961,
                        0,
                        1,
                    },
                    ["Name"] = "Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Color of the cast bar.",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Blank Line",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] =
                    "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
                    ["Min"] = 0.05,
                    ["Key"] = "flashDuration",
                    ["Value"] = 0.4,
                    ["Name"] = "Flash Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Increases the cast bar height by this value",
                    ["Min"] = 0,
                    ["Key"] = "castBarHeight",
                    ["Value"] = 5,
                    ["Name"] = "Cast Bar Height Mod",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] =
                    "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
                    ["Min"] = 0.1,
                    ["Key"] = "shakeDuration",
                    ["Value"] = 0.2,
                    ["Name"] = "Shake Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 100,
                    ["Desc"] = "How strong is the shake.",
                    ["Min"] = 2,
                    ["Key"] = "shakeAmplitude",
                    ["Value"] = 8,
                    ["Name"] = "Shake Amplitude",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 80,
                    ["Desc"] = "How fast the shake moves.",
                    ["Min"] = 1,
                    ["Key"] = "shakeFrequency",
                    ["Value"] = 40,
                    ["Name"] = "Shake Frequency",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 7,
                    ["Key"] = "timerList",
                    ["Value"] = {
                    },
                    ["Name"] = "Timer (Key is SpellId and Value is Time)",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
                    ["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
                },
            },
            ["Author"] = "Tercioo-Sylvanas",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
            ["Desc"] =
            "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Name"] = "Cast - Alert + Timer [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198538,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
            ["Revision"] = 889,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option1",
                    ["Value"] = 0,
                    ["Name"] = "Option 1",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] = "Shows the target name in a separate box",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] =
                    "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Option 4",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] = "Flash:",
                    ["Name"] = "Flash",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1.2,
                    ["Desc"] = "How long is the flash played when the cast starts.",
                    ["Min"] = 0.1,
                    ["Key"] = "flashDuration",
                    ["Value"] = 0.8,
                    ["Name"] = "Flash Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "flashColor",
                    ["Value"] = {
                        1,
                        1,
                        1,
                        1,
                    },
                    ["Name"] = "Flash Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Color of the Flash",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Option 7",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] = "Shake:",
                    ["Name"] = "Shake",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 0.5,
                    ["Desc"] =
                    "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
                    ["Min"] = 0.1,
                    ["Key"] = "shakeDuration",
                    ["Value"] = 0.2,
                    ["Name"] = "Shake Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "How strong is the shake.",
                    ["Min"] = 1,
                    ["Key"] = "shakeAmplitude",
                    ["Value"] = 5,
                    ["Name"] = "Shake Amplitude",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 80,
                    ["Desc"] = "How fast the shake moves.",
                    ["Min"] = 1,
                    ["Key"] = "shakeFrequency",
                    ["Value"] = 40,
                    ["Name"] = "Shake Frequency",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option13",
                    ["Value"] = 0,
                    ["Name"] = "Option 13",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option14",
                    ["Value"] = "Dot Animation:",
                    ["Name"] = "Dot Animation",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "dotColor",
                    ["Value"] = {
                        0.56470588235294,
                        0.56470588235294,
                        0.56470588235294,
                        1,
                    },
                    ["Name"] = "Dot Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Adjust the color of the dots around the nameplate",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 20,
                    ["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
                    ["Min"] = -10,
                    ["Key"] = "xOffset",
                    ["Value"] = 8,
                    ["Name"] = "Dot X Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
                    ["Min"] = -10,
                    ["Key"] = "yOffset",
                    ["Value"] = 3,
                    ["Name"] = "Dot Y Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option19",
                    ["Value"] = "Cast Bar",
                    ["Name"] = "Option 19",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useCastbarColor",
                    ["Value"] = true,
                    ["Name"] = "Use Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Use cast bar color.",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "castBarColor",
                    ["Value"] = {
                        0.41176470588235,
                        1,
                        0,
                        1,
                    },
                    ["Name"] = "Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Cast bar color.",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option27",
                    ["Value"] = 0,
                    ["Name"] = "Option 27",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option28",
                    ["Value"] = "Target Options",
                    ["Name"] = "Option 28",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 32,
                    ["Desc"] = "",
                    ["Min"] = 8,
                    ["Key"] = "targetNameSize",
                    ["Value"] = 14,
                    ["Name"] = "Text Size",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "colorByClass",
                    ["Value"] = true,
                    ["Name"] = "Use Class Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "textColor",
                    ["Value"] = {
                        1,
                        1,
                        1,
                        1,
                    },
                    ["Name"] = "Text Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "targetBgColor",
                    ["Value"] = {
                        0,
                        0,
                        0,
                        0.98467203229666,
                    },
                    ["Name"] = "Background Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "targetBgBorderColor",
                    ["Value"] = {
                        0,
                        0,
                        0,
                        1,
                    },
                    ["Name"] = "Border Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 160,
                    ["Desc"] = "",
                    ["Min"] = 30,
                    ["Key"] = "targetFrameWidth",
                    ["Value"] = 90,
                    ["Name"] = "Frame Width",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 32,
                    ["Desc"] = "",
                    ["Min"] = 8,
                    ["Key"] = "targetFrameHeight",
                    ["Value"] = 20,
                    ["Name"] = "Frame Height",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
            },
            ["Author"] = "Bombad o-Azralon",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "Highlight the target name",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
            ["Name"] = "Cast - Important Target [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["ScriptType"] = 1,
            ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Time"] = 1740197175,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Icon"] = 610472,
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
            ["Revision"] = 87,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
            },
            ["Author"] = "Keyspell-Azralon",
            ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
            ["SpellIds"] = {
                343470,
                423228,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
            ["Name"] = "Aura is Shield [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Enabled"] = true,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["OnHideCode"] =
            "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["ScriptType"] = 1,
            ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Time"] = 1740507341,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Revision"] = 43,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 1,
                    ["Key"] = "nameplateColor",
                    ["Value"] = {
                        0,
                        0.55686274509804,
                        0.035294117647059,
                        1,
                    },
                    ["Name"] = "Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
                },
            },
            ["Author"] = "Ditador-Azralon",
            ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Name"] = "Fixate by Unit Buff [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["OptionsValues"] = {
                ["castColor"] = {
                    {
                        "385536",
                        "maroon",
                    },
                    {
                        "198750",
                        "midnightblue",
                    },
                    {
                        "360850",
                        "lime",
                    },
                    {
                        "212784",
                        "deepskyblue",
                    },
                    {
                        "207980",
                        "midnightblue",
                    },
                    {
                        "199033",
                        "gold",
                    },
                    {
                        "199034",
                        "gold",
                    },
                    {
                        "200969",
                        "orange",
                    },
                    {
                        "394512",
                        "indigo",
                    },
                    {
                        "397881",
                        "deepskyblue",
                    },
                    {
                        "396020",
                        "khaki",
                    },
                },
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198542,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Revision"] = 551,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 2,
                    ["Max"] = 20,
                    ["Desc"] = "Need a /reload",
                    ["Min"] = 5,
                    ["Key"] = "segmentsAmount",
                    ["Value"] = 7,
                    ["Name"] = "Amount of Segments",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "sparkColor",
                    ["Value"] = {
                        0.95686274509804,
                        1,
                        0.98823529411765,
                        1,
                    },
                    ["Name"] = "Spark Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "glowColor",
                    ["Value"] = {
                        0.85882352941176,
                        0.43137254901961,
                        1,
                        1,
                    },
                    ["Name"] = "Glow Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 7,
                    ["Key"] = "castColor",
                    ["Value"] = {
                        {
                            "385536",
                            "maroon",
                        },
                        {
                            "198750",
                            "midnightblue",
                        },
                        {
                            "360850",
                            "lime",
                        },
                        {
                            "212784",
                            "deepskyblue",
                        },
                        {
                            "207980",
                            "midnightblue",
                        },
                        {
                            "199033",
                            "gold",
                        },
                        {
                            "199034",
                            "gold",
                        },
                        {
                            "200969",
                            "orange",
                        },
                        {
                            "394512",
                            "indigo",
                        },
                        {
                            "397881",
                            "deepskyblue",
                        },
                        {
                            "396020",
                            "khaki",
                        },
                    },
                    ["Name"] = "Cast Color by SpellID",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
                    ["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
                },
            },
            ["Author"] = "Terciob",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "Show a different animation for the cast bar.",
            ["SpellIds"] = {
                373201,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
            ["Name"] = "Cast - Glowing [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Time"] = 1740198544,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
            ["Icon"] = 134229,
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
            ["Revision"] = 43,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
            },
            ["Author"] = "Huugg-Valdrakken",
            ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Desc"] =
            "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
            ["SpellIds"] = {
                191284,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Name"] = "Cast - Effect After Cast [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Time"] = 1740198545,
            ["UpdateCode"] =
            "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
            ["Revision"] = 168,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 2,
                    ["Max"] = 0.3,
                    ["Desc"] = "Rotation Duration",
                    ["Min"] = 0.1,
                    ["Key"] = "rotationDuration",
                    ["Value"] = 0.15,
                    ["Name"] = "Rotation Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option5",
                    ["Value"] = 0,
                    ["Name"] = "Option 5",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1.5,
                    ["Desc"] = "Animation Start Duration",
                    ["Min"] = 0,
                    ["Key"] = "animStartDuration",
                    ["Value"] = 0.3,
                    ["Name"] = "Animation Start Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] =
                    "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
                    ["Min"] = 0,
                    ["Key"] = "textureStartAlpha",
                    ["Value"] = 1,
                    ["Name"] = "Texture Start Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option5",
                    ["Value"] = 0,
                    ["Name"] = "Option 5",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1.2,
                    ["Desc"] = "Texture Scale",
                    ["Min"] = 0.6,
                    ["Key"] = "textureScale",
                    ["Value"] = 0.8,
                    ["Name"] = "Texture Scale",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Texture Alpha",
                    ["Min"] = 0,
                    ["Key"] = "textureAlpha",
                    ["Value"] = 1,
                    ["Name"] = "Texture Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "textureColor",
                    ["Value"] = {
                        1,
                        1,
                        1,
                        1,
                    },
                    ["Name"] = "Texture Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Texture Color",
                },
            },
            ["Author"] = "Butazzul-Valdrakken",
            ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Name"] = "Cast - Circle AoE [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
            ["OptionsValues"] = {
                ["fillColor"] = {
                    1,
                    1,
                    1,
                    1,
                },
                ["indicatorAlpha"] = 0.798833966255188,
                ["indicatorColor"] = {
                    1,
                    1,
                    1,
                    1,
                },
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
            ["ScriptType"] = 3,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198468,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
            ["NpcNames"] = {
                "214840",
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
            ["Revision"] = 158,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 5,
                    ["Key"] = "option1",
                    ["Value"] =
                    "Add markers into the health bar to remind you about boss abilities at life percent.",
                    ["Name"] = "Option 1",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "",
                    ["Value"] = 0,
                    ["Name"] = "blank line",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "indicatorColor",
                    ["Value"] = {
                        1,
                        1,
                        1,
                        1,
                    },
                    ["Name"] = "Vertical Line Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Indicator color.",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Indicator alpha.",
                    ["Min"] = 0.1,
                    ["Key"] = "indicatorAlpha",
                    ["Value"] = 0.79,
                    ["Name"] = "Vertical Line Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "",
                    ["Value"] = 0,
                    ["Name"] = "blank line",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "fillColor",
                    ["Value"] = {
                        1,
                        1,
                        1,
                        1,
                    },
                    ["Name"] = "Fill Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Fill color.",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Fill alpha.",
                    ["Min"] = 0,
                    ["Key"] = "fillAlpha",
                    ["Value"] = 0.2,
                    ["Name"] = "Fill Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
            },
            ["Author"] = "Aelerolor-Torghast",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] =
            "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
            ["Name"] = "Add - Health Markers [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
            ["Enabled"] = true,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
            ["OptionsValues"] = {
                ["npcColor"] = {
                    {
                        "196548",
                        "forestgreen",
                    },
                    {
                        "195580",
                        "forestgreen",
                    },
                    {
                        "195820",
                        "forestgreen",
                    },
                    {
                        "195821",
                        "forestgreen",
                    },
                    {
                        "189886",
                        "forestgreen",
                    },
                    {
                        "75966",
                        "forestgreen",
                    },
                    {
                        "102019 ",
                        "forestgreen",
                    },
                    {
                        "187159",
                        "forestgreen",
                    },
                    {
                        "194897",
                        "forestgreen",
                    },
                    {
                        "104251",
                        "forestgreen",
                    },
                },
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
            ["ScriptType"] = 3,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198578,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
            ["Revision"] = 580,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option6",
                    ["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
                    ["Name"] = "Option 6",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "changeNameplateColor",
                    ["Value"] = true,
                    ["Name"] = "Change Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "change to true to change the color",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "nameplateColor",
                    ["Value"] = {
                        1,
                        0,
                        0.52549019607843,
                        1,
                    },
                    ["Name"] = "Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Nameplate Color",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 6,
                    ["Desc"] = "increase the nameplate height by this value",
                    ["Min"] = 0,
                    ["Key"] = "nameplateSizeOffset",
                    ["Value"] = 3,
                    ["Name"] = "Nameplate Size Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "dotsColor",
                    ["Value"] = {
                        1,
                        0.71372550725937,
                        0,
                        0.56313106417656,
                    },
                    ["Name"] = "Dot Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Dot Color",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option10",
                    ["Value"] = "Extra Texture",
                    ["Name"] = "Extra Texture",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "Extra Texture",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "showExtraTexture",
                    ["Value"] = false,
                    ["Name"] = "Show Extra Texture",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Show Extra Texture",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "skullColor",
                    ["Value"] = {
                        1,
                        0.46274509803922,
                        0,
                        1,
                    },
                    ["Name"] = "Texture Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Texture Color",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Alpha",
                    ["Min"] = 0,
                    ["Key"] = "skullAlpha",
                    ["Value"] = 0.2,
                    ["Name"] = "Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 2,
                    ["Desc"] = "Scale",
                    ["Min"] = 0.4,
                    ["Key"] = "skullScale",
                    ["Value"] = 0.6,
                    ["Name"] = "Scale",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 7,
                    ["Key"] = "npcColor",
                    ["Value"] = {
                        {
                            "196548",
                            "forestgreen",
                        },
                        {
                            "195580",
                            "forestgreen",
                        },
                        {
                            "195820",
                            "forestgreen",
                        },
                        {
                            "195821",
                            "forestgreen",
                        },
                        {
                            "189886",
                            "forestgreen",
                        },
                        {
                            "75966",
                            "forestgreen",
                        },
                        {
                            "102019 ",
                            "forestgreen",
                        },
                        {
                            "187159",
                            "forestgreen",
                        },
                        {
                            "194897",
                            "forestgreen",
                        },
                        {
                            "104251",
                            "forestgreen",
                        },
                    },
                    ["Name"] = "Npc Color By NpcID",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
                    ["Desc"] = "Key is the npcID, value is the color name",
                },
            },
            ["Author"] = "Izimode-Azralon",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] =
            "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
            ["Name"] = "Add - Important [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
            ["ScriptType"] = 3,
            ["Temp_Initialization"] =
            "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
            ["Time"] = 1740509500,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Icon"] = "interface/addons/plater/images/add_id_icon",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
            ["Revision"] = 164,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
            },
            ["Author"] = "Huugg-Valdrakken",
            ["Initialization"] =
            "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
            ["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Name"] = "Add - Tag Number [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
            ["Time"] = 1740198531,
            ["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
            ["Revision"] = 904,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option1",
                    ["Value"] = 0,
                    ["Name"] = "Blank Line",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] =
                    "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option3",
                    ["Value"] =
                    "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                    ["Name"] = "Option 3",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useCastbarColor",
                    ["Value"] = true,
                    ["Name"] = "Cast Bar Color Enabled",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "When enabled, changes the cast bar color,",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "castBarColor",
                    ["Value"] = {
                        1,
                        0.43137254901961,
                        0,
                        1,
                    },
                    ["Name"] = "Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Color of the cast bar.",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Blank Line",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] =
                    "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
                    ["Min"] = 0.05,
                    ["Key"] = "flashDuration",
                    ["Value"] = 0.2,
                    ["Name"] = "Flash Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Increases the cast bar height by this value",
                    ["Min"] = 0,
                    ["Key"] = "castBarHeight",
                    ["Value"] = 0,
                    ["Name"] = "Cast Bar Height Mod",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] =
                    "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
                    ["Min"] = 0.1,
                    ["Key"] = "shakeDuration",
                    ["Value"] = 0.1,
                    ["Name"] = "Shake Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 200,
                    ["Desc"] = "How strong is the shake.",
                    ["Min"] = 10,
                    ["Key"] = "shakeAmplitude",
                    ["Value"] = 25,
                    ["Name"] = "Shake Amplitude",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 80,
                    ["Desc"] = "How fast the shake moves.",
                    ["Min"] = 1,
                    ["Key"] = "shakeFrequency",
                    ["Value"] = 30,
                    ["Name"] = "Shake Frequency",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
            },
            ["Author"] = "Tercioo-Sylvanas",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
            ["Desc"] = "Play a very fast flash when the cast start",
            ["SpellIds"] = {
                385568,
            },
            ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Name"] = "Cast - Quick Flash [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
            ["OptionsValues"] = {
                ["npcColor"] = {
                    {
                        "189893",
                        "olivedrab",
                    },
                    {
                        "190187",
                        "olivedrab",
                    },
                    {
                        "99922",
                        "olivedrab",
                    },
                    {
                        "153285",
                        "olivedrab",
                    },
                    {
                        "104822",
                        "olivedrab",
                    },
                },
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
            ["ScriptType"] = 3,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198563,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
            ["Icon"] = "interface/addons/plater/media/exclamation_64",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
            ["Revision"] = 171,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 4,
                    ["Key"] = "useNameplateColor",
                    ["Value"] = true,
                    ["Name"] = "Change Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Change Nameplate Color",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "healthBarColor",
                    ["Value"] = {
                        1,
                        0.43921571969986,
                        0.4588235616684,
                        1,
                    },
                    ["Name"] = "Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Nameplate Color",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option5",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useFlash",
                    ["Value"] = true,
                    ["Name"] = "Flash Nameplate",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Flash Nameplate",
                },
                {
                    ["Type"] = 7,
                    ["Key"] = "npcColor",
                    ["Value"] = {
                        {
                            "189893",
                            "olivedrab",
                        },
                        {
                            "190187",
                            "olivedrab",
                        },
                        {
                            "99922",
                            "olivedrab",
                        },
                        {
                            "153285",
                            "olivedrab",
                        },
                        {
                            "104822",
                            "olivedrab",
                        },
                    },
                    ["Name"] = "NpcID to Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
                    ["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
                },
            },
            ["Author"] = "Huugg-Valdrakken",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "Change the color of  add",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
            ["Name"] = "Add - Warning [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
            ["OptionsValues"] = {
                ["nameplateColor"] = {
                    1,
                    0,
                    0.2666666805744171,
                    1,
                },
                ["useNameplateScale"] = true,
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
            ["ScriptType"] = 3,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198573,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
            ["Icon"] = "interface/addons/plater/media/duck_64",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
            ["Revision"] = 117,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 4,
                    ["Key"] = "useNameplateColor",
                    ["Value"] = false,
                    ["Name"] = "Change Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Change Nameplate Color",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "nameplateColor",
                    ["Value"] = {
                        0.062745101749897,
                        0.062745101749897,
                        0.094117656350136,
                        1,
                    },
                    ["Name"] = "Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Nameplate Color",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Option 4",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useNameplateScale",
                    ["Value"] = true,
                    ["Name"] = "Change Nameplate Scale",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Change Nameplate Scale",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Nameplate Scale",
                    ["Min"] = 0,
                    ["Key"] = "scale",
                    ["Value"] = 0.8,
                    ["Name"] = "Nameplate Scale",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
            },
            ["Author"] = "Huugg-Valdrakken",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
            ["Name"] = "Add - Non Elite Trash [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198530,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
            ["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
            ["Revision"] = 124,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
            },
            ["Author"] = "Huugg-Valdrakken",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] =
            "When the caster has a shield and only when the shield is removed the cast can be interrupted",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
            ["Name"] = "Cast - Shield Interrupt [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198525,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
            ["Revision"] = 517,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 2,
                    ["Max"] = 20,
                    ["Desc"] = "Need a /reload",
                    ["Min"] = 5,
                    ["Key"] = "segmentsAmount",
                    ["Value"] = 20,
                    ["Name"] = "Amount of Segments",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "sparkColor",
                    ["Value"] = {
                        0.95686274509804,
                        1,
                        0.98823529411765,
                        1,
                    },
                    ["Name"] = "Spark Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "glowColor",
                    ["Value"] = {
                        0.85882352941176,
                        0.43137254901961,
                        1,
                        1,
                    },
                    ["Name"] = "Glow Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
            },
            ["Author"] = "Terciob",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "Just stop casting",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
            ["Name"] = "Cast - Stop Casting [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
            ["OptionsValues"] = {
                ["useBackground"] = false,
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
            ["ScriptType"] = 3,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198582,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Icon"] = "interface/addons/plater/media/radio_64",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
            ["Revision"] = 114,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 4,
                    ["Key"] = "useReverse",
                    ["Value"] = false,
                    ["Name"] = "Reverse Health Bar",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option6",
                    ["Value"] = 0,
                    ["Name"] = "Option 6",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useShake",
                    ["Value"] = false,
                    ["Name"] = "Enable Shake",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "How strong is the shake.",
                    ["Min"] = 0.05,
                    ["Key"] = "shakeAmplitude",
                    ["Value"] = 0.2,
                    ["Name"] = "Shake Amplitude",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 80,
                    ["Desc"] = "How fast the shake moves.",
                    ["Min"] = 1,
                    ["Key"] = "shakeFrequency",
                    ["Value"] = 70,
                    ["Name"] = "Shake Frequency",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Option 7",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useBackground",
                    ["Value"] = true,
                    ["Name"] = "Show Red Background",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Show Red Background",
                },
            },
            ["Author"] = "Huugg-Valdrakken",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Name"] = "Add - Explode on Die [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable, modTable)\n    \n    --settings\n    envTable.TextAboveNameplate = modTable.config[\"textAboveNameplate\"]\n    envTable.NameplateColor = modTable.config[\"nameplateColor\"]\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    -- local spellList = {\n    --     [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n    --     [355389] = \"Relentless Haunt\",\n    --     [338610] = \"Morbid Fixation\",\n    --     [338606] = \"Morbid Fixation\",\n    --     [358711] = \"Rage\"\n    -- }\n    \n    local spellList = modTable.config[\"spellList\"];\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
            ["OptionsValues"] = {
                ["nameplateColor"] = {
                    0,
                    1,
                    0.63529413938522,
                    1,
                },
                ["spellList"] = {
                    {
                        "358711",
                        "Rage",
                    },
                    {
                        "338606",
                        "Morbid Fixation",
                    },
                    {
                        "338610",
                        "Morbid Fixation",
                    },
                    {
                        "355389",
                        "Relentless Haunt",
                    },
                    {
                        "321891",
                        "Freeze Tag Fixation",
                    },
                },
            },
            ["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \nend\n\n\n",
            ["ScriptType"] = 3,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740507333,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            \n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Temp_ConstructorCode"] =
            "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable, modTable)\n    \n    --settings\n    envTable.TextAboveNameplate = modTable.config[\"textAboveNameplate\"]\n    envTable.NameplateColor = modTable.config[\"nameplateColor\"]\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    -- local spellList = {\n    --     [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n    --     [355389] = \"Relentless Haunt\",\n    --     [338610] = \"Morbid Fixation\",\n    --     [338606] = \"Morbid Fixation\",\n    --     [358711] = \"Rage\"\n    -- }\n    \n    local spellList = modTable.config[\"spellList\"];\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
            ["Icon"] = 841383,
            ["NpcNames"] = {
                "Frostbound Devoted",
                "Illusionary Vulpin",
                "Separation Assistant",
                "Dark Sentinel",
                "187638",
                "Flamescale Tarasek",
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
            ["Revision"] = 403,
            ["semver"] = "1.0.0",
            ["url"] = "https://wago.io/6KIY-sN-q/1",
            ["Options"] = {
                {
                    ["Type"] = 1,
                    ["Key"] = "nameplateColor",
                    ["Value"] = {
                        1,
                        0,
                        1,
                        1,
                    },
                    ["Name"] = "Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "The color you want to turn the nameplate.",
                },
                {
                    ["Type"] = 3,
                    ["Key"] = "textAboveNameplate",
                    ["Value"] = "\"** On You **\"",
                    ["Name"] = "Text Above Nameplate",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
                    ["Desc"] = "The text to be displayed above the nameplate.",
                },
                {
                    ["Type"] = 7,
                    ["Key"] = "spellList",
                    ["Value"] = {
                        {
                            "358711",
                            "Rage",
                        },
                        {
                            "338606",
                            "Morbid Fixation",
                        },
                        {
                            "338610",
                            "Morbid Fixation",
                        },
                        {
                            "355389",
                            "Relentless Haunt",
                        },
                        {
                            "321891",
                            "Freeze Tag Fixation",
                        },
                        {
                            "370597",
                            "Kill Order",
                        },
                    },
                    ["Name"] = "Spell List",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
                    ["Desc"] =
                    "The list of spells that will trigger the script. The key is the spell id and the value is the en-US name of the spell.",
                },
            },
            ["Author"] = "Tecno-Azralon",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] =
            "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
            ["SpellIds"] = {
                "spawn of g'huun",
                "smuggled crawg",
                "sergeant bainbridge",
                "blacktooth scrapper",
                "irontide grenadier",
                "feral bloodswarmer",
                "earthrager",
                "crawler mine",
                "rezan",
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            \n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Name"] = "Fixate On You [Plater]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = 1,
            ["OnShowCode"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \nend\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["ScriptType"] = 1,
            ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Time"] = 1740197177,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
            ["Icon"] = 236209,
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
            ["Revision"] = 28,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
            },
            ["Author"] = "Tiranaa-Azralon",
            ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Desc"] =
            "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
            ["Name"] = "Aura While Casting [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Enabled"] = true,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Time"] = 1740198534,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
            ["Icon"] = 4038101,
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
            ["Revision"] = 81,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 1,
                    ["Key"] = "dotColor",
                    ["Value"] = {
                        1,
                        1,
                        1,
                        0.41662168502808,
                    },
                    ["Name"] = "Dots Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Dots Color",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Dots X Offset",
                    ["Min"] = -10,
                    ["Key"] = "xOffset",
                    ["Value"] = 0,
                    ["Name"] = "Dots X Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Dots Y Offset",
                    ["Min"] = -10,
                    ["Key"] = "yOffset",
                    ["Value"] = 0,
                    ["Name"] = "Dots Y Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Option 4",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Adjust how fast the blinking occurs",
                    ["Min"] = 0.2,
                    ["Key"] = "speed",
                    ["Value"] = 0.4,
                    ["Name"] = "Blink Speed",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Min amount of transparency the blink can have",
                    ["Min"] = 0,
                    ["Key"] = "minAlpha",
                    ["Value"] = 0,
                    ["Name"] = "Blink Min Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Max amount of transparency the blink can have",
                    ["Min"] = 0,
                    ["Key"] = "maxAlpha",
                    ["Value"] = 0.5,
                    ["Name"] = "Blink Max Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "blinkColor",
                    ["Value"] = {
                        1,
                        0.019607843831182,
                        0,
                        1,
                    },
                    ["Name"] = "Blink Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Color of the blinking texture",
                },
            },
            ["Author"] = "Ditador-Azralon",
            ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Desc"] =
            "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
            ["SpellIds"] = {
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Name"] = "Cast - On Going Cast [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
            ["OptionsValues"] = {
                ["castColor"] = {
                },
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198538,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_important_bycolor.png",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
            ["Revision"] = 833,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option1",
                    ["Value"] = 0,
                    ["Name"] = "Option 1",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] = "Plays a special animation changing the cast bar color.",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] = "To get a list of color names, use: /plater colors",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option3",
                    ["Value"] = 0,
                    ["Name"] = "Option 3",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 6,
                    ["Desc"] = "Increases the health bar height by this value",
                    ["Min"] = 0,
                    ["Key"] = "castBarHeight",
                    ["Value"] = 3,
                    ["Name"] = "Health Bar Height Mod",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useNameplateColor",
                    ["Value"] = false,
                    ["Name"] = "Change Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Change Nameplate Color",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "healthBarColor",
                    ["Value"] = {
                        1,
                        0.5843137254902,
                        0,
                        1,
                    },
                    ["Name"] = "Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Nameplate Color",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Option 7",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useCastbarColor",
                    ["Value"] = true,
                    ["Name"] = "Use Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Show an arrow above Use Cast Bar Color",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "castBarColor",
                    ["Value"] = {
                        1,
                        0.431372,
                        0,
                        1,
                    },
                    ["Name"] = "Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Cast Bar Color",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option13",
                    ["Value"] = 0,
                    ["Name"] = "Option 13",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option12",
                    ["Value"] = "Dot Animation:",
                    ["Name"] = "Dot Animation:",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "dotColor",
                    ["Value"] = {
                        1,
                        0.6156862745098,
                        0,
                        1,
                    },
                    ["Name"] = "Dot Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Adjust the color of the dot animation.",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Dot X Offset",
                    ["Min"] = -10,
                    ["Key"] = "xOffset",
                    ["Value"] = 4,
                    ["Name"] = "Dot X Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Dot Y Offset",
                    ["Min"] = -10,
                    ["Key"] = "yOffset",
                    ["Value"] = 6,
                    ["Name"] = "Dot Y Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 7,
                    ["Key"] = "castColor",
                    ["Value"] = {
                    },
                    ["Name"] = "Color List by SpellId",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
                    ["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
                },
            },
            ["Author"] = "Bombad�o-Azralon",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "Used on casts that make the mob explode, summon or transform if the cast passes.",
            ["SpellIds"] = {
                432967,
                446717,
                451379,
                451067,
                448013,
                448057,
                322486,
                341709,
                321226,
                429428,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
            ["Name"] = "Cast - Important by Color [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\n    \nend",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198530,
            ["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_shining_green.png",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
            ["Revision"] = 890,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option1",
                    ["Value"] = 0,
                    ["Name"] = "Option 1",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] = "Plays a big animation when the cast start.",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] =
                    "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Option 4",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] = "Flash:",
                    ["Name"] = "Flash",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1.2,
                    ["Desc"] = "How long is the flash played when the cast starts.",
                    ["Min"] = 0.1,
                    ["Key"] = "flashDuration",
                    ["Value"] = 0.8,
                    ["Name"] = "Flash Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "flashColor",
                    ["Value"] = {
                        1,
                        1,
                        1,
                        1,
                    },
                    ["Name"] = "Flash Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Color of the Flash",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Option 7",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] = "Shake:",
                    ["Name"] = "Shake",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 0.5,
                    ["Desc"] =
                    "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
                    ["Min"] = 0.1,
                    ["Key"] = "shakeDuration",
                    ["Value"] = 0.2,
                    ["Name"] = "Shake Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "How strong is the shake.",
                    ["Min"] = 1,
                    ["Key"] = "shakeAmplitude",
                    ["Value"] = 5,
                    ["Name"] = "Shake Amplitude",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 80,
                    ["Desc"] = "How fast the shake moves.",
                    ["Min"] = 1,
                    ["Key"] = "shakeFrequency",
                    ["Value"] = 40,
                    ["Name"] = "Shake Frequency",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option13",
                    ["Value"] = 0,
                    ["Name"] = "Option 13",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option14",
                    ["Value"] = "Dot Animation:",
                    ["Name"] = "Dot Animation",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "dotColor",
                    ["Value"] = {
                        0.56470588235294,
                        0.56470588235294,
                        0.56470588235294,
                        1,
                    },
                    ["Name"] = "Dot Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Adjust the color of the dots around the nameplate",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 20,
                    ["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
                    ["Min"] = -10,
                    ["Key"] = "xOffset",
                    ["Value"] = 8,
                    ["Name"] = "Dot X Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
                    ["Min"] = -10,
                    ["Key"] = "yOffset",
                    ["Value"] = 3,
                    ["Name"] = "Dot Y Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option19",
                    ["Value"] = "Cast Bar",
                    ["Name"] = "Option 19",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useCastbarColor",
                    ["Value"] = true,
                    ["Name"] = "Use Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Use cast bar color.",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "castBarColor",
                    ["Value"] = {
                        0.41176470588235,
                        1,
                        0,
                        1,
                    },
                    ["Name"] = "Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Cast bar color.",
                },
            },
            ["Author"] = "Terciob",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] =
            "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
            ["SpellIds"] = {
                434802,
                448248,
                453840,
                337249,
                324293,
                49184,
                449455,
            },
            ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Name"] = "Cast - Shining Green [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\n    \nend",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198527,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    --envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_special_ability.png",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
            ["Revision"] = 615,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 2,
                    ["Max"] = 6,
                    ["Desc"] = "Increases the cast bar height by this value",
                    ["Min"] = 0,
                    ["Key"] = "castBarHeight",
                    ["Value"] = 3,
                    ["Name"] = "Cast Bar Height Mod",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "castBarColor",
                    ["Value"] = {
                        1,
                        0.5843137254902,
                        0,
                        1,
                    },
                    ["Name"] = "Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Changes the cast bar color to this one.",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Option 7",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option6",
                    ["Value"] = "Arrow:",
                    ["Name"] = "Arrow:",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "showArrow",
                    ["Value"] = true,
                    ["Name"] = "Show Arrow",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Arrow alpha.",
                    ["Min"] = 0,
                    ["Key"] = "arrowAlpha",
                    ["Value"] = 1,
                    ["Name"] = "Arrow Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 12,
                    ["Desc"] = "Arrow Width.",
                    ["Min"] = 4,
                    ["Key"] = "arrowWidth",
                    ["Value"] = 8,
                    ["Name"] = "Arrow Width",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 12,
                    ["Desc"] = "Arrow Height.",
                    ["Min"] = 4,
                    ["Key"] = "arrowHeight",
                    ["Value"] = 8,
                    ["Name"] = "Arrow Height",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option13",
                    ["Value"] = 0,
                    ["Name"] = "Option 13",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option12",
                    ["Value"] = "Dot Animation:",
                    ["Name"] = "Dot Animation:",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "dotColor",
                    ["Value"] = {
                        1,
                        0.6156862745098,
                        0,
                        1,
                    },
                    ["Name"] = "Dot Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Adjust the color of the dot animation.",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Dot X Offset",
                    ["Min"] = -10,
                    ["Key"] = "xOffset",
                    ["Value"] = 4,
                    ["Name"] = "Dot X Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Dot Y Offset",
                    ["Min"] = -10,
                    ["Key"] = "yOffset",
                    ["Value"] = 3,
                    ["Name"] = "Dot Y Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option18",
                    ["Value"] = 0,
                    ["Name"] = "Option 18",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option17",
                    ["Value"] = "Nameplate Color",
                    ["Name"] = "Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useNameplateColor",
                    ["Value"] = false,
                    ["Name"] = "Change Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Change Nameplate Color",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "healthBarColor",
                    ["Value"] = {
                        1,
                        0.1843137294054,
                        0,
                        1,
                    },
                    ["Name"] = "Nameplate Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Health Bar Color",
                },
            },
            ["Author"] = "Terciob",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] =
            "For unique abilities that are an important part of the fight against a bosses or mini bosse.",
            ["SpellIds"] = {
                451026,
                452127,
                446615,
                433766,
                432117,
                448560,
                440218,
                441289,
                447146,
                438860,
                448847,
                449687,
                456751,
                449939,
                336499,
                322550,
                320208,
                321894,
                276068,
                423200,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    --envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
            ["Name"] = "Cast - Special Ability [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            --self.FrameOverlay.LeapArrow1:Show()\n            --self.FrameOverlay.LeapArrow2:Show()\n            --self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Hide()\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/6\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                --texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(8, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = castTime/2\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Show()\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
            ["Time"] = 1740198539,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            --self.FrameOverlay.LeapArrow1:Show()\n            --self.FrameOverlay.LeapArrow2:Show()\n            --self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
            ["Icon"] = 236171,
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Hide()\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
            ["Revision"] = 141,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 5,
                    ["Key"] = "option1",
                    ["Value"] = "Play an animation when the cast is a Heroic Leap",
                    ["Name"] = "Option 1",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option2",
                    ["Value"] = 0,
                    ["Name"] = "blank line",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "bRenameSpell",
                    ["Value"] = true,
                    ["Name"] = "Rename Spell",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Rename the name of the spell.",
                },
                {
                    ["Type"] = 3,
                    ["Key"] = "spellName",
                    ["Value"] = "Heroic Leap",
                    ["Name"] = "Spell Name",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
                    ["Desc"] = "Name to show in the spell cast bar.",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option5",
                    ["Value"] = 0,
                    ["Name"] = "blank line",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "bUseCastbarColor",
                    ["Value"] = false,
                    ["Name"] = "Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Change the cast bar color to the color selected below.",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "castbarColor",
                    ["Value"] = {
                        0.3647058904171,
                        0.10588236153126,
                        0,
                        1,
                    },
                    ["Name"] = "Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Cast Bar Color",
                },
            },
            ["Author"] = "Terciob",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
            ["Desc"] =
            "Modify a cast bar when the unit casts a spell with the same effect of the Warrior's Heroic Leap spell.",
            ["SpellIds"] = {
                447141,
                432967,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Name"] = "Cast - Heroic Leap [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/6\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                --texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(8, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = castTime/2\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Show()\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.Spark:SetVertexColor( unpack(Plater.db.profile.cast_statusbar_spark_color) )\n    PixelUtil.SetSize( self.Spark, Plater.db.profile.cast_statusbar_spark_width, self:GetHeight() )\n    \nend\n\n\n",
            ["OptionsValues"] = {
                ["sparkColor"] = {
                },
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the spark color\n    local sparkColor = scriptTable.config.sparkColor[tostring(envTable._SpellID)]\n    \n    self.Spark:SetVertexColor(DetailsFramework:ParseColors(sparkColor))\n    \n    self.Spark:SetWidth( self.Spark:GetWidth() * scriptTable.config.sparkWithScale )\n    self.Spark:SetHeight( self.Spark:GetHeight() * scriptTable.config.sparkHeightScale )\n    \nend\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Time"] = 1740198528,
            ["UpdateCode"] =
            "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Temp_ConstructorCode"] =
            "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_spark.png",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.Spark:SetVertexColor( unpack(Plater.db.profile.cast_statusbar_spark_color) )\n    PixelUtil.SetSize( self.Spark, Plater.db.profile.cast_statusbar_spark_width, self:GetHeight() )\n    \nend\n\n\n",
            ["Revision"] = 77,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 5,
                    ["Key"] = "option1",
                    ["Value"] = "In the box at right, add the spell id and the color.",
                    ["Name"] = "Option 1",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] = "To get a list of colors, use: /plater colors",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option5",
                    ["Value"] = 0,
                    ["Name"] = "Option 5",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 3,
                    ["Desc"] = "Spark Scale",
                    ["Min"] = 1,
                    ["Key"] = "sparkWithScale",
                    ["Value"] = 1,
                    ["Name"] = "Spark Width Scale",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 3,
                    ["Desc"] = "Spark Scale",
                    ["Min"] = 1,
                    ["Key"] = "sparkHeightScale",
                    ["Value"] = 1,
                    ["Name"] = "Spark Height Scale",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 7,
                    ["Key"] = "sparkColor",
                    ["Value"] = {
                    },
                    ["Name"] = "Spark Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
                    ["Desc"] = "",
                },
            },
            ["Author"] = "Tennah-These Go To Eleven",
            ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Desc"] = "Change the spark color to differentiate a cast from another.",
            ["SpellIds"] = {
                453140,
                456713,
                450088,
                322614,
                323730,
                257348,
                272422,
                429427,
            },
            ["Temp_UpdateCode"] =
            "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Name"] = "Cast - Spark Color [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the spark color\n    local sparkColor = scriptTable.config.sparkColor[tostring(envTable._SpellID)]\n    \n    self.Spark:SetVertexColor(DetailsFramework:ParseColors(sparkColor))\n    \n    self.Spark:SetWidth( self.Spark:GetWidth() * scriptTable.config.sparkWithScale )\n    self.Spark:SetHeight( self.Spark:GetHeight() * scriptTable.config.sparkHeightScale )\n    \nend\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion + 5, castBar:GetHeight() + math.random(1, 5))\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        \n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2 + math.random(-2, 2))\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(1)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration + 0.5) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(1)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198539,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
            ["Revision"] = 553,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 2,
                    ["Max"] = 20,
                    ["Desc"] = "Need a /reload",
                    ["Min"] = 5,
                    ["Key"] = "segmentsAmount",
                    ["Value"] = 20,
                    ["Name"] = "Amount of Segments",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "sparkColor",
                    ["Value"] = {
                        0.95686274509804,
                        1,
                        0.98823529411765,
                        1,
                    },
                    ["Name"] = "Spark Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "glowColor",
                    ["Value"] = {
                        0.85882352941176,
                        0.43137254901961,
                        1,
                        1,
                    },
                    ["Name"] = "Glow Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
            },
            ["Author"] = "Terciob",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "Healing effect that cannot be interrupted.",
            ["SpellIds"] = {
                432520,
                320822,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
            ["Name"] = "Cast - Heal Stun [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion + 5, castBar:GetHeight() + math.random(1, 5))\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        \n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2 + math.random(-2, 2))\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(1)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration + 0.5) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(1)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local DF = DetailsFramework\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture2:Show()\n        unitFrame.CastSwipeAnimation2:Play()\n        unitFrame.StartSwipeAnimation2:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation2:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation2:Stop()\n                unitFrame.CastSwipeTexture2:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture2) then\n            return\n        end\n        \n        local circularTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n        circularTexture:SetPoint(\"center\", 0, 0)\n        circularTexture:SetSize(64, 64)\n        circularTexture:Hide()\n        \n        unitFrame.CastSwipeTexture2 = circularTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation2 = DF:CreateAnimationHub(circularTexture)\n        unitFrame.CastSwipeAnimation2:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation2.Rotation = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"rotation\", 1, 1, 360)\n        unitFrame.CastSwipeAnimation2.Trans = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"TRANSLATION\", 1, 1, 2, 2)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, function()circularTexture:Show() end)\n        \n        unitFrame.StartSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, nil, function()circularTexture:Hide() end)\n        \n        unitFrame.EndSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"alpha\", 1, 0.2, 1, 0)\n        \n        unitFrame.EndSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = options.textureScale\n    \n    local circularTexture = unitFrame.CastSwipeTexture2\n    \n    --texture settings\n    circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n    circularTexture:SetPoint(\"center\", 0, 0)\n    circularTexture:SetSize(64, 64)    \n    circularTexture:SetBlendMode(\"ADD\")\n    circularTexture:SetVertexColor(DetailsFramework:ParseColors(options.textureColor))\n    circularTexture:SetScale(targetScale)\n    circularTexture:SetAlpha(options.textureAlpha)\n    \n    --animations    \n    unitFrame.CastSwipeAnimation2.Rotation:SetDuration(options.rotationDuration)\n    unitFrame.CastSwipeAnimation2.Trans:SetDuration(options.rotationDuration)\n    \n    local randomOffset = 5\n    unitFrame.CastSwipeAnimation2.Trans:SetOffset(math.random(-randomOffset, randomOffset), math.random(-randomOffset, randomOffset))\n    \n    \n    unitFrame.StartSwipeAnimation2.Alpha:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Alpha:SetFromAlpha(options.textureStartAlpha)\n    unitFrame.StartSwipeAnimation2.Alpha:SetToAlpha(options.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation2.Scale:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation2.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation2.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)     \n    \nend\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1724872253,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local DF = DetailsFramework\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture2:Show()\n        unitFrame.CastSwipeAnimation2:Play()\n        unitFrame.StartSwipeAnimation2:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation2:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation2:Stop()\n                unitFrame.CastSwipeTexture2:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture2) then\n            return\n        end\n        \n        local circularTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n        circularTexture:SetPoint(\"center\", 0, 0)\n        circularTexture:SetSize(64, 64)\n        circularTexture:Hide()\n        \n        unitFrame.CastSwipeTexture2 = circularTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation2 = DF:CreateAnimationHub(circularTexture)\n        unitFrame.CastSwipeAnimation2:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation2.Rotation = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"rotation\", 1, 1, 360)\n        unitFrame.CastSwipeAnimation2.Trans = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"TRANSLATION\", 1, 1, 2, 2)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, function()circularTexture:Show() end)\n        \n        unitFrame.StartSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, nil, function()circularTexture:Hide() end)\n        \n        unitFrame.EndSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"alpha\", 1, 0.2, 1, 0)\n        \n        unitFrame.EndSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2_icon.png",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
            ["Revision"] = 320,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 2,
                    ["Max"] = 0.3,
                    ["Desc"] = "How much time takes for one revolution.",
                    ["Min"] = 0.1,
                    ["Key"] = "rotationDuration",
                    ["Value"] = 0.2,
                    ["Name"] = "Rotation Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option5",
                    ["Value"] = 0,
                    ["Name"] = "Option 5",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1.5,
                    ["Desc"] = "Animation Start Duration",
                    ["Min"] = 0,
                    ["Key"] = "animStartDuration",
                    ["Value"] = 0.05,
                    ["Name"] = "Animation Start Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] =
                    "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
                    ["Min"] = 0,
                    ["Key"] = "textureStartAlpha",
                    ["Value"] = 1,
                    ["Name"] = "Texture Start Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option5",
                    ["Value"] = 0,
                    ["Name"] = "Option 5",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1.2,
                    ["Desc"] = "Texture Scale",
                    ["Min"] = 0.6,
                    ["Key"] = "textureScale",
                    ["Value"] = 0.9,
                    ["Name"] = "Texture Scale",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Texture Alpha",
                    ["Min"] = 0,
                    ["Key"] = "textureAlpha",
                    ["Value"] = 1,
                    ["Name"] = "Texture Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "textureColor",
                    ["Value"] = {
                        0.63921570777893,
                        0.63921570777893,
                        0.63921570777893,
                        1,
                    },
                    ["Name"] = "Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Texture Color",
                },
            },
            ["Author"] = "Terciob",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
            ["SpellIds"] = {
                451102,
                426787,
                448888,
                439811,
                434796,
                434793,
                438879,
                438473,
                434252,
                434829,
                440468,
                436205,
                436246,
                441395,
                437533,
                451965,
                456902,
                456900,
                451996,
                451939,
                450077,
                450079,
                324909,
                324922,
                460092,
                272711,
                269266,
                425974,
                424879,
                426771,
                426786,
                423324,
                428879,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Name"] = "Cast - AoE Hit All [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = options.textureScale\n    \n    local circularTexture = unitFrame.CastSwipeTexture2\n    \n    --texture settings\n    circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n    circularTexture:SetPoint(\"center\", 0, 0)\n    circularTexture:SetSize(64, 64)    \n    circularTexture:SetBlendMode(\"ADD\")\n    circularTexture:SetVertexColor(DetailsFramework:ParseColors(options.textureColor))\n    circularTexture:SetScale(targetScale)\n    circularTexture:SetAlpha(options.textureAlpha)\n    \n    --animations    \n    unitFrame.CastSwipeAnimation2.Rotation:SetDuration(options.rotationDuration)\n    unitFrame.CastSwipeAnimation2.Trans:SetDuration(options.rotationDuration)\n    \n    local randomOffset = 5\n    unitFrame.CastSwipeAnimation2.Trans:SetOffset(math.random(-randomOffset, randomOffset), math.random(-randomOffset, randomOffset))\n    \n    \n    unitFrame.StartSwipeAnimation2.Alpha:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Alpha:SetFromAlpha(options.textureStartAlpha)\n    unitFrame.StartSwipeAnimation2.Alpha:SetToAlpha(options.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation2.Scale:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation2.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation2.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)     \n    \nend\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (IsInRaid()) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    --textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:SetTexture([[Interface\\AddOns\\Plater\\images\\tail_rounded_white.png]])\n    textureStretched:SetHeight(castBar:GetHeight() + 2)\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    \n    --trail\n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    --local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    --Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198544,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.1, 0.5)\n    \n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    if (envTable._CanInterrupt) then\n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    else        \n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    end    \n    \n    self.ThrottleUpdate = 0\nend",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_debuff.png",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Revision"] = 742,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 2,
                    ["Max"] = 20,
                    ["Desc"] = "Need a /reload",
                    ["Min"] = 5,
                    ["Key"] = "segmentsAmount",
                    ["Value"] = 7,
                    ["Name"] = "Amount of Segments",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "sparkColor",
                    ["Value"] = {
                        0.96862751245499,
                        0.9764706492424,
                        1,
                        1,
                    },
                    ["Name"] = "Spark Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "glowColor",
                    ["Value"] = {
                        0.49019610881805,
                        0,
                        0.54901963472366,
                        1,
                    },
                    ["Name"] = "Trail Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
            },
            ["Author"] = "Terciob",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "Show a different animation for the cast bar.",
            ["SpellIds"] = {
                432448,
                431309,
                451107,
                451119,
                438618,
                436322,
                443507,
                443436,
                439341,
                447261,
                449444,
                451224,
                451241,
                450095,
                451612,
                451395,
                324987,
                327393,
                256709,
                268230,
                275836,
                426308,
                449153,
                427461,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.1, 0.5)\n    \n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    if (envTable._CanInterrupt) then\n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    else        \n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    end    \n    \n    self.ThrottleUpdate = 0\nend",
            ["Name"] = "Cast - Debuff [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (IsInRaid()) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    --textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:SetTexture([[Interface\\AddOns\\Plater\\images\\tail_rounded_white.png]])\n    textureStretched:SetHeight(castBar:GetHeight() + 2)\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    \n    --trail\n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    --local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    --Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    self.simpleInterruptFlash = self.simpleInterruptFlash or  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    \n    self.simpleInterruptFlash:SetBlendMode (\"ADD\")\n    self.simpleInterruptFlash:SetDrawLayer(\"OVERLAY\", 7)\n    self.simpleInterruptFlash:SetPoint (\"center\", self, \"center\")\n    self.simpleInterruptFlash:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    self.simpleInterruptFlashAnimHub = self.simpleInterruptFlashAnimHub or Plater:CreateAnimationHub (self.simpleInterruptFlash, \n        function()\n            self.simpleInterruptFlash:Show()\n        end,\n        function()\n            self.simpleInterruptFlash:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    self.simpleInterruptFlashAnimHub.fadeIn = self.simpleInterruptFlashAnimHub.fadeIn or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    self.simpleInterruptFlashAnimHub.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    self.simpleInterruptFlashAnimHub.fadeOut = self.simpleInterruptFlashAnimHub.fadeOut or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    self.simpleInterruptFlashAnimHub.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    self.simpleInterruptFlashAnimHub:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    self.simpleInterruptFlash:SetHeight(self:GetHeight() * 2.5 )\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    self.simpleInterruptFlashAnimHub:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
            ["Time"] = 1740198530,
            ["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    self.simpleInterruptFlash = self.simpleInterruptFlash or  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    \n    self.simpleInterruptFlash:SetBlendMode (\"ADD\")\n    self.simpleInterruptFlash:SetDrawLayer(\"OVERLAY\", 7)\n    self.simpleInterruptFlash:SetPoint (\"center\", self, \"center\")\n    self.simpleInterruptFlash:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    self.simpleInterruptFlashAnimHub = self.simpleInterruptFlashAnimHub or Plater:CreateAnimationHub (self.simpleInterruptFlash, \n        function()\n            self.simpleInterruptFlash:Show()\n        end,\n        function()\n            self.simpleInterruptFlash:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    self.simpleInterruptFlashAnimHub.fadeIn = self.simpleInterruptFlashAnimHub.fadeIn or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    self.simpleInterruptFlashAnimHub.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    self.simpleInterruptFlashAnimHub.fadeOut = self.simpleInterruptFlashAnimHub.fadeOut or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    self.simpleInterruptFlashAnimHub.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    self.simpleInterruptFlashAnimHub:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
            ["Revision"] = 960,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option1",
                    ["Value"] = 0,
                    ["Name"] = "Blank Line",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] =
                    "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option3",
                    ["Value"] =
                    "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                    ["Name"] = "Option 3",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useCastbarColor",
                    ["Value"] = true,
                    ["Name"] = "Cast Bar Color Enabled",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "When enabled, changes the cast bar color,",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "castBarColor",
                    ["Value"] = {
                        1,
                        0.43137254901961,
                        0,
                        1,
                    },
                    ["Name"] = "Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Color of the cast bar.",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Blank Line",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] =
                    "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
                    ["Min"] = 0.05,
                    ["Key"] = "flashDuration",
                    ["Value"] = 0.2,
                    ["Name"] = "Flash Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Increases the cast bar height by this value",
                    ["Min"] = 0,
                    ["Key"] = "castBarHeight",
                    ["Value"] = 0,
                    ["Name"] = "Cast Bar Height Mod",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] =
                    "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
                    ["Min"] = 0.1,
                    ["Key"] = "shakeDuration",
                    ["Value"] = 0.1,
                    ["Name"] = "Shake Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 200,
                    ["Desc"] = "How strong is the shake.",
                    ["Min"] = 10,
                    ["Key"] = "shakeAmplitude",
                    ["Value"] = 25,
                    ["Name"] = "Shake Amplitude",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 80,
                    ["Desc"] = "How fast the shake moves.",
                    ["Min"] = 1,
                    ["Key"] = "shakeFrequency",
                    ["Value"] = 30,
                    ["Name"] = "Shake Frequency",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
            },
            ["Author"] = "Tercioo-Sylvanas",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
            ["Desc"] = "Play a very fast flash when the cast start.",
            ["SpellIds"] = {
                431333,
                442210,
                443430,
                443433,
                451871,
                76711,
                334748,
                334749,
                328667,
                338353,
                445207,
            },
            ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Name"] = "Cast - Simple Interrupt [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    self.simpleInterruptFlash:SetHeight(self:GetHeight() * 2.5 )\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    self.simpleInterruptFlashAnimHub:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198532,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_ongoing.png",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
            ["Revision"] = 166,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 1,
                    ["Key"] = "dotColor",
                    ["Value"] = {
                        1,
                        1,
                        1,
                        0.41662168502808,
                    },
                    ["Name"] = "Dots Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Dots Color",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Dots X Offset",
                    ["Min"] = -10,
                    ["Key"] = "xOffset",
                    ["Value"] = 0,
                    ["Name"] = "Dots X Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Dots Y Offset",
                    ["Min"] = -10,
                    ["Key"] = "yOffset",
                    ["Value"] = 0,
                    ["Name"] = "Dots Y Offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Option 4",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Adjust how fast the blinking occurs",
                    ["Min"] = 0.2,
                    ["Key"] = "speed",
                    ["Value"] = 0.4,
                    ["Name"] = "Blink Speed",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Min amount of transparency the blink can have",
                    ["Min"] = 0,
                    ["Key"] = "minAlpha",
                    ["Value"] = 0,
                    ["Name"] = "Blink Min Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Max amount of transparency the blink can have",
                    ["Min"] = 0,
                    ["Key"] = "maxAlpha",
                    ["Value"] = 0.5,
                    ["Name"] = "Blink Max Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "blinkColor",
                    ["Value"] = {
                        1,
                        0.52549022436142,
                        0.5137255191803,
                        1,
                    },
                    ["Name"] = "Blink Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Color of the blinking texture",
                },
            },
            ["Author"] = "Terciob",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] =
            "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
            ["SpellIds"] = {
                431364,
                423327,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
            ["Name"] = "Cast - Ongoing Cast [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
            ["Time"] = 1740198541,
            ["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_healalert.png",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
            ["Revision"] = 1257,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option1",
                    ["Value"] = 0,
                    ["Name"] = "Blank Line",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] =
                    "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option3",
                    ["Value"] =
                    "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                    ["Name"] = "Option 3",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useCastbarColor",
                    ["Value"] = true,
                    ["Name"] = "Cast Bar Color Enabled",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "When enabled, changes the cast bar color,",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "castbarColor",
                    ["Value"] = {
                        1,
                        0.43137254901961,
                        0,
                        1,
                    },
                    ["Name"] = "Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Color of the cast bar.",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Blank Line",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] =
                    "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
                    ["Min"] = 0.05,
                    ["Key"] = "flashDuration",
                    ["Value"] = 0.4,
                    ["Name"] = "Flash Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Increases the cast bar height by this value",
                    ["Min"] = 0,
                    ["Key"] = "castBarHeight",
                    ["Value"] = 5,
                    ["Name"] = "Cast Bar Height Mod",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] =
                    "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
                    ["Min"] = 0.1,
                    ["Key"] = "shakeDuration",
                    ["Value"] = 0.2,
                    ["Name"] = "Shake Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 100,
                    ["Desc"] = "How strong is the shake.",
                    ["Min"] = 2,
                    ["Key"] = "shakeAmplitude",
                    ["Value"] = 8,
                    ["Name"] = "Shake Amplitude",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 80,
                    ["Desc"] = "How fast the shake moves.",
                    ["Min"] = 1,
                    ["Key"] = "shakeFrequency",
                    ["Value"] = 40,
                    ["Name"] = "Shake Frequency",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
            },
            ["Author"] = "Terciob",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
            ["Desc"] =
            "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
            ["SpellIds"] = {
                450756,
                452162,
                322938,
                322939,
                324776,
                324914,
                326046,
                340544,
                335143,
                327130,
                256957,
                275826,
                429109,
                451097,
            },
            ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Name"] = "Cast - Heal Cut [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.TextureWatchStep) then\n        \n        unitFrame.TextureWatchStep = true\n        \n        local animationFrame = CreateFrame(\"frame\", nil, unitFrame)\n        \n        \n        --> single animation group\n        local bearTrapAnimation = animationFrame:CreateAnimationGroup(\"beartrapAnimationGroup\")\n        bearTrapAnimation:SetLooping(\"NONE\")\n        \n        --> widgets:\n        \n        ----------------------------------------------\n        \n        local leftTrap  = animationFrame:CreateTexture(\"$parentleftTrapTexture\", \"ARTWORK\")\n        leftTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        leftTrap:SetDrawLayer(\"ARTWORK\", 0)\n        leftTrap:SetPoint(\"center\", animationFrame, \"center\", -48, 0)\n        leftTrap:SetSize(100, 100)\n        leftTrap:SetTexCoord(1, 0.0010000000149012, 0.0010000000149012, 1)\n        \n        --> animations for leftTrap\n        \n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(1)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetStartDelay(0.39999997615814)\n        leftTrap.rotation:SetDegrees(-90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(6)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetDegrees(90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        leftTrap.alpha:SetTarget(leftTrap)\n        leftTrap.alpha:SetOrder(6)\n        leftTrap.alpha:SetDuration(0.195999994874)\n        leftTrap.alpha:SetFromAlpha(1)\n        leftTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local rightTrap  = animationFrame:CreateTexture(\"$parentrightTrapTexture\", \"ARTWORK\")\n        rightTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        rightTrap:SetDrawLayer(\"ARTWORK\", 0)\n        rightTrap:SetPoint(\"center\", animationFrame, \"center\", 0, 0)\n        rightTrap:SetSize(100, 100)\n        \n        --> animations for rightTrap\n        \n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(1)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetStartDelay(0.39999997615814)\n        rightTrap.rotation:SetDegrees(90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(6)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetDegrees(-90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        rightTrap.alpha:SetTarget(rightTrap)\n        rightTrap.alpha:SetOrder(6)\n        rightTrap.alpha:SetDuration(0.195999994874)\n        rightTrap.alpha:SetFromAlpha(1)\n        rightTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local boots  = animationFrame:CreateTexture(\"$parentbootsTexture\", \"BORDER\")\n        boots:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_shoes.png]])\n        boots:SetDrawLayer(\"BORDER\", 0)\n        boots:SetPoint(\"center\", animationFrame, \"center\", -88, 35)\n        boots:SetSize(50, 50)\n        \n        --> animations for boots\n        \n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(1)\n        boots.alpha:SetDuration(0.31599998474121)\n        boots.alpha:SetFromAlpha(0)\n        boots.alpha:SetToAlpha(1)\n        boots.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        boots.rotation:SetTarget(boots)\n        boots.rotation:SetOrder(1)\n        boots.rotation:SetDuration(0.2960000038147)\n        boots.rotation:SetStartDelay(0.19999998807907)\n        boots.rotation:SetDegrees(40)\n        boots.rotation:SetOrigin(\"center\", 0, 0)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(1)\n        boots.translation:SetDuration(0.59599995613098)\n        boots.translation:SetOffset(63, -33)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(2)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(3)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(4)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(5)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(6)\n        boots.alpha:SetDuration(0.39599999785423)\n        boots.alpha:SetFromAlpha(1)\n        boots.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        unitFrame.BearTrapTextures = {leftTrap, rightTrap, boots}\n        unitFrame.BearTrapAnimationFrame = animationFrame\n        unitFrame.BearTrapAnimation = bearTrapAnimation\n        \n        \n        bearTrapAnimation:SetScript(\"OnPlay\", function()\n                boots:SetAlpha(0)\n                boots:Show()\n                leftTrap:Show()\n                rightTrap:Show()            \n        end)\n        \n        bearTrapAnimation:SetScript(\"OnFinished\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)       \n        \n        bearTrapAnimation:SetScript(\"OnStop\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)           \n        \n        \n    end\n    \nend\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimation:Stop()\n    \nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimationFrame:SetSize(1, 1)\n    unitFrame.BearTrapAnimationFrame:ClearAllPoints()\n    unitFrame.BearTrapAnimationFrame:SetPoint(\"center\", unitFrame, \"center\", 30, 63)\n    unitFrame.BearTrapAnimationFrame:SetScale(0.5)\n    \n    unitFrame.BearTrapAnimation:Play()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Time"] = 1740198518,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.TextureWatchStep) then\n        \n        unitFrame.TextureWatchStep = true\n        \n        local animationFrame = CreateFrame(\"frame\", nil, unitFrame)\n        \n        \n        --> single animation group\n        local bearTrapAnimation = animationFrame:CreateAnimationGroup(\"beartrapAnimationGroup\")\n        bearTrapAnimation:SetLooping(\"NONE\")\n        \n        --> widgets:\n        \n        ----------------------------------------------\n        \n        local leftTrap  = animationFrame:CreateTexture(\"$parentleftTrapTexture\", \"ARTWORK\")\n        leftTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        leftTrap:SetDrawLayer(\"ARTWORK\", 0)\n        leftTrap:SetPoint(\"center\", animationFrame, \"center\", -48, 0)\n        leftTrap:SetSize(100, 100)\n        leftTrap:SetTexCoord(1, 0.0010000000149012, 0.0010000000149012, 1)\n        \n        --> animations for leftTrap\n        \n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(1)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetStartDelay(0.39999997615814)\n        leftTrap.rotation:SetDegrees(-90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(6)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetDegrees(90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        leftTrap.alpha:SetTarget(leftTrap)\n        leftTrap.alpha:SetOrder(6)\n        leftTrap.alpha:SetDuration(0.195999994874)\n        leftTrap.alpha:SetFromAlpha(1)\n        leftTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local rightTrap  = animationFrame:CreateTexture(\"$parentrightTrapTexture\", \"ARTWORK\")\n        rightTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        rightTrap:SetDrawLayer(\"ARTWORK\", 0)\n        rightTrap:SetPoint(\"center\", animationFrame, \"center\", 0, 0)\n        rightTrap:SetSize(100, 100)\n        \n        --> animations for rightTrap\n        \n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(1)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetStartDelay(0.39999997615814)\n        rightTrap.rotation:SetDegrees(90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(6)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetDegrees(-90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        rightTrap.alpha:SetTarget(rightTrap)\n        rightTrap.alpha:SetOrder(6)\n        rightTrap.alpha:SetDuration(0.195999994874)\n        rightTrap.alpha:SetFromAlpha(1)\n        rightTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local boots  = animationFrame:CreateTexture(\"$parentbootsTexture\", \"BORDER\")\n        boots:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_shoes.png]])\n        boots:SetDrawLayer(\"BORDER\", 0)\n        boots:SetPoint(\"center\", animationFrame, \"center\", -88, 35)\n        boots:SetSize(50, 50)\n        \n        --> animations for boots\n        \n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(1)\n        boots.alpha:SetDuration(0.31599998474121)\n        boots.alpha:SetFromAlpha(0)\n        boots.alpha:SetToAlpha(1)\n        boots.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        boots.rotation:SetTarget(boots)\n        boots.rotation:SetOrder(1)\n        boots.rotation:SetDuration(0.2960000038147)\n        boots.rotation:SetStartDelay(0.19999998807907)\n        boots.rotation:SetDegrees(40)\n        boots.rotation:SetOrigin(\"center\", 0, 0)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(1)\n        boots.translation:SetDuration(0.59599995613098)\n        boots.translation:SetOffset(63, -33)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(2)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(3)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(4)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(5)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(6)\n        boots.alpha:SetDuration(0.39599999785423)\n        boots.alpha:SetFromAlpha(1)\n        boots.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        unitFrame.BearTrapTextures = {leftTrap, rightTrap, boots}\n        unitFrame.BearTrapAnimationFrame = animationFrame\n        unitFrame.BearTrapAnimation = bearTrapAnimation\n        \n        \n        bearTrapAnimation:SetScript(\"OnPlay\", function()\n                boots:SetAlpha(0)\n                boots:Show()\n                leftTrap:Show()\n                rightTrap:Show()            \n        end)\n        \n        bearTrapAnimation:SetScript(\"OnFinished\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)       \n        \n        bearTrapAnimation:SetScript(\"OnStop\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)           \n        \n        \n    end\n    \nend\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_voidzone.png",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimation:Stop()\n    \nend\n\n\n",
            ["Revision"] = 221,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 5,
                    ["Key"] = "option1",
                    ["Value"] =
                    "Settings for the animation played when the cast creates small void zones in the ground.",
                    ["Name"] = "Option 1",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
            },
            ["Author"] = "Terciob",
            ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Desc"] =
            "Play an animation when the cast creates small zones in the ground that will damage if the player doesn't move.",
            ["SpellIds"] = {
                450784,
                451423,
                445813,
                445838,
                438658,
                433845,
                456696,
                451391,
                324923,
                323138,
                340189,
                326021,
                320571,
                321780,
                345623,
                333479,
                334476,
                320772,
                257882,
                424903,
                426345,
                422233,
                445541,
                428703,
                439559,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Name"] = "Cast - Voidzone [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimationFrame:SetSize(1, 1)\n    unitFrame.BearTrapAnimationFrame:ClearAllPoints()\n    unitFrame.BearTrapAnimationFrame:SetPoint(\"center\", unitFrame, \"center\", 30, 63)\n    unitFrame.BearTrapAnimationFrame:SetScale(0.5)\n    \n    unitFrame.BearTrapAnimation:Play()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\n    unitFrame.CastSwipeTexture:Hide()\nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    unitFrame.CastSwipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetScaleFrom(1.05, 1.05)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(1, 1)    \n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Time"] = 1724872259,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\n    unitFrame.CastSwipeTexture:Hide()\nend\n\n\n",
            ["Revision"] = 283,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 2,
                    ["Max"] = 0.3,
                    ["Desc"] = "Rotation Duration",
                    ["Min"] = 0.1,
                    ["Key"] = "rotationDuration",
                    ["Value"] = 0.15,
                    ["Name"] = "Rotation Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option5",
                    ["Value"] = 0,
                    ["Name"] = "Option 5",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1.5,
                    ["Desc"] = "Animation Start Duration",
                    ["Min"] = 0,
                    ["Key"] = "animStartDuration",
                    ["Value"] = 0.2,
                    ["Name"] = "Animation Start Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] =
                    "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
                    ["Min"] = 0,
                    ["Key"] = "textureStartAlpha",
                    ["Value"] = 0.3,
                    ["Name"] = "Texture Start Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option5",
                    ["Value"] = 0,
                    ["Name"] = "Option 5",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1.2,
                    ["Desc"] = "Texture Scale",
                    ["Min"] = 0.6,
                    ["Key"] = "textureScale",
                    ["Value"] = 0.8,
                    ["Name"] = "Texture Scale",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Texture Alpha",
                    ["Min"] = 0,
                    ["Key"] = "textureAlpha",
                    ["Value"] = 0.8,
                    ["Name"] = "Texture Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "textureColor",
                    ["Value"] = {
                        0.74117648601532,
                        0.74117648601532,
                        0.74117648601532,
                        1,
                    },
                    ["Name"] = "Texture Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Texture Color",
                },
            },
            ["Author"] = "Terciob",
            ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
            ["SpellIds"] = {
                453212,
                451098,
                427001,
                438622,
                446086,
                447271,
                437700,
                439646,
                448877,
                451387,
                331743,
                320637,
                327240,
                257170,
                257326,
                257169,
                423538,
                428508,
                428520,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Name"] = "Cast - AoE With Range [P]",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    unitFrame.CastSwipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetScaleFrom(1.05, 1.05)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(1, 1)    \n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
            ["Enabled"] = false,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
            ["ScriptType"] = 1,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740507594,
            ["NpcNames"] = {
            },
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
            ["url"] = "",
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
            ["Revision"] = 34,
            ["semver"] = "",
            ["Options"] = {
            },
            ["Prio"] = 99,
            ["Author"] = "Terciob",
            ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
            ["Desc"] = "Show a castbar for the aura duration.",
            ["SpellIds"] = {
                438494,
                335141,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Name"] = "Aura - Is Cast Bar [P]",
            ["PlaterCore"] = 1,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
            ["Enabled"] = true,
            ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if envTable.shatteringBlade then\n        envTable.razoriceGlow:Hide()\n    end\n    \n    \nend\n\n\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.shatteringBlade = false\n    local shatteringBladeData = C_Traits.GetNodeInfo(C_ClassTalents.GetActiveConfigID(), 76095)\n    \n    if shatteringBladeData and shatteringBladeData.currentRank == 1 then\n        envTable.shatteringBlade = true\n    end    \n    \n    if envTable.shatteringBlade then \n        self.razoriceGlow = self.razoriceGlow or Plater.CreateIconGlow(self)\n        envTable.razoriceGlow = self.razoriceGlow \n    end\nend\n\n\n",
            ["ScriptType"] = 1,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740198442,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if envTable.shatteringBlade then\n        if envTable._StackCount == 5 then\n            envTable.razoriceGlow:Show()         \n        else\n            envTable.razoriceGlow:Hide()\n        end      \n    end\n    \nend\n\n\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
            ["Icon"] = 237523,
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if envTable.shatteringBlade then\n        envTable.razoriceGlow:Hide()\n    end\n    \n    \nend\n\n\n\n\n",
            ["Revision"] = 98,
            ["semver"] = "1.0.1",
            ["url"] = "https://wago.io/pL6hDztPB/2",
            ["Options"] = {
            },
            ["Author"] = "Khazak-Zul'jin",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] = "Glows when  Razorice is at 5 stacks and Shattering Blade is talented",
            ["SpellIds"] = {
                51714,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    if envTable.shatteringBlade then\n        if envTable._StackCount == 5 then\n            envTable.razoriceGlow:Show()         \n        else\n            envTable.razoriceGlow:Hide()\n        end      \n    end\n    \nend\n\n\n\n\n",
            ["Name"] = "Shattering Blade Razorice Glow",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = 2,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.shatteringBlade = false\n    local shatteringBladeData = C_Traits.GetNodeInfo(C_ClassTalents.GetActiveConfigID(), 76095)\n    \n    if shatteringBladeData and shatteringBladeData.currentRank == 1 then\n        envTable.shatteringBlade = true\n    end    \n    \n    if envTable.shatteringBlade then \n        self.razoriceGlow = self.razoriceGlow or Plater.CreateIconGlow(self)\n        envTable.razoriceGlow = self.razoriceGlow \n    end\nend\n\n\n",
            ["Enabled"] = true,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
            ["OptionsValues"] = {
                ["desaturateArrow"] = true,
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Time"] = 1740509508,
            ["UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
            ["Icon"] = 1958262,
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
            ["Revision"] = 1014,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "option1",
                    ["Value"] = 0,
                    ["Name"] = "Option 1",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] =
                    "Produces an effect to indicate the spell will hit players in front of the enemy.",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option4",
                    ["Value"] =
                    "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                    ["Name"] = "Option 4",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option3",
                    ["Value"] = 0,
                    ["Name"] = "Option 3",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Set the alpha of the moving arrow",
                    ["Min"] = 0,
                    ["Key"] = "arrowAlpha",
                    ["Value"] = 0.73,
                    ["Name"] = "Arrow Alpha",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Time that takes for an arrow to travel from the to right.",
                    ["Min"] = 0,
                    ["Key"] = "animSpeed",
                    ["Value"] = 0.2,
                    ["Name"] = "Animation Speed",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "desaturateArrow",
                    ["Value"] = false,
                    ["Name"] = "Use White Arrow",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "If enabled, the arrow color will be desaturated.",
                },
            },
            ["Author"] = "Izimode-Azralon",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
            ["Desc"] =
            "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
            ["SpellIds"] = {
                388623,
                384699,
                153501,
                153686,
                154442,
                192018,
                219488,
                387067,
                391136,
                382233,
                209027,
                212031,
                207261,
                207979,
                198888,
                199805,
                199050,
                191508,
                152792,
                265540,
                226304,
                375327,
                372202,
                209495,
                260894,
                226406,
                193505,
                375348,
                257426,
                255952,
                257870,
                413147,
                383107,
                377559,
                390111,
                369791,
                369335,
                375727,
                265016,
                265019,
                260793,
                260292,
                272457,
                272609,
                269843,
                183465,
                226296,
                188169,
                183088,
                410873,
                411012,
                88308,
                373742,
                374533,
                377204,
                204667,
                255567,
                201226,
                200768,
                265372,
                413529,
                408141,
                412215,
                412129,
                412505,
                419351,
                200261,
                200345,
                197974,
                200913,
                164357,
                169179,
                426645,
                428293,
                169929,
                388976,
                385958,
                377383,
                377034,
                374361,
                370764,
                386660,
                391118,
                372222,
                385578,
                384696,
                384868,
                387629,
                382277,
                376892,
                375943,
                376683,
                372087,
                391726,
                391723,
                381525,
                388060,
                376170,
                393432,
                384524,
                375351,
                382708,
                375251,
                375439,
                372311,
                372201,
                369563,
                369573,
                369409,
                369061,
                382712,
                434824,
                453161,
                443500,
                434779,
                451496,
                451543,
                439621,
                440218,
                431494,
                450854,
                449130,
                448640,
                321968,
                331718,
                340160,
                324323,
                333488,
                333477,
                256627,
                269029,
                257862,
                462216,
                447395,
                448105,
                432198,
                441119,
                448619,
                449090,
                427323,
                422414,
                425027,
                340300,
                427025,
                257288,
                268260,
                426261,
                321834,
                427869,
                465754,
                472452,
                465682,
                1217653,
                459779,
                473114,
                1217496,
                421910,
                421277,
                447270,
                436592,
                426893,
                1214315,
                424958,
                451843,
                1214546,
                445457,
                317231,
                320729,
                333294,
                330614,
                323608,
                339706,
                267551,
                1217294,
                275907,
                259940,
                283422,
                293986,
                291865,
                466124,
                468813,
                473220,
                332708,
                1215738,
                474087,
                426260,
            },
            ["Temp_UpdateCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
            ["Name"] = "CAST - FRONTALS",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
            ["Enabled"] = true,
        },
        {
            ["ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --save current cast bar color before changing it later\n    envTable.OldCastbarColor = unitFrame.castBar:GetColor()\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
            ["OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --set color back to what it was before\n    unitFrame.castBar:SetColor(Plater:ParseColors(envTable.OldCastbarColor))\n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
            ["OptionsValues"] = {
            },
            ["Temp_OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    if scriptTable.config.interruptSoundToggle then\n        PlaySoundFile(scriptTable.config.interruptSound, \"Master\")\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    --Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    unitFrame.castBar:SetColor(Plater:ParseColors(scriptTable.config.castbarColor))\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["ScriptType"] = 2,
            ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
            ["Time"] = 1740509507,
            ["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Temp_ConstructorCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    --save current cast bar color before changing it later\n    envTable.OldCastbarColor = unitFrame.castBar:GetColor()\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
            ["Icon"] = 1305153,
            ["NpcNames"] = {
            },
            ["Temp_OnHideCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --set color back to what it was before\n    unitFrame.castBar:SetColor(Plater:ParseColors(envTable.OldCastbarColor))\n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
            ["Revision"] = 1968,
            ["semver"] = "",
            ["url"] = "",
            ["Options"] = {
                {
                    ["Type"] = 5,
                    ["Key"] = "option2",
                    ["Value"] =
                    "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
                    ["Name"] = "Option 2",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option3",
                    ["Value"] =
                    "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                    ["Name"] = "Option 3",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option4",
                    ["Value"] = 0,
                    ["Name"] = "Blank Space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "useCastbarColor",
                    ["Value"] = true,
                    ["Name"] = "Cast Bar Color Enabled",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "When enabled, changes the cast bar color,",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "castbarColor",
                    ["Value"] = {
                        1,
                        0.43137254901961,
                        0,
                        1,
                    },
                    ["Name"] = "Cast Bar Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Color of the cast bar.",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option7",
                    ["Value"] = 0,
                    ["Name"] = "Blank Line",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "interruptSoundToggle",
                    ["Value"] = false,
                    ["Name"] = "Play Sound On Spell Cast",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Plays \"Interrupt\" Sound When Spell Casted",
                },
                {
                    ["Type"] = 8,
                    ["Key"] = "interruptSound",
                    ["Value"] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
                    ["Name"] = "Choose Sound",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\options_audio_dropdown.png",
                    ["Desc"] = "Choose The Sound Played",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option11",
                    ["Value"] = 0,
                    ["Name"] = "blank space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] =
                    "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
                    ["Min"] = 0.05,
                    ["Key"] = "flashDuration",
                    ["Value"] = 0.4,
                    ["Name"] = "Flash Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 10,
                    ["Desc"] = "Increases the cast bar height by this value",
                    ["Min"] = 0,
                    ["Key"] = "castBarHeight",
                    ["Value"] = 5,
                    ["Name"] = "Cast Bar Height Mod",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] =
                    "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
                    ["Min"] = 0.1,
                    ["Key"] = "shakeDuration",
                    ["Value"] = 0.2,
                    ["Name"] = "Shake Duration",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 100,
                    ["Desc"] = "How strong is the shake.",
                    ["Min"] = 2,
                    ["Key"] = "shakeAmplitude",
                    ["Value"] = 8,
                    ["Name"] = "Shake Amplitude",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 80,
                    ["Desc"] = "How fast the shake moves.",
                    ["Min"] = 1,
                    ["Key"] = "shakeFrequency",
                    ["Value"] = 40,
                    ["Name"] = "Shake Frequency",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
            },
            ["Author"] = "Tercioo-Sylvanas",
            ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
            ["Desc"] =
            "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
            ["SpellIds"] = {
                387955,
                387615,
                387606,
                225100,
                211401,
                211470,
                192563,
                152818,
                156776,
                398206,
                153524,
                396073,
                396018,
                345202,
                263365,
                395859,
                395872,
                397914,
                209410,
                392924,
                397889,
                153395,
                265089,
                278755,
                266106,
                272183,
                265523,
                202181,
                374080,
                400386,
                209413,
                207980,
                257397,
                257736,
                382787,
                369602,
                369465,
                381593,
                265091,
                265433,
                382791,
                376780,
                257784,
                88010,
                410870,
                266209,
                342797,
                413044,
                204243,
                279118,
                255041,
                259572,
                200630,
                225562,
                201399,
                264390,
                265346,
                263959,
                278444,
                265876,
                264407,
                266225,
                415770,
                415437,
                412922,
                417481,
                418200,
                411300,
                412378,
                412233,
                407891,
                416139,
                227913,
                164965,
                164887,
                168082,
                427460,
                429176,
                271174,
                165213,
                169839,
                413607,
                388392,
                388863,
                396640,
                377389,
                387975,
                387564,
                375596,
                386546,
                384365,
                386025,
                386024,
                386015,
                387125,
                387411,
                387596,
                384808,
                373395,
                397394,
                372743,
                384194,
                373017,
                367500,
                367503,
                377950,
                372711,
                374544,
                385029,
                384633,
                374339,
                374045,
                395694,
                374563,
                374699,
                376171,
                377341,
                377402,
                395427,
                372223,
                384161,
                378282,
                369675,
                369365,
                369411,
                436841,
                392451,
                434802,
                434793,
                436322,
                448248,
                448047,
                433841,
                443430,
                443433,
                442536,
                452162,
                453840,
                431309,
                450756,
                451097,
                431333,
                429545,
                445207,
                429109,
                322938,
                324914,
                326046,
                340544,
                337235,
                322450,
                335143,
                324293,
                327130,
                256957,
                275826,
                272571,
                454440,
                451871,
                76711,
                324776,
                427356,
                432959,
                426145,
                427157,
                338353,
                442210,
                449455,
                377488,
                386549,
                1214468,
                463058,
                1214780,
                462771,
                471733,
                428019,
                425536,
                424322,
                426295,
                422541,
                427176,
                424420,
                424419,
                423051,
                444743,
                437721,
                441627,
                440687,
                427260,
                341902,
                330868,
                342675,
                341969,
                341977,
                280604,
                269302,
                263202,
                271579,
                268702,
                293729,
                301088,
                441351,
                268797,
            },
            ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
            ["Name"] = "CAST - MUST INTERRUPT",
            ["PlaterCore"] = 1,
            ["Prio"] = 99,
            ["version"] = -1,
            ["OnShowCode"] =
            "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    if scriptTable.config.interruptSoundToggle then\n        PlaySoundFile(scriptTable.config.interruptSound, \"Master\")\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    --Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    unitFrame.castBar:SetColor(Plater:ParseColors(scriptTable.config.castbarColor))\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
            ["Enabled"] = true,
        },
    },
    ["saved_cvars_last_change"] = {
        ["nameplateShowFriends"] =
        "[C]: in function 'SetCVar'\n[Interface/AddOns/Blizzard_SharedXMLBase/CvarUtil.lua]:76: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:264: in function 'SetValueDerived'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:110: in function 'ApplyValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:86: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Settings.lua]:224: in function 'SetValue'\n[ALLNAMEPLATES]:13: in function <[string \"ALLNAMEPLATES\"]:1>\n",
        ["nameplateShowEnemies"] =
        "[C]: in function 'SetCVar'\n[Interface/AddOns/Blizzard_SharedXMLBase/CvarUtil.lua]:76: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:264: in function 'SetValueDerived'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:110: in function 'ApplyValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:86: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Settings.lua]:224: in function 'SetValue'\n[NAMEPLATES]:6: in function <[string \"NAMEPLATES\"]:1>\n",
    },
    ["aura2_y_offset"] = 0,
    ["buffs_on_aura2"] = true,
    ["health_selection_overlay"] = "Cronix",
    ["expansion_triggerwipe"] = {
        [10] = true,
        [9] = true,
    },
    ["cast_statusbar_color_nointerrupt"] = {
        0.49411767721176,
        0.49803924560547,
        0.50196081399918,
        0.96000000089407,
    },
    ["npc_cache"] = {
        [40788] = {
            "Mindbender Ghur'sha",
            "Throne of the Tides",
            "enUS",
        },
        [169421] = {
            "Felguard",
            "Brackenhide Hollow",
        },
        [194241] = {
            "Vile Rothexer",
            "Brackenhide Hollow",
            "enUS",
        },
        [229296] = {
            "Orb of Ascendance",
            "The Stonevault",
            "enUS",
        },
        [195265] = {
            "Stormcaller Arynga",
            "The Nokhud Offensive",
            "enUS",
        },
        [183495] = {
            "Twisted Worldeater",
            "Sepulcher of the First Ones",
        },
        [99200] = {
            "Dresaron",
            "Darkheart Thicket",
            "enUS",
        },
        [190404] = {
            "Subterranean Proto-Dragon",
            "Halls of Infusion",
        },
        [190405] = {
            "Infuser Sariya",
            "Halls of Infusion",
            "enUS",
        },
        [133345] = {
            "Feckless Assistant",
            "The MOTHERLODE!!",
        },
        [164562] = {
            "Depraved Houndmaster",
            "Halls of Atonement",
        },
        [183497] = {
            "Foul Controller",
            "Sepulcher of the First Ones",
        },
        [220599] = {
            "Bloodstained Webmage",
            "Ara-Kara, City of Echoes",
            "enUS",
        },
        [164563] = {
            "Vicious Gargon",
            "Halls of Atonement",
        },
        [210109] = {
            "Earth Infused Golem",
            "The Stonevault",
            "enUS",
        },
        [212412] = {
            "Sootsnout",
            "Darkflame Cleft",
            "enUS",
        },
        [190407] = {
            "Aqua Rager",
            "Halls of Infusion",
            "enUS",
        },
        [168658] = {
            "Forsworn Devastator",
            "Spires of Ascension",
        },
        [138465] = {
            "Ashvane Cannoneer",
            "Siege of Boralus",
            "enUS",
        },
        [200131] = {
            "Sha-Touched Guardian",
            "Temple of the Jade Serpent",
        },
        [200387] = {
            "Shambling Infester",
            "Temple of the Jade Serpent",
        },
        [180429] = {
            "Adorned Starseer",
            "Tazavesh, the Veiled Market",
        },
        [217531] = {
            "Ixin",
            "Ara-Kara, City of Echoes",
            "enUS",
        },
        [98691] = {
            "Risen Scout",
            "Black Rook Hold",
            "enUS",
        },
        [169428] = {
            "Wrathguard",
            "Brackenhide Hollow",
        },
        [151773] = {
            "Junkyard D.0.G.",
            "Operation: Mechagon",
        },
        [217533] = {
            "Atik",
            "Ara-Kara, City of Echoes",
            "enUS",
        },
        [164567] = {
            "Ingra Maloch",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [169429] = {
            "Shivarra",
            "Brackenhide Hollow",
        },
        [141283] = {
            "Kul Tiran Halberd",
            "Siege of Boralus",
        },
        [209090] = {
            "Tindral Sageswift",
            "Amirdrassil, the Dream's Hope",
            "enUS",
        },
        [169430] = {
            "Ur'zul",
            "Brackenhide Hollow",
        },
        [136934] = {
            "Weapons Tester",
            "The MOTHERLODE!!",
        },
        [141284] = {
            "Kul Tiran Wavetender",
            "Siege of Boralus",
        },
        [180433] = {
            "Wandering Pulsar",
            "Tazavesh, the Veiled Market",
        },
        [199368] = {
            "Hardened Crystal",
            "The Azure Vault",
            "enUS",
        },
        [214209] = {
            "Naz'jar Tempest Witch",
            "Throne of the Tides",
        },
        [189901] = {
            "Warlord Sargha",
            "Neltharus",
            "enUS",
        },
        [141285] = {
            "Kul Tiran Marksman",
            "Siege of Boralus",
        },
        [131818] = {
            "Marked Sister",
            "Waycrest Manor",
        },
        [98949] = {
            "Smashspite the Hateful",
            "Black Rook Hold",
            "enUS",
        },
        [200137] = {
            "Depraved Mistweaver",
            "Temple of the Jade Serpent",
        },
        [168153] = {
            "Plagueroc",
            "Plaguefall",
        },
        [131819] = {
            "Coven Diviner",
            "Waycrest Manor",
            "enUS",
        },
        [228540] = {
            "Nightfall Shadowmage",
            "The Dawnbreaker",
            "enUS",
        },
        [196044] = {
            "Unruly Textbook",
            "Algeth'ar Academy",
            "enUS",
        },
        [184018] = {
            "Bromach",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [100485] = {
            "Soul-torn Vanguard",
            "Black Rook Hold",
            "enUS",
        },
        [176598] = {
            "Torment Golem",
            "Torghast, Tower of the Damned",
        },
        [102788] = {
            "Felspite Dominator",
            "Black Rook Hold",
            "enUS",
        },
        [129527] = {
            "Bilge Rat Buccaneer",
            "Freehold",
        },
        [196045] = {
            "Corrupted Manafiend",
            "Algeth'ar Academy",
            "enUS",
        },
        [101637] = {
            "Valarjar Aspirant",
            "Halls of Valor",
        },
        [131821] = {
            "Faceless Maiden",
            "Waycrest Manor",
            "enUS",
        },
        [187602] = {
            "Qalashi Scaleripper",
            "10.0 Dragon Isles",
        },
        [175576] = {
            "Containment Cell",
            "Tazavesh, the Veiled Market",
        },
        [58319] = {
            "Lesser Sha",
            "Temple of the Jade Serpent",
        },
        [126969] = {
            "Trothak",
            "Freehold",
        },
        [100486] = {
            "Risen Arcanist",
            "Black Rook Hold",
            "enUS",
        },
        [44566] = {
            "Ozumat",
            "Throne of the Tides",
            "enUS",
        },
        [178392] = {
            "Gatewarden Zo'mazz",
            "Tazavesh, the Veiled Market",
        },
        [133870] = {
            "Diseased Lasher",
            "The Underrot",
        },
        [184022] = {
            "Stonevault Geomancer",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [131824] = {
            "Sister Solena",
            "Waycrest Manor",
            "enUS",
        },
        [129529] = {
            "Blacktooth Scrapper",
            "Freehold",
        },
        [184023] = {
            "Vicious Basilisk",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [131825] = {
            "Sister Briar",
            "Waycrest Manor",
            "enUS",
        },
        [178139] = {
            "Murkbrine Shellcrusher",
            "Tazavesh, the Veiled Market",
        },
        [133361] = {
            "Wasting Servant",
            "Waycrest Manor",
            "enUS",
        },
        [164578] = {
            "Stitchflesh's Creation",
            "The Necrotic Wake",
            "enUS",
        },
        [150250] = {
            "Pistonhead Blaster",
            "Operation: Mechagon",
        },
        [178141] = {
            "Murkbrine Scalebinder",
            "Tazavesh, the Veiled Market",
        },
        [137713] = {
            "Big Money Crab",
            "The MOTHERLODE!!",
        },
        [150251] = {
            "Pistonhead Mechanic",
            "Operation: Mechagon",
        },
        [178142] = {
            "Murkbrine Fishmancer",
            "Tazavesh, the Veiled Market",
        },
        [137458] = {
            "Rotting Spore",
            "The Underrot",
        },
        [199124] = {
            "Primalist Chillblaster",
            "Vault of the Incarnates",
            "enUS",
        },
        [126845] = {
            "Captain Jolly",
            "Freehold",
        },
        [131318] = {
            "Elder Leaxa",
            "The Underrot",
        },
        [168420] = {
            "Forsworn Champion",
            "Spires of Ascension",
        },
        [150253] = {
            "Weaponized Crawler",
            "Operation: Mechagon",
        },
        [168932] = {
            "Doomguard",
            "Brackenhide Hollow",
        },
        [82579] = {
            "Grom'kar Far Seer",
            "Grimrail Depot",
        },
        [129788] = {
            "Irontide Bonesaw",
            "Freehold",
        },
        [190426] = {
            "Decay Totem",
            "Brackenhide Hollow",
            "enUS",
        },
        [137716] = {
            "Bottom Feeder",
            "The MOTHERLODE!!",
        },
        [197847] = {
            "Gnawbone Splintershield",
            "10.0 Dragon Isles",
        },
        [234949] = {
            "Geargrave",
            "Sidestreet Sluice",
            "enUS",
        },
        [177889] = {
            "Mawforged Souljudge",
            "Sanctum of Domination",
        },
        [168934] = {
            "Enraged Spirit",
            "De Other Side",
        },
        [45912] = {
            "Wild Vortex",
            "The Vortex Pinnacle",
        },
        [177891] = {
            "Mawforged Summoner",
            "Sanctum of Domination",
        },
        [134137] = {
            "Temple Attendant",
            "Shrine of the Storm",
        },
        [190174] = {
            "Hypnosis Bat",
            "Operation: Mechagon",
        },
        [168425] = {
            "Forsworn Annihilator",
            "Spires of Ascension",
        },
        [168681] = {
            "Forsworn Helion",
            "Spires of Ascension",
        },
        [197595] = {
            "Earthwrought Smasher",
            "Vault of the Incarnates",
            "enUS",
        },
        [126848] = {
            "Captain Eudora",
            "Freehold",
        },
        [94224] = {
            "Petrifying Totem",
            "Neltharion's Lair",
        },
        [202969] = {
            "Empty Recollection",
            "Aberrus, the Shadowed Crucible",
            "enUS",
        },
        [134139] = {
            "Shrine Templar",
            "Shrine of the Storm",
        },
        [216275] = {
            "Brann's Epic Egg",
            "Sidestreet Sluice",
            "enUS",
        },
        [229069] = {
            "Mechadrone Sniper",
            "Operation: Floodgate",
            "enUS",
        },
        [172265] = {
            "Remnant of Fury",
            "Sanguine Depths",
        },
        [160495] = {
            "Maniacal Soulbinder",
            "Theater of Pain",
        },
        [186339] = {
            "Teera",
            "The Nokhud Offensive",
            "enUS",
        },
        [218324] = {
            "Nakt",
            "Ara-Kara, City of Echoes",
            "enUS",
        },
        [192481] = {
            "Decaying Slime",
            "Brackenhide Hollow",
            "enUS",
        },
        [81432] = {
            "Grom'kar Technician",
            "Iron Docks",
        },
        [114312] = {
            "Moroes",
            "Return to Karazhan",
        },
        [196576] = {
            "Spellbound Scepter",
            "Algeth'ar Academy",
            "enUS",
        },
        [127106] = {
            "Irontide Officer",
            "Freehold",
        },
        [168942] = {
            "Death Speaker",
            "De Other Side",
        },
        [196577] = {
            "Spellbound Battleaxe",
            "Algeth'ar Academy",
            "enUS",
        },
        [131585] = {
            "Enthralled Guard",
            "Waycrest Manor",
            "enUS",
        },
        [134144] = {
            "Living Current",
            "Shrine of the Storm",
        },
        [197857] = {
            "Gutstabber",
            "Brackenhide Hollow",
        },
        [102287] = {
            "Emberhusk Dominator",
            "Neltharion's Lair",
        },
        [131586] = {
            "Banquet Steward",
            "Waycrest Manor",
            "enUS",
        },
        [205790] = {
            "Time-Lost Smack-o-Tron",
            "Dawn of the Infinite",
            "enUS",
        },
        [101008] = {
            "Stinging Swarm",
            "Black Rook Hold",
            "enUS",
        },
        [135169] = {
            "Spirit Drain Totem",
            "The Underrot",
        },
        [131587] = {
            "Bewitched Captain",
            "Waycrest Manor",
            "enUS",
        },
        [191206] = {
            "Primalist Mage",
            "Vault of the Incarnates",
            "enUS",
        },
        [57109] = {
            "Minion of Doubt",
            "Temple of the Jade Serpent",
        },
        [40925] = {
            "Tainted Sentry",
            "Throne of the Tides",
            "enUS",
        },
        [98706] = {
            "Commander Shemdah'sohn",
            "Black Rook Hold",
            "enUS",
        },
        [86552] = {
            "Gorged Burster",
            "The Everbloom",
        },
        [231380] = {
            "Undercrawler",
            "Operation: Floodgate",
            "enUS",
        },
        [162038] = {
            "Regal Mistdancer",
            "Sanguine Depths",
        },
        [130435] = {
            "Addled Thug",
            "The MOTHERLODE!!",
        },
        [45915] = {
            "Armored Mistral",
            "The Vortex Pinnacle",
        },
        [81819] = {
            "Everbloom Naturalist",
            "The Everbloom",
            "enUS",
        },
        [184300] = {
            "Ebonstone Golem",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [162039] = {
            "Wicked Oppressor",
            "Sanguine Depths",
        },
        [170483] = {
            "Atal'ai Deathwalker's Spirit",
            "De Other Side",
        },
        [76446] = {
            "Shadowmoon Enslaver",
            "Shadowmoon Burial Grounds",
        },
        [184301] = {
            "Cavern Seeker",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [162040] = {
            "Grand Overseer",
            "Sanguine Depths",
        },
        [131847] = {
            "Waycrest Reveler",
            "Waycrest Manor",
            "enUS",
        },
        [134150] = {
            "Runecarver Sorn",
            "Shrine of the Storm",
        },
        [114316] = {
            "Baroness Dorothea Millstipe",
            "Return to Karazhan",
        },
        [81820] = {
            "Everbloom Mender",
            "The Everbloom",
            "enUS",
        },
        [213216] = {
            "Speaker Dorlita",
            "The Stonevault",
            "enUS",
        },
        [224219] = {
            "Twilight Earthcaller",
            "Grim Batol",
            "enUS",
        },
        [224731] = {
            "Web Marauder",
            "City of Threads",
            "enUS",
        },
        [184303] = {
            "Skittering Crawler",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [213217] = {
            "Speaker Brokk",
            "The Stonevault",
            "enUS",
        },
        [156157] = {
            "Coldheart Ascendant",
            "Torghast, Tower of the Damned",
        },
        [131849] = {
            "Crazed Marksman",
            "Waycrest Manor",
            "enUS",
        },
        [95766] = {
            "Crazed Razorbeak",
            "Darkheart Thicket",
            "enUS",
        },
        [114317] = {
            "Lady Catriona Von'Indi",
            "Return to Karazhan",
        },
        [224732] = {
            "Covert Webmancer",
            "City of Threads",
            "enUS",
        },
        [231385] = {
            "Darkfuse Inspector",
            "Operation: Floodgate",
            "enUS",
        },
        [127111] = {
            "Irontide Oarsman",
            "Freehold",
        },
        [131850] = {
            "Maddened Survivalist",
            "Waycrest Manor",
            "enUS",
        },
        [191469] = {
            "Streamside Scythid",
            "10.0 Dragon Isles",
        },
        [98965] = {
            "Kur'talos Ravencrest",
            "Black Rook Hold",
            "enUS",
        },
        [175861] = {
            "Glacial Spike",
            "Sanctum of Domination",
        },
        [83613] = {
            "Koramar",
            "Iron Docks",
        },
        [178165] = {
            "Coastwalker Goliath",
            "Tazavesh, the Veiled Market",
        },
        [199659] = {
            "Warlord Kagni",
            "Aberrus, the Shadowed Crucible",
            "enUS",
        },
        [86684] = {
            "Feral Lasher",
            "The Everbloom",
            "enUS",
        },
        [212453] = {
            "Ghastly Voidsoul",
            "The Stonevault",
            "enUS",
        },
        [166396] = {
            "Noble Skirmisher",
            "Sanguine Depths",
        },
        [150276] = {
            "Heavy Scrapbot",
            "Operation: Mechagon",
        },
        [164861] = {
            "Spriggan Barkbinder",
            "De Other Side",
        },
        [114319] = {
            "Lady Keira Berrybuck",
            "Return to Karazhan",
        },
        [162047] = {
            "Insatiable Brute",
            "Sanguine Depths",
        },
        [96664] = {
            "Valarjar Runecarver",
            "Halls of Valor",
        },
        [134157] = {
            "Shadow-Borne Warrior",
            "Kings' Rest",
        },
        [216293] = {
            "Trilling Attendant",
            "Ara-Kara, City of Echoes",
            "enUS",
        },
        [56792] = {
            "Figment of Doubt",
            "Temple of the Jade Serpent",
        },
        [239834] = {
            "Taener Duelmal",
            "Priory of the Sacred Flame",
        },
        [234205] = {
            "Corruption Parasite",
            "Excavation Site 9",
            "enUS",
        },
        [95769] = {
            "Mindshattered Screecher",
            "Darkheart Thicket",
            "enUS",
        },
        [171772] = {
            "Mistveil Defender",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [155908] = {
            "Deathspeaker",
            "Torghast, Tower of the Damned",
        },
        [168446] = {
            "Skeletal Monstrosity",
            "The Necrotic Wake",
        },
        [174843] = {
            "Stoneborn Maitre D'",
            "Castle Nathria",
        },
        [205804] = {
            "Risen Dragon",
            "Dawn of the Infinite",
            "enUS",
        },
        [84767] = {
            "Twisted Abomination",
            "The Everbloom",
            "enUS",
        },
        [180473] = {
            "Unstoppable Abomination",
            "Sanctum of Domination",
        },
        [231904] = {
            "Punchy Thug",
            "Sidestreet Sluice",
            "enUS",
        },
        [234207] = {
            "Tainted Feaster",
            "Excavation Site 9",
            "enUS",
        },
        [214761] = {
            "Nightfall Ritualist",
            "The Dawnbreaker",
            "enUS",
        },
        [178171] = {
            "Stormforged Guardian",
            "Tazavesh, the Veiled Market",
        },
        [180474] = {
            "Soul Reaver",
            "Sanctum of Domination",
        },
        [131858] = {
            "Thornguard",
            "Waycrest Manor",
            "enUS",
        },
        [138255] = {
            "Ashvane Spotter",
            "Siege of Boralus",
            "enUS",
        },
        [134417] = {
            "Deepsea Ritualist",
            "Shrine of the Storm",
        },
        [208365] = {
            "Aerwynn",
            "Amirdrassil, the Dream's Hope",
            "enUS",
        },
        [214762] = {
            "Nightfall Commander",
            "The Dawnbreaker",
            "enUS",
        },
        [182778] = {
            "Collapsing Quasar",
            "Sepulcher of the First Ones",
        },
        [234209] = {
            "Coagulated Mass",
            "Excavation Site 9",
            "enUS",
        },
        [95771] = {
            "Dreadsoul Ruiner",
            "Darkheart Thicket",
            "enUS",
        },
        [206063] = {
            "Temporal Deviation",
            "Dawn of the Infinite",
            "enUS",
        },
        [59544] = {
            "The Nodding Tiger",
            "Temple of the Jade Serpent",
        },
        [234210] = {
            "Silent Slitherer",
            "Excavation Site 9",
            "enUS",
        },
        [129547] = {
            "Blacktooth Knuckleduster",
            "Freehold",
        },
        [206064] = {
            "Coalesced Moment",
            "Dawn of the Infinite",
            "enUS",
        },
        [208367] = {
            "Pip",
            "Amirdrassil, the Dream's Hope",
            "enUS",
        },
        [231908] = {
            "Bopper Bot",
            "Sidestreet Sluice",
            "enUS",
        },
        [95772] = {
            "Frenzied Nightclaw",
            "Darkheart Thicket",
            "enUS",
        },
        [206065] = {
            "Interval",
            "Dawn of the Infinite",
            "enUS",
        },
        [186107] = {
            "Vault Keeper",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [231909] = {
            "Underpaid Brute",
            "Sidestreet Sluice",
            "enUS",
        },
        [129548] = {
            "Blacktooth Brute",
            "Freehold",
        },
        [206066] = {
            "Timestream Leech",
            "Dawn of the Infinite",
            "enUS",
        },
        [127757] = {
            "Reanimated Honor Guard",
            "Atal'Dazar",
            "enUS",
        },
        [231910] = {
            "Masked Freelancer",
            "Sidestreet Sluice",
            "enUS",
        },
        [131863] = {
            "Raal the Gluttonous",
            "Waycrest Manor",
            "enUS",
        },
        [104217] = {
            "Talixae Flamewreath",
            "Court of Stars",
        },
        [162057] = {
            "Chamber Sentinel",
            "Sanguine Depths",
        },
        [59545] = {
            "The Golden Beetle",
            "Temple of the Jade Serpent",
        },
        [131864] = {
            "Gorak Tul",
            "Waycrest Manor",
            "enUS",
        },
        [136214] = {
            "Windspeaker Heldis",
            "Shrine of the Storm",
        },
        [206068] = {
            "Temporal Fusion",
            "Dawn of the Infinite",
            "enUS",
        },
        [107288] = {
            "Vilethorn Sapling",
            "Darkheart Thicket",
            "enUS",
        },
        [80805] = {
            "Makogg Emberblade",
            "Iron Docks",
        },
        [184319] = {
            "Refti Custodian",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [133912] = {
            "Bloodsworn Defiler",
            "The Underrot",
        },
        [164873] = {
            "Runestag Elderhorn",
            "De Other Side",
        },
        [43873] = {
            "Altairus",
            "The Vortex Pinnacle",
        },
        [82597] = {
            "Grom'kar Captain",
            "Grimrail Depot",
        },
        [190206] = {
            "Primalist Flamedancer",
            "Ruby Life Pools",
            "enUS",
        },
        [191230] = {
            "Dragonspawn Flamebender",
            "Vault of the Incarnates",
            "enUS",
        },
        [218865] = {
            "Bee-let",
            "Cinderbrew Meadery",
        },
        [59546] = {
            "The Talking Fish",
            "Temple of the Jade Serpent",
        },
        [80935] = {
            "Grom'kar Boomer",
            "Grimrail Depot",
        },
        [192767] = {
            "Primal Icebulk",
            "Vault of the Incarnates",
            "enUS",
        },
        [150292] = {
            "Mechagon Cavalry",
            "Operation: Mechagon",
        },
        [224240] = {
            "Twilight Flamerender",
            "Grim Batol",
            "enUS",
        },
        [163086] = {
            "Rancid Gasbag",
            "Theater of Pain",
        },
        [184580] = {
            "Olaf",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [129552] = {
            "Monzumi",
            "Atal'Dazar",
            "enUS",
        },
        [206074] = {
            "Pendule",
            "Dawn of the Infinite",
            "enUS",
        },
        [80808] = {
            "Neesa Nox",
            "Iron Docks",
        },
        [80936] = {
            "Grom'kar Grenadier",
            "Grimrail Depot",
        },
        [184581] = {
            "Baelog",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [168717] = {
            "Forsworn Justicar",
            "Spires of Ascension",
        },
        [134174] = {
            "Shadow-Borne Witch Doctor",
            "Kings' Rest",
        },
        [114584] = {
            "Phantom Crew",
            "Return to Karazhan",
        },
        [184582] = {
            "Eric \"The Swift\"",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [59547] = {
            "Jiang",
            "Temple of the Jade Serpent",
        },
        [168718] = {
            "Forsworn Warden",
            "Spires of Ascension",
        },
        [129553] = {
            "Dinomancer Kish'o",
            "Atal'Dazar",
            "enUS",
        },
        [214264] = {
            "Cursedforge Honor Guard",
            "The Stonevault",
            "enUS",
        },
        [222964] = {
            "Flavor Scientist",
            "Cinderbrew Meadery",
            "enUS",
        },
        [80937] = {
            "Grom'kar Gunner",
            "Grimrail Depot",
        },
        [176395] = {
            "Overloaded Mailemental",
            "Tazavesh, the Veiled Market",
        },
        [77483] = {
            "Grom'kar Gunner",
            "Grimrail Depot",
        },
        [176396] = {
            "Defective Sorter",
            "Tazavesh, the Veiled Market",
        },
        [150297] = {
            "Mechagon Renormalizer",
            "Operation: Mechagon",
        },
        [84520] = {
            "Pitwarden Gwarnok",
            "Iron Docks",
        },
        [186120] = {
            "Treemouth",
            "Brackenhide Hollow",
            "enUS",
        },
        [80938] = {
            "Grom'kar Hulk",
            "Grimrail Depot",
        },
        [95779] = {
            "Festerhide Grizzly",
            "Darkheart Thicket",
            "enUS",
        },
        [186121] = {
            "Decatriarch Wratheye",
            "Brackenhide Hollow",
            "enUS",
        },
        [186122] = {
            "Rira Hackclaw",
            "Brackenhide Hollow",
            "enUS",
        },
        [184331] = {
            "Infinite Timereaver",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [153882] = {
            "Deadsoul Spirit",
            "Torghast, Tower of the Damned",
        },
        [193799] = {
            "Rotchanting Totem",
            "Brackenhide Hollow",
        },
        [196102] = {
            "Conjured Lasher",
            "The Azure Vault",
            "enUS",
        },
        [167956] = {
            "Dark Acolyte",
            "Sanguine Depths",
        },
        [224249] = {
            "Twilight Lavabender",
            "Grim Batol",
            "enUS",
        },
        [189706] = {
            "Chaotic Essence",
            "Castle Nathria",
        },
        [151325] = {
            "Alarm-o-Bot",
            "Operation: Mechagon",
        },
        [180495] = {
            "Enraged Direhorn",
            "Tazavesh, the Veiled Market",
        },
        [223994] = {
            "Nightfall Shadowmage",
            "The Dawnbreaker",
            "enUS",
        },
        [186125] = {
            "Tricktotem",
            "Brackenhide Hollow",
            "enUS",
        },
        [165911] = {
            "Loyal Creation",
            "The Necrotic Wake",
            "enUS",
        },
        [201222] = {
            "Valow, Timesworn Keeper",
            "Dawn of the Infinite",
            "enUS",
        },
        [184335] = {
            "Infinite Agent",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [201223] = {
            "Infinite Twilight Magus",
            "Dawn of the Infinite",
            "enUS",
        },
        [193291] = {
            "Apex Blazewing",
            "Neltharus",
            "enUS",
        },
        [220158] = {
            "Under-Lord Vik'tis",
            "The Dread Pit",
        },
        [45924] = {
            "Turbulent Squall",
            "The Vortex Pinnacle",
        },
        [194315] = {
            "Stormcaller Solongo",
            "The Nokhud Offensive",
            "enUS",
        },
        [165913] = {
            "Ghastly Parishioner",
            "Halls of Atonement",
        },
        [137511] = {
            "Bilge Rat Cutthroat",
            "Siege of Boralus",
            "enUS",
        },
        [40167] = {
            "Twilight Beguiler",
            "Grim Batol",
            "enUS",
        },
        [96934] = {
            "Valarjar Trapper",
            "Halls of Valor",
        },
        [171799] = {
            "Depths Warden",
            "Sanguine Depths",
        },
        [231930] = {
            "Obedient-ish Predator",
            "Sidestreet Sluice",
            "enUS",
        },
        [193293] = {
            "Qalashi Warden",
            "Neltharus",
            "enUS",
        },
        [114334] = {
            "Damaged Golem",
            "Return to Karazhan",
        },
        [40935] = {
            "Gilgoblin Hunter",
            "Throne of the Tides",
            "enUS",
        },
        [138281] = {
            "Faceless Corruptor",
            "The Underrot",
        },
        [45477] = {
            "Gust Soldier",
            "The Vortex Pinnacle",
        },
        [125977] = {
            "Reanimation Totem",
            "Atal'Dazar",
            "enUS",
        },
        [187154] = {
            "Unstable Curator",
            "The Azure Vault",
            "enUS",
        },
        [167964] = {
            "4.RF-4.RF",
            "De Other Side",
        },
        [187155] = {
            "Rune Seal Keeper",
            "The Azure Vault",
            "enUS",
        },
        [195855] = {
            "Risen Warrior",
            "The Nokhud Offensive",
            "enUS",
        },
        [134701] = {
            "Blood Effigy",
            "The Underrot",
        },
        [218884] = {
            "Shattershell Scarab",
            "Nerub-ar Palace",
            "enUS",
        },
        [167965] = {
            "Lubricator",
            "De Other Side",
        },
        [186644] = {
            "Leymor",
            "The Azure Vault",
            "enUS",
        },
        [216326] = {
            "Ascended Neophyte",
            "City of Threads",
            "enUS",
        },
        [40936] = {
            "Faceless Watcher",
            "Throne of the Tides",
            "enUS",
        },
        [165919] = {
            "Skeletal Marauder",
            "The Necrotic Wake",
            "enUS",
        },
        [137517] = {
            "Ashvane Destroyer",
            "Siege of Boralus",
            "enUS",
        },
        [197904] = {
            "Spellbound Battleaxe",
            "Algeth'ar Academy",
        },
        [115488] = {
            "Infused Pyromancer",
            "Return to Karazhan",
        },
        [171805] = {
            "Research Scribe",
            "Sanguine Depths",
        },
        [167967] = {
            "Sentient Oil",
            "De Other Side",
        },
        [192787] = {
            "Qalashi Spinecrusher",
            "Neltharus",
            "enUS",
        },
        [197905] = {
            "Spellbound Scepter",
            "Algeth'ar Academy",
        },
        [163618] = {
            "Zolramus Necromancer",
            "The Necrotic Wake",
            "enUS",
        },
        [192788] = {
            "Qalashi Thaumaturge",
            "Neltharus",
            "enUS",
        },
        [205326] = {
            "Gust Soldier",
            "The Vortex Pinnacle",
        },
        [84400] = {
            "Flourishing Ancient",
            "The Everbloom",
            "enUS",
        },
        [168992] = {
            "Risen Cultist",
            "De Other Side",
        },
        [220423] = {
            "Retired Lord Vul'azak",
            "City of Threads",
            "enUS",
        },
        [196115] = {
            "Arcane Tender",
            "The Azure Vault",
            "enUS",
        },
        [192789] = {
            "Nokhud Longbow",
            "The Nokhud Offensive",
            "enUS",
        },
        [187160] = {
            "Crystal Fury",
            "The Azure Vault",
            "enUS",
        },
        [114338] = {
            "Mana Confluence",
            "Return to Karazhan",
        },
        [196116] = {
            "Crystal Fury",
            "The Azure Vault",
            "enUS",
        },
        [163620] = {
            "Rotspew",
            "The Necrotic Wake",
            "enUS",
        },
        [135474] = {
            "Thistle Acolyte",
            "Waycrest Manor",
            "enUS",
        },
        [59552] = {
            "The Crybaby Hozen",
            "Temple of the Jade Serpent",
        },
        [189464] = {
            "Qalashi Irontorch",
            "Neltharus",
            "enUS",
        },
        [206352] = {
            "Alliance Archer",
            "Dawn of the Infinite",
            "enUS",
        },
        [163621] = {
            "Goregrind",
            "The Necrotic Wake",
            "enUS",
        },
        [182045] = {
            "Necrotic Ritualist",
            "Sepulcher of the First Ones",
        },
        [198933] = {
            "Iridikron",
            "Dawn of the Infinite",
            "enUS",
        },
        [133685] = {
            "Befouled Spirit",
            "The Underrot",
        },
        [189466] = {
            "Irontorch Commander",
            "Neltharus",
            "enUS",
        },
        [189722] = {
            "Gulping Goliath",
            "Halls of Infusion",
            "enUS",
        },
        [165414] = {
            "Depraved Obliterator",
            "Halls of Atonement",
        },
        [133430] = {
            "Venture Co. Mastermind",
            "The MOTHERLODE!!",
        },
        [135989] = {
            "Shieldbearer of Zul",
            "Atal'Dazar",
            "enUS",
        },
        [189467] = {
            "Qalashi Bonesplitter",
            "Neltharus",
            "enUS",
        },
        [83763] = {
            "Grom'kar Technician",
            "Iron Docks",
        },
        [213008] = {
            "Wriggling Darkspawn",
            "Darkflame Cleft",
            "enUS",
        },
        [59553] = {
            "The Songbird Queen",
            "Temple of the Jade Serpent",
        },
        [199703] = {
            "Magma Mystic",
            "Aberrus, the Shadowed Crucible",
            "enUS",
        },
        [97197] = {
            "Valarjar Purifier",
            "Halls of Valor",
        },
        [133432] = {
            "Venture Co. Alchemist",
            "The MOTHERLODE!!",
        },
        [45928] = {
            "Executor of the Caliph",
            "The Vortex Pinnacle",
        },
        [83892] = {
            "Life Warden Gola",
            "The Everbloom",
            "enUS",
        },
        [163882] = {
            "Decaying Flesh Giant",
            "Plaguefall",
        },
        [192796] = {
            "Nokhud Hornsounder",
            "The Nokhud Offensive",
            "enUS",
        },
        [189470] = {
            "Lava Flare",
            "Neltharus",
            "enUS",
        },
        [188703] = {
            "Protoform Barrier",
            "Castle Nathria",
        },
        [189471] = {
            "Qalashi Blacksmith",
            "Neltharus",
            "enUS",
        },
        [189727] = {
            "Khajin the Unyielding",
            "Halls of Infusion",
            "enUS",
        },
        [83765] = {
            "Grom'kar Footsoldier",
            "Iron Docks",
        },
        [83893] = {
            "Earthshaper Telu",
            "The Everbloom",
            "enUS",
        },
        [189472] = {
            "Qalashi Lavabearer",
            "Neltharus",
            "enUS",
        },
        [216339] = {
            "Sureki Unnaturaler",
            "City of Threads",
            "enUS",
        },
        [89011] = {
            "Rylak Skyterror",
            "Iron Docks",
        },
        [210966] = {
            "Sureki Webmage",
            "The Dawnbreaker",
            "enUS",
        },
        [133436] = {
            "Venture Co. Skyscorcher",
            "The MOTHERLODE!!",
        },
        [205337] = {
            "Infinite Timebender",
            "Dawn of the Infinite",
            "enUS",
        },
        [168747] = {
            "Venomfang",
            "Plaguefall",
        },
        [216340] = {
            "Sentry Stagshell",
            "Ara-Kara, City of Echoes",
            "enUS",
        },
        [83894] = {
            "Dulhu",
            "The Everbloom",
            "enUS",
        },
        [192800] = {
            "Nokhud Lancemaster",
            "The Nokhud Offensive",
            "enUS",
        },
        [197406] = {
            "Aggravated Skitterfly",
            "Algeth'ar Academy",
            "enUS",
        },
        [201756] = {
            "Whiiskeyz",
            "Dawn of the Infinite",
            "enUS",
        },
        [216342] = {
            "Skittering Assistant",
            "City of Threads",
            "enUS",
        },
        [230927] = {
            "Darkfuse Shredder Pilot",
            "Operation: Floodgate",
            "enUS",
        },
        [100527] = {
            "Dreadfire Imp",
            "Darkheart Thicket",
            "enUS",
        },
        [59555] = {
            "Haunting Sha",
            "Temple of the Jade Serpent",
        },
        [163121] = {
            "Stitched Vanguard",
            "The Necrotic Wake",
            "enUS",
        },
        [45930] = {
            "Minister of Air",
            "The Vortex Pinnacle",
        },
        [186151] = {
            "Balakar Khan",
            "The Nokhud Offensive",
            "enUS",
        },
        [223253] = {
            "Bloodstained Webmage",
            "Ara-Kara, City of Echoes",
            "enUS",
        },
        [162099] = {
            "General Kaal",
            "Sanguine Depths",
        },
        [189478] = {
            "Forgemaster Gorek",
            "Neltharus",
            "enUS",
        },
        [97202] = {
            "Olmyr the Enlightened",
            "Halls of Valor",
        },
        [163891] = {
            "Rotmarrow Slime",
            "Plaguefall",
        },
        [186664] = {
            "Stonevault Ambusher",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [195876] = {
            "Desecrated Ohuna",
            "The Nokhud Offensive",
            "enUS",
        },
        [135234] = {
            "Diseased Mastiff",
            "Waycrest Manor",
            "enUS",
        },
        [238608] = {
            "Trained Scrounger",
            "Sidestreet Sluice",
            "enUS",
        },
        [195877] = {
            "Risen Mystic",
            "The Nokhud Offensive",
            "enUS",
        },
        [103344] = {
            "Oakheart",
            "Darkheart Thicket",
            "enUS",
        },
        [135235] = {
            "Spectral Beastmaster",
            "Kings' Rest",
        },
        [195878] = {
            "Ukhel Beastcaller",
            "The Nokhud Offensive",
            "enUS",
        },
        [163894] = {
            "Blighted Spinebreaker",
            "Plaguefall",
        },
        [162103] = {
            "Executor Tarvold",
            "Sanguine Depths",
        },
        [199717] = {
            "Nokhud Defender",
            "The Nokhud Offensive",
            "enUS",
        },
        [165430] = {
            "Malignant Spawn",
            "Plaguefall",
        },
        [180015] = {
            "Burly Deckhand",
            "Tazavesh, the Veiled Market",
        },
        [223770] = {
            "Blazing Fiend",
            "Darkflame Cleft",
        },
        [136005] = {
            "Rowdy Reveler",
            "The MOTHERLODE!!",
        },
        [197671] = {
            "Volatile Infuser",
            "Vault of the Incarnates",
            "enUS",
        },
        [163128] = {
            "Zolramus Sorcerer",
            "The Necrotic Wake",
            "enUS",
        },
        [100531] = {
            "Bloodtainted Fury",
            "Darkheart Thicket",
            "enUS",
        },
        [136006] = {
            "Rowdy Reveler",
            "The MOTHERLODE!!",
        },
        [164920] = {
            "Drust Soulcleaver",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [135239] = {
            "Spectral Witch Doctor",
            "Kings' Rest",
        },
        [223772] = {
            "Blazing Fiend",
            "Darkflame Cleft",
        },
        [164921] = {
            "Drust Harvester",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [45932] = {
            "Skyfall Star",
            "The Vortex Pinnacle",
        },
        [135240] = {
            "Soul Essence",
            "Waycrest Manor",
            "enUS",
        },
        [100532] = {
            "Bloodtainted Burster",
            "Darkheart Thicket",
            "enUS",
        },
        [223773] = {
            "Blazing Fiend",
            "Darkflame Cleft",
        },
        [166969] = {
            "Baroness Frieda",
            "Castle Nathria",
        },
        [208165] = {
            "Alliance Knight",
            "Dawn of the Infinite",
            "enUS",
        },
        [177716] = {
            "So' Cartel Assassin",
            "Tazavesh, the Veiled Market",
        },
        [135241] = {
            "Bilge Rat Pillager",
            "Siege of Boralus",
            "enUS",
        },
        [83389] = {
            "Ironwing Flamespitter",
            "Iron Docks",
        },
        [166970] = {
            "Lord Stavros",
            "Castle Nathria",
        },
        [40943] = {
            "Gilgoblin Aquamage",
            "Throne of the Tides",
            "enUS",
        },
        [223775] = {
            "Blazing Fiend",
            "Darkflame Cleft",
        },
        [189232] = {
            "Kokia Blazehoof",
            "Ruby Life Pools",
            "enUS",
        },
        [166971] = {
            "Castellan Niklaus",
            "Castle Nathria",
        },
        [152898] = {
            "Deadsoul Chorus",
            "Torghast, Tower of the Damned",
        },
        [223776] = {
            "Blazing Fiend",
            "Darkflame Cleft",
            "enUS",
        },
        [83390] = {
            "Thunderlord Wrangler",
            "Iron Docks",
        },
        [231197] = {
            "Bubbles",
            "Operation: Floodgate",
            "enUS",
        },
        [195119] = {
            "Primalist Shockcaster",
            "Ruby Life Pools",
            "enUS",
        },
        [189234] = {
            "Frostbreath Arachnid",
            "Vault of the Incarnates",
            "enUS",
        },
        [220195] = {
            "Sureki Silkbinder",
            "City of Threads",
            "enUS",
        },
        [212775] = {
            "Faceless Seer",
            "Throne of the Tides",
            "enUS",
        },
        [186420] = {
            "Earthen Weaver",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [189235] = {
            "Overseer Lahar",
            "Neltharus",
            "enUS",
        },
        [220196] = {
            "Herald of Ansurek",
            "City of Threads",
            "enUS",
        },
        [75459] = {
            "Plagued Bat",
            "Shadowmoon Burial Grounds",
        },
        [134990] = {
            "Charged Dust Devil",
            "Temple of Sethraliss",
        },
        [167998] = {
            "Portal Guardian",
            "Theater of Pain",
        },
        [138061] = {
            "Venture Co. Longshoreman",
            "The MOTHERLODE!!",
        },
        [220197] = {
            "Royal Swarmguard",
            "City of Threads",
            "enUS",
        },
        [95674] = {
            "Fenryr",
            "Halls of Valor",
        },
        [164929] = {
            "Tirnenn Villager",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [104246] = {
            "Duskwatch Guard",
            "Court of Stars",
        },
        [212778] = {
            "Minion of Ghur'sha",
            "Throne of the Tides",
            "enUS",
        },
        [81985] = {
            "Everbloom Cultivator",
            "The Everbloom",
            "enUS",
        },
        [131666] = {
            "Coven Thornshaper",
            "Waycrest Manor",
            "enUS",
        },
        [138063] = {
            "Posh Vacationer",
            "The MOTHERLODE!!",
        },
        [185656] = {
            "Filth Caller",
            "Brackenhide Hollow",
            "enUS",
        },
        [131667] = {
            "Soulbound Goliath",
            "Waycrest Manor",
            "enUS",
        },
        [187192] = {
            "Rageclaw",
            "Brackenhide Hollow",
            "enUS",
        },
        [65317] = {
            "Xiang",
            "Temple of the Jade Serpent",
        },
        [152905] = {
            "Tower Sentinel",
            "Torghast, Tower of the Damned",
        },
        [104247] = {
            "Duskwatch Arcanist",
            "Court of Stars",
        },
        [97083] = {
            "King Ranulf",
            "Halls of Valor",
        },
        [131669] = {
            "Jagged Hound",
            "Waycrest Manor",
            "enUS",
        },
        [176959] = {
            "Mawsworn Soulmage",
            "Sanctum of Domination",
        },
        [45935] = {
            "Temple Adept",
            "The Vortex Pinnacle",
        },
        [131670] = {
            "Heartsbane Vinetwister",
            "Waycrest Manor",
        },
        [213806] = {
            "Splotch",
            "Throne of the Tides",
            "enUS",
        },
        [167493] = {
            "Venomous Sniper",
            "Plaguefall",
        },
        [184125] = {
            "Chrono-Lord Deios",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [205363] = {
            "Time-Lost Waveshaper",
            "Dawn of the Infinite",
            "enUS",
        },
        [100539] = {
            "Taintheart Deadeye",
            "Darkheart Thicket",
            "enUS",
        },
        [168007] = {
            "Empowered Mawsworn Soulbinder",
            "Torghast, Tower of the Damned",
        },
        [179010] = {
            "Fatespawn Anomaly",
            "Sanctum of Domination",
        },
        [134232] = {
            "Hired Assassin",
            "The MOTHERLODE!!",
        },
        [218671] = {
            "Venture Co. Pyromaniac",
            "Cinderbrew Meadery",
            "enUS",
        },
        [212786] = {
            "Voidrider",
            "The Rookery",
            "enUS",
        },
        [205366] = {
            "Time-Lost Wakethrasher",
            "Dawn of the Infinite",
            "enUS",
        },
        [214066] = {
            "Cursedforge Stoneshaper",
            "The Stonevault",
            "enUS",
        },
        [115765] = {
            "Abstract Nullifier",
            "Return to Karazhan",
        },
        [189247] = {
            "Tamed Phoenix",
            "Neltharus",
            "enUS",
        },
        [104251] = {
            "Duskwatch Sentry",
            "Court of Stars",
        },
        [184130] = {
            "Earthen Custodian",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [98366] = {
            "Ghostly Retainer",
            "Black Rook Hold",
            "enUS",
        },
        [41139] = {
            "Naz'jar Oracle",
            "Throne of the Tides",
        },
        [179269] = {
            "Oasis Security",
            "Tazavesh, the Veiled Market",
        },
        [187969] = {
            "Flashfrost Earthshaper",
            "Ruby Life Pools",
            "enUS",
        },
        [184131] = {
            "Earthen Guardian",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [101437] = {
            "Burning Geode",
            "Neltharion's Lair",
        },
        [131677] = {
            "Heartsbane Runeweaver",
            "Waycrest Manor",
            "enUS",
        },
        [165197] = {
            "Skeletal Monstrosity",
            "The Necrotic Wake",
            "enUS",
        },
        [208440] = {
            "Infinite Slayer",
            "Dawn of the Infinite",
            "enUS",
        },
        [184132] = {
            "Earthen Warder",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [195135] = {
            "Bracken Warscourge",
            "Brackenhide Hollow",
        },
        [92610] = {
            "Understone Drummer",
            "Neltharion's Lair",
        },
        [84550] = {
            "Xeri'tac",
            "The Everbloom",
        },
        [101438] = {
            "Vileshard Chunk",
            "Neltharion's Lair",
        },
        [170572] = {
            "Atal'ai Hoodoo Hexxer",
            "De Other Side",
        },
        [228144] = {
            "Darkfuse Soldier",
            "Operation: Floodgate",
            "enUS",
        },
        [136541] = {
            "Bile Oozeling",
            "Waycrest Manor",
            "enUS",
        },
        [208698] = {
            "Infinite Riftmage",
            "Dawn of the Infinite",
            "enUS",
        },
        [98368] = {
            "Ghostly Protector",
            "Black Rook Hold",
            "enUS",
        },
        [75979] = {
            "Exhumed Spirit",
            "Shadowmoon Burial Grounds",
        },
        [156244] = {
            "Winged Automaton",
            "Torghast, Tower of the Damned",
        },
        [201790] = {
            "Loszkeleth",
            "Dawn of the Infinite",
            "enUS",
        },
        [171341] = {
            "Bladebeak Hatchling",
            "De Other Side",
        },
        [151127] = {
            "Lord of Torment",
            "Torghast, Tower of the Damned",
        },
        [135007] = {
            "Orb Guardian",
            "Temple of Sethraliss",
        },
        [135263] = {
            "Ashvane Spotter",
            "Siege of Boralus",
            "enUS",
        },
        [156245] = {
            "Grand Automaton",
            "Torghast, Tower of the Damned",
        },
        [128434] = {
            "Feasting Skyscreamer",
            "Atal'Dazar",
            "enUS",
        },
        [197697] = {
            "Flamegullet",
            "Ruby Life Pools",
            "enUS",
        },
        [223541] = {
            "Stolen Loader",
            "Fungal Folly",
            "enUS",
        },
        [199233] = {
            "Flamescale Captain",
            "Vault of the Incarnates",
            "enUS",
        },
        [92612] = {
            "Mightstone Breaker",
            "Neltharion's Lair",
        },
        [197698] = {
            "Thunderhead",
            "Ruby Life Pools",
            "enUS",
        },
        [171343] = {
            "Bladebeak Matriarch",
            "De Other Side",
        },
        [208445] = {
            "Larodar, Keeper of the Flame",
            "Amirdrassil, the Dream's Hope",
            "enUS",
        },
        [186696] = {
            "Quaking Totem",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [128435] = {
            "Toxic Saurid",
            "Atal'Dazar",
            "enUS",
        },
        [98370] = {
            "Ghostly Councilor",
            "Black Rook Hold",
            "enUS",
        },
        [162133] = {
            "General Kaal",
            "Sanguine Depths",
        },
        [176974] = {
            "Soul Reaver",
            "Sanctum of Domination",
        },
        [163157] = {
            "Amarth",
            "The Necrotic Wake",
            "enUS",
        },
        [97219] = {
            "Solsten",
            "Halls of Valor",
        },
        [131685] = {
            "Runic Disciple",
            "Waycrest Manor",
            "enUS",
        },
        [138338] = {
            "Reanimated Guardian",
            "The Underrot",
        },
        [157017] = {
            "Lithic Watcher",
            "Torghast, Tower of the Damned",
        },
        [220730] = {
            "Royal Venomshell",
            "City of Threads",
            "enUS",
        },
        [98243] = {
            "Soul-Torn Champion",
            "Black Rook Hold",
            "enUS",
        },
        [211263] = {
            "Deathscreamer Iken'tak",
            "The Dawnbreaker",
            "enUS",
        },
        [184908] = {
            "Vy Interceptor",
            "The Necrotic Wake",
        },
        [195399] = {
            "Curious Swoglet",
            "Halls of Infusion",
            "enUS",
        },
        [84554] = {
            "Venom-Crazed Pale One",
            "The Everbloom",
        },
        [44404] = {
            "Naz'jar Frost Witch",
            "Throne of the Tides",
            "enUS",
        },
        [136549] = {
            "Ashvane Cannoneer",
            "Siege of Boralus",
            "enUS",
        },
        [231223] = {
            "Disturbed Kelp",
            "Operation: Floodgate",
            "enUS",
        },
        [184910] = {
            "Wo Drifter",
            "The Necrotic Wake",
        },
        [207939] = {
            "Baron Braunpyke",
            "Priory of the Sacred Flame",
            "enUS",
        },
        [115388] = {
            "King",
            "Return to Karazhan",
        },
        [164185] = {
            "Echelon",
            "Halls of Atonement",
        },
        [184911] = {
            "Urh Dismantler",
            "The Necrotic Wake",
        },
        [130485] = {
            "Mechanized Peacekeeper",
            "The MOTHERLODE!!",
        },
        [136295] = {
            "Sunken Denizen",
            "Shrine of the Storm",
        },
        [186191] = {
            "Decay Speaker",
            "Brackenhide Hollow",
            "enUS",
        },
        [107073] = {
            "Duskwatch Reinforcement",
            "Court of Stars",
        },
        [185680] = {
            "Vy Relic",
            "The Necrotic Wake",
        },
        [127799] = {
            "Dazar'ai Honor Guard",
            "Atal'Dazar",
            "enUS",
        },
        [192333] = {
            "Alpha Eagle",
            "Algeth'ar Academy",
            "enUS",
        },
        [151649] = {
            "Defense Bot Mk I",
            "Operation: Mechagon",
        },
        [133482] = {
            "Crawler Mine",
            "The MOTHERLODE!!",
        },
        [234553] = {
            "Dark Walker",
            "Excavation Site 9",
            "enUS",
        },
        [208198] = {
            "Whiiskeyz",
            "Scarlet Monastery",
        },
        [173655] = {
            "Mistveil Matriarch",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [131436] = {
            "Chosen Blood Matron",
            "The Underrot",
        },
        [221760] = {
            "Risen Mage",
            "Priory of the Sacred Flame",
            "enUS",
        },
        [134251] = {
            "Seneschal M'bara",
            "Kings' Rest",
        },
        [194894] = {
            "Primalist Stormspeaker",
            "The Nokhud Offensive",
            "enUS",
        },
        [189265] = {
            "Qalashi Bonetender",
            "Neltharus",
            "enUS",
        },
        [185683] = {
            "Wo Relic",
            "The Necrotic Wake",
        },
        [208456] = {
            "Shuffling Horror",
            "Darkflame Cleft",
            "enUS",
        },
        [194895] = {
            "Unstable Squall",
            "The Nokhud Offensive",
            "enUS",
        },
        [189266] = {
            "Qalashi Trainee",
            "Neltharus",
            "enUS",
        },
        [190034] = {
            "Blazebound Destroyer",
            "Ruby Life Pools",
            "enUS",
        },
        [178008] = {
            "Decrepit Orb",
            "Sanctum of Domination",
        },
        [194896] = {
            "Primal Stormshield",
            "The Nokhud Offensive",
            "enUS",
        },
        [130488] = {
            "Mech Jockey",
            "The MOTHERLODE!!",
        },
        [207946] = {
            "Captain Dailcry",
            "Priory of the Sacred Flame",
            "enUS",
        },
        [185685] = {
            "Urh Relic",
            "The Necrotic Wake",
        },
        [165471] = {
            "Nathrian Duelist",
            "Castle Nathria",
        },
        [114624] = {
            "Arcane Warden",
            "Return to Karazhan",
        },
        [194897] = {
            "Stormsurge Totem",
            "The Nokhud Offensive",
            "enUS",
        },
        [194898] = {
            "Primalist Arcblade",
            "The Nokhud Offensive",
            "enUS",
        },
        [52019] = {
            "Skyfall Star",
            "The Vortex Pinnacle",
        },
        [216648] = {
            "Nx",
            "City of Threads",
            "enUS",
        },
        [216649] = {
            "Vx",
            "City of Threads",
            "enUS",
        },
        [190294] = {
            "Nokhud Stormcaster",
            "The Nokhud Offensive",
            "enUS",
        },
        [151657] = {
            "Bomb Tonk",
            "Operation: Mechagon",
        },
        [225605] = {
            "Nightfall Darkcaster",
            "The Dawnbreaker",
            "enUS",
        },
        [40633] = {
            "Naz'jar Honor Guard",
            "Throne of the Tides",
            "enUS",
        },
        [187224] = {
            "Vile Rothexer",
            "Brackenhide Hollow",
            "enUS",
        },
        [134514] = {
            "Abyssal Cultist",
            "Shrine of the Storm",
        },
        [114626] = {
            "Forlorn Spirit",
            "Return to Karazhan",
        },
        [174175] = {
            "Loyal Stoneborn",
            "Halls of Atonement",
        },
        [198995] = {
            "Chronikar",
            "Dawn of the Infinite",
            "enUS",
        },
        [96587] = {
            "Felsworn Infester",
            "Vault of the Wardens",
        },
        [203857] = {
            "Horde Warlock",
            "Dawn of the Infinite",
            "enUS",
        },
        [214348] = {
            "Undersea Abomination",
            "Tak-Rethan Abyss",
            "enUS",
        },
        [83026] = {
            "Siegemaster Olugar",
            "Iron Docks",
        },
        [198996] = {
            "Manifested Timeways",
            "Dawn of the Infinite",
            "enUS",
        },
        [170850] = {
            "Raging Bloodhorn",
            "Theater of Pain",
        },
        [114627] = {
            "Shrieking Terror",
            "Return to Karazhan",
        },
        [161895] = {
            "Thing From Beyond",
            "Horrific Vision of Orgrimmar",
        },
        [198997] = {
            "Blight of Galakrond",
            "Dawn of the Infinite",
            "enUS",
        },
        [115395] = {
            "Queen",
            "Return to Karazhan",
        },
        [223562] = {
            "Brew Drop",
            "Cinderbrew Meadery",
        },
        [81236] = {
            "Grimrail Technician",
            "Grimrail Depot",
        },
        [189531] = {
            "Decayed Elder",
            "Brackenhide Hollow",
            "enUS",
        },
        [195928] = {
            "Soulharvester Duuren",
            "The Nokhud Offensive",
            "enUS",
        },
        [165479] = {
            "Court Enforcer",
            "Castle Nathria",
        },
        [114628] = {
            "Skeletal Waiter",
            "Return to Karazhan",
        },
        [198999] = {
            "Morchie",
            "Dawn of the Infinite",
            "enUS",
        },
        [203861] = {
            "Horde Destroyer",
            "Dawn of the Infinite",
            "enUS",
        },
        [195929] = {
            "Soulharvester Tumen",
            "The Nokhud Offensive",
            "enUS",
        },
        [214608] = {
            "Screaming Soul",
            "Amirdrassil, the Dream's Hope",
            "enUS",
        },
        [186206] = {
            "Cruel Bonecrusher",
            "Brackenhide Hollow",
            "enUS",
        },
        [231496] = {
            "Venture Co. Diver",
            "Operation: Floodgate",
            "enUS",
        },
        [199000] = {
            "Chrono-Lord Deios",
            "Dawn of the Infinite",
            "enUS",
        },
        [195930] = {
            "Soulharvester Mandakh",
            "The Nokhud Offensive",
            "enUS",
        },
        [114629] = {
            "Spectral Retainer",
            "Return to Karazhan",
        },
        [231497] = {
            "Bombshell Crab",
            "Operation: Floodgate",
            "enUS",
        },
        [129214] = {
            "Coin-Operated Crowd Pummeler",
            "The MOTHERLODE!!",
        },
        [219983] = {
            "Hollows Resident",
            "City of Threads",
            "enUS",
        },
        [186208] = {
            "Rotbow Ranger",
            "Brackenhide Hollow",
            "enUS",
        },
        [180323] = {
            "Fatespawn Monstrosity",
            "Sanctum of Domination",
        },
        [193373] = {
            "Nokhud Thunderfist",
            "The Nokhud Offensive",
            "enUS",
        },
        [116549] = {
            "Backup Singer",
            "Return to Karazhan",
        },
        [87252] = {
            "Unruly Ogron",
            "Iron Docks",
        },
        [164461] = {
            "Sathel the Accursed",
            "Theater of Pain",
        },
        [134012] = {
            "Taskmaster Askari",
            "The MOTHERLODE!!",
        },
        [181861] = {
            "Magmatusk",
            "Neltharus",
            "enUS",
        },
        [180070] = {
            "Mawsworn Scryer",
            "Sanctum of Domination",
        },
        [129600] = {
            "Bilge Rat Brinescale",
            "Freehold",
        },
        [210264] = {
            "Bee Wrangler",
            "Cinderbrew Meadery",
            "enUS",
        },
        [167533] = {
            "Advent Nevermore",
            "Theater of Pain",
        },
        [101326] = {
            "Honored Ancestor",
            "Halls of Valor",
        },
        [157810] = {
            "Mawsworn Endbringer",
            "Torghast, Tower of the Damned",
        },
        [164463] = {
            "Paceran the Virulent",
            "Theater of Pain",
        },
        [210265] = {
            "Worker Bee",
            "Cinderbrew Meadery",
        },
        [114632] = {
            "Spectral Attendant",
            "Return to Karazhan",
        },
        [184422] = {
            "Emberon",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [211289] = {
            "Taener Duelmal",
            "Priory of the Sacred Flame",
            "enUS",
        },
        [129601] = {
            "Cutwater Harpooner",
            "Freehold",
        },
        [211290] = {
            "Elaena Emberlanz",
            "Priory of the Sacred Flame",
            "enUS",
        },
        [99664] = {
            "Restless Soul",
            "Black Rook Hold",
            "enUS",
        },
        [102095] = {
            "Risen Lancer",
            "Black Rook Hold",
            "enUS",
        },
        [167536] = {
            "Harugia the Bloodthirsty",
            "Theater of Pain",
        },
        [114633] = {
            "Spectral Valet",
            "Return to Karazhan",
        },
        [135552] = {
            "Deathtouched Slaver",
            "Waycrest Manor",
            "enUS",
        },
        [207453] = {
            "Fungal Rotspreader",
            "Mycomancer Cavern",
            "enUS",
        },
        [129602] = {
            "Irontide Enforcer",
            "Freehold",
        },
        [111563] = {
            "Duskwatch Guard",
            "Court of Stars",
        },
        [205151] = {
            "Tyr's Vanguard",
            "Dawn of the Infinite",
            "enUS",
        },
        [197219] = {
            "Vile Lasher",
            "Algeth'ar Academy",
            "enUS",
        },
        [187240] = {
            "Drakonid Breaker",
            "The Azure Vault",
            "enUS",
        },
        [40765] = {
            "Commander Ulthok",
            "Throne of the Tides",
            "enUS",
        },
        [171376] = {
            "Head Custodian Javlin",
            "Sanguine Depths",
        },
        [114634] = {
            "Undying Servant",
            "Return to Karazhan",
        },
        [205152] = {
            "Lerai, Timesworn Maiden",
            "Dawn of the Infinite",
            "enUS",
        },
        [205408] = {
            "Infinite Timeslicer",
            "Dawn of the Infinite",
            "enUS",
        },
        [230740] = {
            "Shreddinator 3000",
            "Operation: Floodgate",
            "enUS",
        },
        [179821] = {
            "Commander Zo'far",
            "Tazavesh, the Veiled Market",
        },
        [207456] = {
            "Fungal Speartender",
            "Fungal Folly",
            "enUS",
        },
        [150396] = {
            "Aerial Unit R-21/X",
            "Operation: Mechagon",
        },
        [210271] = {
            "Brew Master Aldryr",
            "Cinderbrew Meadery",
            "enUS",
        },
        [196198] = {
            "Algeth'ar Security",
            "Algeth'ar Academy",
        },
        [115019] = {
            "Coldmist Widow",
            "Return to Karazhan",
        },
        [207969] = {
            "Horde Raider",
            "Dawn of the Infinite",
            "enUS",
        },
        [188011] = {
            "Primal Terrasentry",
            "Ruby Life Pools",
            "enUS",
        },
        [186220] = {
            "Brackenhide Shaper",
            "Brackenhide Hollow",
            "enUS",
        },
        [180335] = {
            "Cartel Smuggler",
            "Tazavesh, the Veiled Market",
        },
        [207202] = {
            "Void Fragment",
            "The Rookery",
            "enUS",
        },
        [150142] = {
            "Scrapbone Trashtosser",
            "Operation: Mechagon",
        },
        [104273] = {
            "Jazshariu",
            "Court of Stars",
        },
        [114636] = {
            "Phantom Guardsman",
            "Return to Karazhan",
        },
        [196712] = {
            "Nullification Device",
            "Halls of Infusion",
            "enUS",
        },
        [168310] = {
            "Plagueroc",
            "Plaguefall",
        },
        [207459] = {
            "Fungal Rotcaster",
            "Mycomancer Cavern",
            "enUS",
        },
        [101075] = {
            "Wormspeaker Devout",
            "Neltharion's Lair",
        },
        [134024] = {
            "Devouring Maggot",
            "Waycrest Manor",
            "enUS",
        },
        [104274] = {
            "Baalgar the Watchful",
            "Court of Stars",
        },
        [135048] = {
            "Gorestained Piglet",
            "Waycrest Manor",
            "enUS",
        },
        [174197] = {
            "Battlefield Ritualist",
            "Theater of Pain",
        },
        [205158] = {
            "Spurlok, Timesworn Sentinel",
            "Dawn of the Infinite",
            "enUS",
        },
        [187503] = {
            "Ambitious Underboss",
            "10.0 Dragon Isles",
        },
        [196203] = {
            "Ethereal Restorer",
            "Algeth'ar Academy",
            "enUS",
        },
        [135049] = {
            "Dreadwing Raven",
            "Waycrest Manor",
            "enUS",
        },
        [113998] = {
            "Mightstone Breaker",
            "Neltharion's Lair",
        },
        [128455] = {
            "T'lonja",
            "Atal'Dazar",
            "enUS",
        },
        [132491] = {
            "Kul Tiran Marksman",
            "Siege of Boralus",
        },
        [104275] = {
            "Imacu'tya",
            "Court of Stars",
        },
        [128967] = {
            "Ashvane Sniper",
            "Siege of Boralus",
            "enUS",
        },
        [168058] = {
            "Infused Quill-feather",
            "Sanguine Depths",
        },
        [207207] = {
            "Voidstone Monstrosity",
            "The Rookery",
            "enUS",
        },
        [136330] = {
            "Soul Thorns",
            "Waycrest Manor",
            "enUS",
        },
        [115406] = {
            "Knight",
            "Return to Karazhan",
        },
        [208743] = {
            "Blazikon",
            "Darkflame Cleft",
        },
        [186738] = {
            "Umbrelskul",
            "The Azure Vault",
            "enUS",
        },
        [166524] = {
            "Deathwalker",
            "Theater of Pain",
        },
        [214117] = {
            "Stormflurry Totem",
            "Throne of the Tides",
            "enUS",
        },
        [206697] = {
            "Devout Priest",
            "Priory of the Sacred Flame",
            "enUS",
        },
        [186739] = {
            "Azureblade",
            "The Azure Vault",
            "enUS",
        },
        [168572] = {
            "Fungi Stormer",
            "Plaguefall",
        },
        [220003] = {
            "Eye of the Queen",
            "City of Threads",
        },
        [115407] = {
            "Rook",
            "Return to Karazhan",
        },
        [206698] = {
            "Fanatical Conjuror",
            "Priory of the Sacred Flame",
            "enUS",
        },
        [186740] = {
            "Arcane Construct",
            "The Azure Vault",
            "enUS",
        },
        [213607] = {
            "Deep Sea Murloc",
            "Throne of the Tides",
            "enUS",
        },
        [195696] = {
            "Primalist Thunderbeast",
            "The Nokhud Offensive",
            "enUS",
        },
        [186229] = {
            "Wilted Oak",
            "Brackenhide Hollow",
            "enUS",
        },
        [168318] = {
            "Forsworn Goliath",
            "Spires of Ascension",
        },
        [162689] = {
            "Surgeon Stitchflesh",
            "The Necrotic Wake",
            "enUS",
        },
        [226402] = {
            "Bront",
            "Operation: Floodgate",
            "enUS",
        },
        [183671] = {
            "Monstrous Soul",
            "Sepulcher of the First Ones",
        },
        [157572] = {
            "Mawsworn Firecaller",
            "Torghast, Tower of the Damned",
        },
        [223844] = {
            "Covert Webmancer",
            "City of Threads",
            "enUS",
        },
        [164737] = {
            "Brood Ambusher",
            "Plaguefall",
        },
        [95834] = {
            "Valarjar Mystic",
            "Halls of Valor",
        },
        [208193] = {
            "Paladin of the Silver Hand",
            "Dawn of the Infinite",
            "enUS",
        },
        [163458] = {
            "Forsworn Castigator",
            "Spires of Ascension",
        },
        [137103] = {
            "Blood Visage",
            "The Underrot",
        },
        [236982] = {
            "Darkfuse Soldier",
            "Operation: Floodgate",
            "enUS",
        },
        [98521] = {
            "Lord Etheldrin Ravencrest",
            "Black Rook Hold",
            "enUS",
        },
        [232228] = {
            "Waterworks Bottomfeeder",
            "Operation: Floodgate",
            "enUS",
        },
        [162691] = {
            "Blightbone",
            "The Necrotic Wake",
            "enUS",
        },
        [226404] = {
            "Geezle Gigazap",
            "Operation: Floodgate",
            "enUS",
        },
        [165483] = {
            "Court Hierarch",
            "Castle Nathria",
        },
        [163459] = {
            "Forsworn Mender",
            "Spires of Ascension",
        },
        [180091] = {
            "Ancient Core Hound",
            "Tazavesh, the Veiled Market",
        },
        [231176] = {
            "Scaffolding",
            "Operation: Floodgate",
            "enUS",
        },
        [40577] = {
            "Naz'jar Sentinel",
            "Throne of the Tides",
            "enUS",
        },
        [109908] = {
            "Nightmare Abomination",
            "Darkheart Thicket",
            "enUS",
        },
        [162692] = {
            "Amarth",
            "The Necrotic Wake",
            "enUS",
        },
        [227145] = {
            "Waterworks Crocolisk",
            "Operation: Floodgate",
            "enUS",
        },
        [187768] = {
            "Dathea Stormlash",
            "Vault of the Incarnates",
            "enUS",
        },
        [102232] = {
            "Rockbound Trapper",
            "Neltharion's Lair",
        },
        [165763] = {
            "Vile Occultist",
            "Castle Nathria",
        },
        [180348] = {
            "Cartel Muscle",
            "Tazavesh, the Veiled Market",
        },
        [166275] = {
            "Mistveil Shaper",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [168578] = {
            "Fungalmancer",
            "Plaguefall",
        },
        [137484] = {
            "King A'akul",
            "Kings' Rest",
        },
        [131812] = {
            "Heartsbane Soulcharmer",
            "Waycrest Manor",
            "enUS",
        },
        [189816] = {
            "Dathea Stormlash",
            "Vault of the Incarnates",
            "enUS",
        },
        [234208] = {
            "Hideous Amalgamation",
            "Excavation Site 9",
            "enUS",
        },
        [165764] = {
            "Rockbound Vanquisher",
            "Castle Nathria",
        },
        [157571] = {
            "Mawsworn Flametender",
            "Torghast, Tower of the Damned",
        },
        [166276] = {
            "Mistveil Guardian",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [96512] = {
            "Archdruid Glaidalis",
            "Darkheart Thicket",
            "enUS",
        },
        [170882] = {
            "Bone Magus",
            "Theater of Pain",
        },
        [130635] = {
            "Stonefury",
            "The MOTHERLODE!!",
        },
        [234206] = {
            "Nightmare Crawler",
            "Excavation Site 9",
            "enUS",
        },
        [188026] = {
            "Frost Tomb",
            "Vault of the Incarnates",
            "enUS",
        },
        [206705] = {
            "Arathi Footman",
            "Priory of the Sacred Flame",
            "enUS",
        },
        [234204] = {
            "Congealed Clot",
            "Excavation Site 9",
            "enUS",
        },
        [215405] = {
            "Anub'zekt",
            "Ara-Kara, City of Echoes",
            "enUS",
        },
        [231906] = {
            "Aerial Support Bot",
            "Sidestreet Sluice",
            "enUS",
        },
        [231928] = {
            "Bomb Bot",
            "Sidestreet Sluice",
            "enUS",
        },
        [131823] = {
            "Sister Malady",
            "Waycrest Manor",
            "enUS",
        },
        [76518] = {
            "Ritual of Bones",
            "Shadowmoon Burial Grounds",
        },
        [231014] = {
            "Loaderbot",
            "Operation: Floodgate",
            "enUS",
        },
        [99358] = {
            "Rotheart Dryad",
            "Darkheart Thicket",
            "enUS",
        },
        [174210] = {
            "Blighted Sludge-Spewer",
            "Theater of Pain",
        },
        [133852] = {
            "Living Rot",
            "The Underrot",
        },
        [156226] = {
            "Coldheart Binder",
            "Torghast, Tower of the Damned",
        },
        [204560] = {
            "Incorporeal Being",
            "Freehold",
            "enUS",
        },
        [128651] = {
            "Hadal Darkfathom",
            "Siege of Boralus",
            "enUS",
        },
        [209230] = {
            "Kyrioss",
            "The Rookery",
        },
        [129208] = {
            "Dread Captain Lockwood",
            "Siege of Boralus",
            "enUS",
        },
        [169861] = {
            "Ickor Bileflesh",
            "Plaguefall",
        },
        [205384] = {
            "Infinite Chronoweaver",
            "Dawn of the Infinite",
            "enUS",
        },
        [234339] = {
            "Harbinger Ul'thul",
            "Excavation Site 9",
            "enUS",
        },
        [180864] = {
            "High Torturer",
            "Sanctum of Domination",
        },
        [208745] = {
            "The Candle King",
            "Darkflame Cleft",
        },
        [183423] = {
            "Reformed Bachelor",
            "Return to Karazhan",
        },
        [191736] = {
            "Crawth",
            "Algeth'ar Academy",
            "enUS",
        },
        [179841] = {
            "Veteran Sparkcaster",
            "Tazavesh, the Veiled Market",
        },
        [162329] = {
            "Xav the Unfallen",
            "Theater of Pain",
        },
        [196200] = {
            "Algeth'ar Echoknight",
            "Algeth'ar Academy",
            "enUS",
        },
        [216619] = {
            "Orator Krix'vizk",
            "City of Threads",
            "enUS",
        },
        [150160] = {
            "Scrapbone Bully",
            "Operation: Mechagon",
        },
        [177787] = {
            "Mawsworn Hopebreaker",
            "Sanctum of Domination",
        },
        [183424] = {
            "Virtuous Gentleman",
            "Return to Karazhan",
        },
        [164414] = {
            "Reanimated Mage",
            "The Necrotic Wake",
            "enUS",
        },
        [179842] = {
            "Commerce Enforcer",
            "Tazavesh, the Veiled Market",
        },
        [131009] = {
            "Spirit of Gold",
            "Atal'Dazar",
            "enUS",
        },
        [204918] = {
            "Iridikron's Creation",
            "Dawn of the Infinite",
            "enUS",
        },
        [204030] = {
            "Goblin Sapper",
            "Dawn of the Infinite",
            "enUS",
        },
        [168393] = {
            "Plaguebelcher",
            "Plaguefall",
        },
        [134041] = {
            "Infected Peasant",
            "Waycrest Manor",
            "enUS",
        },
        [183425] = {
            "Wholesome Host",
            "Return to Karazhan",
        },
        [179733] = {
            "Invigorating Fish Stick",
            "Tazavesh, the Veiled Market",
        },
        [195927] = {
            "Soulharvester Galtmaa",
            "The Nokhud Offensive",
            "enUS",
        },
        [135258] = {
            "Irontide Curseblade",
            "Siege of Boralus",
            "enUS",
        },
        [189886] = {
            "Blazebound Firestorm",
            "Ruby Life Pools",
            "enUS",
        },
        [115642] = {
            "Umbral Imp",
            "Faronaar",
        },
        [162763] = {
            "Soulforged Bonereaver",
            "Theater of Pain",
        },
        [186124] = {
            "Gashtooth",
            "Brackenhide Hollow",
            "enUS",
        },
        [165137] = {
            "Zolramus Gatekeeper",
            "The Necrotic Wake",
            "enUS",
        },
        [97068] = {
            "Storm Drake",
            "Halls of Valor",
        },
        [171656] = {
            "Venomous Sniper Captain",
            "Plaguefall",
        },
        [126928] = {
            "Irontide Corsair",
            "Freehold",
        },
        [88163] = {
            "Grom'kar Cinderseer",
            "Grimrail Depot",
        },
        [129231] = {
            "Rixxa Fluxflame",
            "The MOTHERLODE!!",
        },
        [86372] = {
            "Melded Berserker",
            "The Everbloom",
            "enUS",
        },
        [199547] = {
            "Frostforged Zealot",
            "Vault of the Incarnates",
            "enUS",
        },
        [221102] = {
            "Elder Shadeweaver",
            "City of Threads",
            "enUS",
        },
        [221979] = {
            "Void Bound Howler",
            "The Stonevault",
            "enUS",
        },
        [173016] = {
            "Corpse Collector",
            "The Necrotic Wake",
            "enUS",
        },
        [186242] = {
            "Skulking Gutstabber",
            "Brackenhide Hollow",
            "enUS",
        },
        [168156] = {
            "Remornia",
            "Castle Nathria",
        },
        [213937] = {
            "Rasha'nan",
            "The Dawnbreaker",
            "enUS",
        },
        [40320] = {
            "Valiona",
            "Grim Batol",
            "enUS",
        },
        [192955] = {
            "Draconic Illusion",
            "The Azure Vault",
            "enUS",
        },
        [179334] = {
            "Portalmancer Zo'nyy",
            "Tazavesh, the Veiled Market",
        },
        [59873] = {
            "Corrupt Living Water",
            "UNKNOWN",
        },
        [79720] = {
            "Grom'kar Boomer",
            "Grimrail Depot",
        },
        [230748] = {
            "Darkfuse Bloodwarper",
            "Operation: Floodgate",
            "enUS",
        },
        [122963] = {
            "Rezan",
            "Atal'Dazar",
            "enUS",
        },
        [199037] = {
            "Primalist Shocktrooper",
            "Halls of Infusion",
            "enUS",
        },
        [150165] = {
            "Slime Elemental",
            "Operation: Mechagon",
        },
        [199549] = {
            "Flamesworn Herald",
            "Vault of the Incarnates",
            "enUS",
        },
        [187523] = {
            "Duskpaw Stalker",
            "10.0 Dragon Isles",
        },
        [186116] = {
            "Gutshot",
            "Brackenhide Hollow",
            "enUS",
        },
        [179847] = {
            "Shadowsteel Horror",
            "Sanctum of Domination",
        },
        [115757] = {
            "Wrathguard Flamebringer",
            "Return to Karazhan",
        },
        [185534] = {
            "Bonebolt Hunter",
            "Brackenhide Hollow",
            "enUS",
        },
        [176521] = {
            "Stygian Abductor",
            "Sanctum of Domination",
        },
        [205435] = {
            "Epoch Ripper",
            "Dawn of the Infinite",
            "enUS",
        },
        [205691] = {
            "Iridikron's Creation",
            "Dawn of the Infinite",
            "enUS",
        },
        [127879] = {
            "Shieldbearer of Zul",
            "Atal'Dazar",
            "enUS",
        },
        [155221] = {
            "Faeleaf Tender",
            "Torghast, Tower of the Damned",
        },
        [99891] = {
            "Storm Drake",
            "Halls of Valor",
        },
        [180104] = {
            "Tangling Bloom",
            "The Shadowlands",
        },
        [194745] = {
            "Rotfang Hyena",
            "Brackenhide Hollow",
            "enUS",
        },
        [165946] = {
            "Mordretha, the Endless Empress",
            "Theater of Pain",
        },
        [187771] = {
            "Kadros Icewrath",
            "Vault of the Incarnates",
            "enUS",
        },
        [171384] = {
            "Research Scribe",
            "Sanguine Depths",
        },
        [164707] = {
            "Congealed Slime",
            "Plaguefall",
        },
        [189227] = {
            "Qalashi Hunter",
            "Neltharus",
            "enUS",
        },
        [137516] = {
            "Ashvane Invader",
            "Siege of Boralus",
            "enUS",
        },
        [190340] = {
            "Refti Defender",
            "Halls of Infusion",
            "enUS",
        },
        [195842] = {
            "Ukhel Corruptor",
            "The Nokhud Offensive",
            "enUS",
        },
        [176523] = {
            "Painsmith Raznal",
            "Sanctum of Domination",
        },
        [150168] = {
            "Toxic Monstrosity",
            "Operation: Mechagon",
        },
        [206070] = {
            "Chronaxie",
            "Dawn of the Infinite",
            "enUS",
        },
        [95842] = {
            "Valarjar Thundercaller",
            "Halls of Valor",
        },
        [95832] = {
            "Valarjar Shieldmaiden",
            "Halls of Valor",
        },
        [198326] = {
            "Stormwrought Despoiler",
            "Vault of the Incarnates",
            "enUS",
        },
        [77803] = {
            "Railmaster Rocketspark",
            "Grimrail Depot",
        },
        [217208] = {
            "Zekvir",
            "Mycomancer Cavern",
        },
        [138064] = {
            "Posh Vacationer",
            "The MOTHERLODE!!",
        },
        [150169] = {
            "Toxic Lurker",
            "Operation: Mechagon",
        },
        [212827] = {
            "High Priest Aemya",
            "Priory of the Sacred Flame",
        },
        [165010] = {
            "Congealed Slime",
            "Plaguefall",
        },
        [96574] = {
            "Stormforged Sentinel",
            "Halls of Valor",
        },
        [98696] = {
            "Illysanna Ravencrest",
            "Black Rook Hold",
            "enUS",
        },
        [190342] = {
            "Containment Apparatus",
            "Halls of Infusion",
            "enUS",
        },
        [135329] = {
            "Matron Bryndle",
            "Waycrest Manor",
            "enUS",
        },
        [173189] = {
            "Nathrian Hawkeye",
            "Castle Nathria",
        },
        [187510] = {
            "Duskpaw Trapper",
            "10.0 Dragon Isles",
        },
        [167876] = {
            "Inquisitor Sigar",
            "Halls of Atonement",
        },
        [114266] = {
            "Shoreline Tidespeaker",
            "Return to Karazhan",
        },
        [179852] = {
            "Soulless Vengeance",
            "The Shadowlands",
        },
        [194181] = {
            "Vexamus",
            "Algeth'ar Academy",
            "enUS",
        },
        [136353] = {
            "Colossal Tentacle",
            "Shrine of the Storm",
        },
        [162317] = {
            "Gorechop",
            "Theater of Pain",
        },
        [131492] = {
            "Devout Blood Priest",
            "The Underrot",
        },
        [168594] = {
            "Chamber Sentinel",
            "Sanguine Depths",
        },
        [111068] = {
            "Archmage Galeorn",
            "Black Rook Hold",
            "enUS",
        },
        [165076] = {
            "Gluttonous Tick",
            "Sanguine Depths",
        },
        [115418] = {
            "Spider",
            "Return to Karazhan",
        },
        [81283] = {
            "Grom'kar Footsoldier",
            "Iron Docks",
        },
        [167963] = {
            "Headless Client",
            "De Other Side",
        },
        [139425] = {
            "Crazed Incubator",
            "Temple of Sethraliss",
        },
        [191739] = {
            "Scalebane Lieutenant",
            "The Azure Vault",
            "enUS",
        },
        [164501] = {
            "Mistcaller",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [213885] = {
            "Nightfall Dark Architect",
            "The Dawnbreaker",
            "enUS",
        },
        [150295] = {
            "Tank Buster MK1",
            "Operation: Mechagon",
        },
        [118489] = {
            "Corrupted Risen Soldier",
            "Black Rook Hold - Artifact Challenge",
        },
        [91006] = {
            "Rockback Gnasher",
            "Neltharion's Lair",
        },
        [98275] = {
            "Risen Archer",
            "Black Rook Hold",
            "enUS",
        },
        [122967] = {
            "Priestess Alun'za",
            "Atal'Dazar",
            "enUS",
        },
        [102094] = {
            "Risen Swordsman",
            "Black Rook Hold",
            "enUS",
        },
        [186658] = {
            "Stonevault Geomancer",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [98810] = {
            "Wrathguard Bladelord",
            "Black Rook Hold",
            "enUS",
        },
        [205265] = {
            "Time-Displaced Trooper",
            "Dawn of the Infinite",
            "enUS",
        },
        [115419] = {
            "Ancient Tome",
            "Return to Karazhan",
        },
        [177808] = {
            "Armored Overseer",
            "Tazavesh, the Veiled Market",
        },
        [213119] = {
            "Void Speaker Eirich",
            "The Stonevault",
            "enUS",
        },
        [204931] = {
            "Fyrakk",
            "Amirdrassil, the Dream's Hope",
            "enUS",
        },
        [127315] = {
            "Reanimation Totem",
            "Atal'Dazar",
            "enUS",
        },
        [196202] = {
            "Spectral Invoker",
            "Algeth'ar Academy",
            "enUS",
        },
        [77700] = {
            "Shadowmoon Exhumer",
            "Shadowmoon Burial Grounds",
        },
        [76104] = {
            "Monstrous Corpse Spider",
            "Shadowmoon Burial Grounds",
        },
        [185529] = {
            "Bracken Warscourge",
            "Brackenhide Hollow",
            "enUS",
        },
        [212673] = {
            "Naz'jar Ravager",
            "Throne of the Tides",
            "enUS",
        },
        [83392] = {
            "Rampaging Clefthoof",
            "Iron Docks",
        },
        [122968] = {
            "Yazma",
            "Atal'Dazar",
            "enUS",
        },
        [176573] = {
            "Mawsworn Woebringer",
            "Torghast, Tower of the Damned",
        },
        [129699] = {
            "Ludwig Von Tortollan",
            "Freehold",
        },
        [207199] = {
            "Cursed Rooktender",
            "The Rookery",
            "enUS",
        },
        [45917] = {
            "Cloud Prince",
            "The Vortex Pinnacle",
        },
        [129559] = {
            "Cutwater Duelist",
            "Freehold",
        },
        [210818] = {
            "Lowly Moleherd",
            "Darkflame Cleft",
            "enUS",
        },
        [190348] = {
            "Primalist Ravager",
            "Halls of Infusion",
            "enUS",
        },
        [216364] = {
            "Blood Overseer",
            "Ara-Kara, City of Echoes",
            "enUS",
        },
        [154014] = {
            "Imprisoned Cabalist",
            "Torghast, Tower of the Damned",
        },
        [191847] = {
            "Nokhud Plainstomper",
            "The Nokhud Offensive",
            "enUS",
        },
        [200926] = {
            "Igira the Cruel",
            "Amirdrassil, the Dream's Hope",
            "enUS",
        },
        [200840] = {
            "Flamebound Huntsman",
            "Aberrus, the Shadowed Crucible",
            "enUS",
        },
        [118491] = {
            "Corrupted Risen Mage",
            "Black Rook Hold - Artifact Challenge",
        },
        [165529] = {
            "Depraved Collector",
            "Halls of Atonement",
        },
        [188302] = {
            "Reconfiguration Emitter",
            "Castle Nathria",
        },
        [122969] = {
            "Zanchuli Witch-Doctor",
            "Atal'Dazar",
            "enUS",
        },
        [129366] = {
            "Bilge Rat Buccaneer",
            "Siege of Boralus",
            "enUS",
        },
        [164506] = {
            "Ancient Captain",
            "Theater of Pain",
        },
        [164804] = {
            "Droman Oulfarran",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [101549] = {
            "Arcane Minion",
            "Black Rook Hold",
            "enUS",
        },
        [206214] = {
            "Infinite Infiltrator",
            "Dawn of the Infinite",
            "enUS",
        },
        [197985] = {
            "Flame Channeler",
            "Ruby Life Pools",
            "enUS",
        },
        [169425] = {
            "Felhound",
            "Brackenhide Hollow",
        },
        [101476] = {
            "Molten Charskin",
            "Neltharion's Lair",
        },
        [186226] = {
            "Fetid Rotsinger",
            "Brackenhide Hollow",
            "enUS",
        },
        [224962] = {
            "Cursedforge Mender",
            "The Stonevault",
            "enUS",
        },
        [144293] = {
            "Waste Processing Unit",
            "Operation: Mechagon",
        },
        [211228] = {
            "Blazing Fiend",
            "Darkflame Cleft",
        },
        [165824] = {
            "Nar'zudah",
            "The Necrotic Wake",
            "enUS",
        },
        [114526] = {
            "Ghostly Understudy",
            "Return to Karazhan",
        },
        [98406] = {
            "Embershard Scorpion",
            "Neltharion's Lair",
        },
        [122970] = {
            "Shadowblade Stalker",
            "Atal'Dazar",
            "enUS",
        },
        [166299] = {
            "Mistveil Tender",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [129367] = {
            "Bilge Rat Tempest",
            "Siege of Boralus",
            "enUS",
        },
        [213892] = {
            "Nightfall Shadowmage",
            "The Dawnbreaker",
            "enUS",
        },
        [213338] = {
            "Forgebound Mender",
            "The Stonevault",
            "enUS",
        },
        [129879] = {
            "Irontide Cleaver",
            "Siege of Boralus",
            "enUS",
        },
        [173720] = {
            "Mistveil Gorgegullet",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [184020] = {
            "Hulking Berserker",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [122965] = {
            "Vol'kaal",
            "Atal'Dazar",
            "enUS",
        },
        [169426] = {
            "Infernal",
            "Brackenhide Hollow",
        },
        [81984] = {
            "Gnarlroot",
            "The Everbloom",
            "enUS",
        },
        [144295] = {
            "Mechagon Mechanic",
            "Operation: Mechagon",
        },
        [122971] = {
            "Dazar'ai Juggernaut",
            "Atal'Dazar",
            "enUS",
        },
        [75506] = {
            "Shadowmoon Loyalist",
            "Shadowmoon Burial Grounds",
        },
        [214661] = {
            "Goldie Baronbottom",
            "Cinderbrew Meadery",
        },
        [114544] = {
            "Skeletal Usher",
            "Return to Karazhan",
        },
        [190609] = {
            "Echo of Doragosa",
            "Algeth'ar Academy",
            "enUS",
        },
        [166301] = {
            "Mistveil Stalker",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [123227] = {
            "Keystone Vendor",
            "Kalimdor",
        },
        [144296] = {
            "Spider Tank",
            "Operation: Mechagon",
        },
        [185032] = {
            "Taskmaster Xy'pro",
            "Sepulcher of the First Ones",
        },
        [208521] = {
            "Pumpkin Soldier",
            "Scarlet Monastery",
        },
        [177816] = {
            "Interrogation Specialist",
            "Tazavesh, the Veiled Market",
        },
        [175992] = {
            "Dutiful Attendant",
            "Castle Nathria",
        },
        [219454] = {
            "Crazed Abomination",
            "The Underkeep",
            "enUS",
        },
        [166302] = {
            "Corpse Harvester",
            "The Necrotic Wake",
            "enUS",
        },
        [189555] = {
            "Astral Attendant",
            "The Azure Vault",
            "enUS",
        },
        [209801] = {
            "Quartermaster Koratite",
            "The Rookery",
            "enUS",
        },
        [136249] = {
            "Guardian Elemental",
            "Shrine of the Storm",
        },
        [84990] = {
            "Addled Arcanomancer",
            "The Everbloom",
            "enUS",
        },
        [177817] = {
            "Support Officer",
            "Tazavesh, the Veiled Market",
        },
        [98280] = {
            "Risen Arcanist",
            "Black Rook Hold",
            "enUS",
        },
        [122972] = {
            "Dazar'ai Augur",
            "Atal'Dazar",
            "enUS",
        },
        [41096] = {
            "Naz'jar Oracle",
            "Throne of the Tides",
            "enUS",
        },
        [129369] = {
            "Irontide Raider",
            "Siege of Boralus",
            "enUS",
        },
        [144298] = {
            "Defense Bot Mk III",
            "Operation: Mechagon",
        },
        [164926] = {
            "Drust Boughbreaker",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [165872] = {
            "Flesh Crafter",
            "The Necrotic Wake",
            "enUS",
        },
        [59598] = {
            "Lesser Sha",
            "Temple of the Jade Serpent",
        },
        [138187] = {
            "Grotesque Horror",
            "The Underrot",
        },
        [166589] = {
            "Animated Weapon",
            "Sanguine Depths",
        },
        [133007] = {
            "Unbound Abomination",
            "The Underrot",
        },
        [139949] = {
            "Plague Doctor",
            "Temple of Sethraliss",
        },
        [164510] = {
            "Shambling Arbalest",
            "Theater of Pain",
        },
        [101991] = {
            "Nightmare Dweller",
            "Darkheart Thicket",
            "enUS",
        },
        [207198] = {
            "Cursed Thunderer",
            "The Rookery",
            "enUS",
        },
        [75966] = {
            "Defiled Spirit",
            "Shadowmoon Burial Grounds",
        },
        [229250] = {
            "Venture Co. Contractor",
            "Operation: Floodgate",
            "enUS",
        },
        [122973] = {
            "Dazar'ai Confessor",
            "Atal'Dazar",
            "enUS",
        },
        [177892] = {
            "Mawforged Goliath",
            "Sanctum of Domination",
        },
        [129370] = {
            "Irontide Waveshaper",
            "Siege of Boralus",
            "enUS",
        },
        [134158] = {
            "Shadow-Borne Champion",
            "Kings' Rest",
        },
        [81407] = {
            "Grimrail Bombardier",
            "Grimrail Depot",
        },
        [175517] = {
            "Symbiotic Faerie",
            "9.0 Bastion Arena - Path of Ascension",
        },
        [133836] = {
            "Reanimated Guardian",
            "The Underrot",
        },
        [229251] = {
            "Venture Co. Architect",
            "Operation: Floodgate",
            "enUS",
        },
        [105715] = {
            "Watchful Inquisitor",
            "Court of Stars",
        },
        [137478] = {
            "Queen Wasi",
            "Kings' Rest",
        },
        [104270] = {
            "Guardian Construct",
            "Court of Stars",
        },
        [190128] = {
            "Zul'gamux",
            "Tazavesh, the Veiled Market",
        },
        [81522] = {
            "Witherbark",
            "The Everbloom",
            "enUS",
        },
        [229252] = {
            "Darkfuse Hyena",
            "Operation: Floodgate",
            "enUS",
        },
        [104295] = {
            "Blazing Imp",
            "Court of Stars",
        },
        [190359] = {
            "Skulking Zealot",
            "Halls of Infusion",
            "enUS",
        },
        [131817] = {
            "Cragmaw the Infested",
            "The Underrot",
        },
        [47238] = {
            "Whipping Wind",
            "The Vortex Pinnacle",
        },
        [187033] = {
            "Stinkbreath",
            "Brackenhide Hollow",
            "enUS",
        },
        [115020] = {
            "Arcanid",
            "Return to Karazhan",
        },
        [132532] = {
            "Kul Tiran Marksman",
            "Siege of Boralus",
        },
        [183707] = {
            "Xy Spellslinger",
            "Sepulcher of the First Ones",
        },
        [214668] = {
            "Venture Co. Patron",
            "Cinderbrew Meadery",
        },
        [130011] = {
            "Irontide Buccaneer",
            "Freehold",
        },
        [207438] = {
            "Headless Horseman",
            "Scarlet Monastery",
        },
        [134418] = {
            "Drowned Depthbringer",
            "Shrine of the Storm",
        },
        [128969] = {
            "Ashvane Commander",
            "Siege of Boralus",
            "enUS",
        },
        [201754] = {
            "Sarkareth",
            "Aberrus, the Shadowed Crucible",
            "enUS",
        },
        [211341] = {
            "Manifested Shadow",
            "The Dawnbreaker",
            "enUS",
        },
        [199220] = {
            "Violetwing Stagbeetle",
            "10.0 Dragon Isles",
            "enUS",
        },
        [173729] = {
            "Manifestation of Pride",
            "Theater of Pain",
        },
        [75451] = {
            "Defiled Spirit",
            "Shadowmoon Burial Grounds",
        },
        [211087] = {
            "Speaker Shadowcrown",
            "The Dawnbreaker",
            "enUS",
        },
        [183033] = {
            "Grim Reflection",
            "Sepulcher of the First Ones",
        },
        [132126] = {
            "Gilded Priestess",
            "Atal'Dazar",
            "enUS",
        },
        [189338] = {
            "Riverbend Chomper",
            "Dragon Isles",
        },
        [199749] = {
            "Timestream Anomaly",
            "Dawn of the Infinite",
            "enUS",
        },
        [193944] = {
            "Qalashi Lavamancer",
            "Neltharus",
            "enUS",
        },
        [130012] = {
            "Irontide Ravager",
            "Freehold",
        },
        [190362] = {
            "Dazzling Dragonfly",
            "Halls of Infusion",
            "enUS",
        },
        [105704] = {
            "Arcane Manifestation",
            "Court of Stars",
        },
        [168357] = {
            "Zolramus Sorcerer",
            "The Necrotic Wake",
            "enUS",
        },
        [192786] = {
            "Qalashi Plunderer",
            "Neltharus",
            "enUS",
        },
        [80816] = {
            "Ahri'ok Dugru",
            "Iron Docks",
        },
        [199748] = {
            "Timeline Marauder",
            "Dawn of the Infinite",
            "enUS",
        },
        [154744] = {
            "Toxic Monstrosity",
            "Operation: Mechagon",
        },
        [45926] = {
            "Servant of Asaad",
            "The Vortex Pinnacle",
        },
        [169893] = {
            "Nefarious Darkspeaker",
            "Theater of Pain",
        },
        [211089] = {
            "Anub'ikkaj",
            "The Dawnbreaker",
            "enUS",
        },
        [173190] = {
            "Court Hawkeye",
            "Castle Nathria",
        },
        [196482] = {
            "Overgrown Ancient",
            "Algeth'ar Academy",
            "enUS",
        },
        [189340] = {
            "Chargath, Bane of Scales",
            "Neltharus",
            "enUS",
        },
        [76407] = {
            "Ner'zhul",
            "Shadowmoon Burial Grounds",
        },
        [223777] = {
            "Blazing Fiend",
            "Darkflame Cleft",
        },
        [45704] = {
            "Lurking Tempest",
            "The Vortex Pinnacle",
        },
        [130661] = {
            "Venture Co. Earthshaper",
            "The MOTHERLODE!!",
        },
        [172981] = {
            "Kyrian Stitchwerk",
            "The Necrotic Wake",
            "enUS",
        },
        [105705] = {
            "Bound Energy",
            "Court of Stars",
        },
        [139269] = {
            "Gloom Horror",
            "Waycrest Manor",
            "enUS",
        },
        [212981] = {
            "Hapless Assistant",
            "The Everbloom",
            "enUS",
        },
        [40825] = {
            "Erunak Stonespeaker",
            "Throne of the Tides",
            "enUS",
        },
        [201792] = {
            "Ahnzon",
            "Dawn of the Infinite",
            "enUS",
        },
        [214673] = {
            "Flavor Scientist",
            "Cinderbrew Meadery",
            "enUS",
        },
        [91000] = {
            "Vileshard Hulk",
            "Neltharion's Lair",
        },
        [169875] = {
            "Shackled Soul",
            "Theater of Pain",
        },
        [164266] = {
            "Domina Venomblade",
            "Plaguefall",
        },
        [129374] = {
            "Scrimshaw Enforcer",
            "Siege of Boralus",
            "enUS",
        },
        [200836] = {
            "Obsidian Guard",
            "Aberrus, the Shadowed Crucible",
            "enUS",
        },
        [129758] = {
            "Irontide Grenadier",
            "Freehold",
        },
        [206230] = {
            "Infinite Diversionist",
            "Dawn of the Infinite",
            "enUS",
        },
        [220815] = {
            "Blazing Fiend",
            "Darkflame Cleft",
            "enUS",
        },
        [115640] = {
            "Fuming Imp",
            "Faronaar",
        },
        [193352] = {
            "Hextrick Totem",
            "Brackenhide Hollow",
            "enUS",
        },
        [217489] = {
            "Anub'arash",
            "Nerub-ar Palace",
            "enUS",
        },
        [114796] = {
            "Wholesome Hostess",
            "Return to Karazhan",
        },
        [174802] = {
            "Venomous Sniper",
            "Plaguefall",
        },
        [187552] = {
            "Stormfang Shaman",
            "10.0 Dragon Isles",
        },
        [136470] = {
            "Refreshment Vendor",
            "The MOTHERLODE!!",
        },
        [184140] = {
            "Xy Acolyte",
            "Sepulcher of the First Ones",
        },
        [114790] = {
            "Viz'aduum the Watcher",
            "Return to Karazhan",
        },
        [155824] = {
            "Lumbering Creation",
            "Torghast, Tower of the Damned",
        },
        [98542] = {
            "Amalgam of Souls",
            "Black Rook Hold",
            "enUS",
        },
        [220060] = {
            "Taste Tester",
            "Cinderbrew Meadery",
        },
        [224271] = {
            "Twilight Warlock",
            "Grim Batol",
            "enUS",
        },
        [134331] = {
            "King Rahu'ai",
            "Kings' Rest",
        },
        [40634] = {
            "Naz'jar Tempest Witch",
            "Throne of the Tides",
            "enUS",
        },
        [130909] = {
            "Fetid Maggot",
            "The Underrot",
        },
        [190368] = {
            "Flamecaller Aymi",
            "Halls of Infusion",
            "enUS",
        },
        [165410] = {
            "High Adjudicator Aleez",
            "Halls of Atonement",
        },
        [176551] = {
            "Vault Purifier",
            "Tazavesh, the Veiled Market",
        },
        [165222] = {
            "Zolramus Bonemender",
            "The Necrotic Wake",
            "enUS",
        },
        [207468] = {
            "Gnarled Reviver",
            "Mycomancer Cavern",
            "enUS",
        },
        [104300] = {
            "Shadow Mistress",
            "Court of Stars",
        },
        [214421] = {
            "Coalescing Void Diffuser",
            "The Rookery",
            "enUS",
        },
        [102253] = {
            "Understone Demolisher",
            "Neltharion's Lair",
        },
        [165805] = {
            "Shade of Kael'thas",
            "Castle Nathria",
        },
        [82039] = {
            "Rockspine Stinger",
            "The Everbloom",
            "enUS",
        },
        [190207] = {
            "Primalist Cinderweaver",
            "Ruby Life Pools",
            "enUS",
        },
        [199325] = {
            "Nokhud Stormcaller",
            "The Nokhud Offensive",
        },
        [204262] = {
            "Necrofrost",
            "Dawn of the Infinite",
            "enUS",
        },
        [185508] = {
            "Claw Fighter",
            "Brackenhide Hollow",
            "enUS",
        },
        [163503] = {
            "Etherdiver",
            "Spires of Ascension",
        },
        [188067] = {
            "Flashfrost Chillweaver",
            "Ruby Life Pools",
            "enUS",
        },
        [190370] = {
            "Squallbringer Cyraz",
            "Halls of Infusion",
            "enUS",
        },
        [168109] = {
            "Empowered Mawsworn Ritualist",
            "Torghast, Tower of the Damned",
        },
        [197535] = {
            "High Channeler Ryvati",
            "Ruby Life Pools",
            "enUS",
        },
        [130400] = {
            "Irontide Crusher",
            "Freehold",
        },
        [205723] = {
            "Time-Lost Aerobot",
            "Dawn of the Infinite",
            "enUS",
        },
        [45572] = {
            "Howling Gale",
            "The Vortex Pinnacle",
        },
        [198047] = {
            "Tempest Channeler",
            "Ruby Life Pools",
            "enUS",
        },
        [114792] = {
            "Virtuous Lady",
            "Return to Karazhan",
        },
        [190371] = {
            "Primalist Earthshaker",
            "Halls of Infusion",
            "enUS",
        },
        [75899] = {
            "Possessed Soul",
            "Shadowmoon Burial Grounds",
        },
        [205212] = {
            "Infinite Keeper",
            "Dawn of the Infinite",
            "enUS",
        },
        [98970] = {
            "Latosius",
            "Black Rook Hold",
            "enUS",
        },
        [220314] = {
            "Bogpiper",
            "Mycomancer Cavern",
            "enUS",
        },
        [83761] = {
            "Ogron Laborer",
            "Iron Docks",
        },
        [206140] = {
            "Coalesced Time",
            "Dawn of the Infinite",
            "enUS",
        },
        [212681] = {
            "Vicious Snap Dragon",
            "Throne of the Tides",
            "enUS",
        },
        [231312] = {
            "Venture Co. Electrician",
            "Operation: Floodgate",
            "enUS",
        },
        [196548] = {
            "Ancient Branch",
            "Algeth'ar Academy",
            "enUS",
        },
        [196117] = {
            "Crystal Thrasher",
            "The Azure Vault",
            "enUS",
        },
        [198308] = {
            "Frostwrought Dominator",
            "Vault of the Incarnates",
            "enUS",
        },
        [213913] = {
            "Kobold Flametender",
            "Darkflame Cleft",
            "enUS",
        },
        [150712] = {
            "Trixie Tazer",
            "Operation: Mechagon",
        },
        [168443] = {
            "Zolramus Necromancer",
            "The Necrotic Wake",
            "enUS",
        },
        [194467] = {
            "Disease Slasher",
            "Brackenhide Hollow",
            "enUS",
        },
        [190373] = {
            "Primalist Galesinger",
            "Halls of Infusion",
            "enUS",
        },
        [155830] = {
            "Mawsworn Disciple",
            "Torghast, Tower of the Damned",
        },
        [170490] = {
            "Atal'ai High Priest",
            "De Other Side",
        },
        [98538] = {
            "Lady Velandras Ravencrest",
            "Black Rook Hold",
            "enUS",
        },
        [213343] = {
            "Forge Loader",
            "The Stonevault",
            "enUS",
        },
        [40586] = {
            "Lady Naz'jar",
            "Throne of the Tides",
            "enUS",
        },
        [169905] = {
            "Risen Warlord",
            "De Other Side",
        },
        [90997] = {
            "Mightstone Breaker",
            "Neltharion's Lair",
        },
        [196671] = {
            "Arcane Ravager",
            "Algeth'ar Academy",
            "enUS",
        },
        [155831] = {
            "Mawsworn Soulbinder",
            "Torghast, Tower of the Damned",
        },
        [137486] = {
            "Queen Patlaa",
            "Kings' Rest",
        },
        [171184] = {
            "Mythresh, Sky's Talons",
            "De Other Side",
        },
        [205727] = {
            "Time-Lost Rocketeer",
            "Dawn of the Infinite",
            "enUS",
        },
        [134338] = {
            "Tidesage Enforcer",
            "Shrine of the Storm",
        },
        [201788] = {
            "Dazhak",
            "Dawn of the Infinite",
            "enUS",
        },
        [113537] = {
            "Emberhusk Dominator",
            "Neltharion's Lair",
        },
        [194469] = {
            "Wither Slasher",
            "Brackenhide Hollow",
            "enUS",
        },
        [180336] = {
            "Cartel Wiseguy",
            "Tazavesh, the Veiled Market",
        },
        [192934] = {
            "Volatile Infuser",
            "Vault of the Incarnates",
            "enUS",
        },
        [114783] = {
            "Reformed Maiden",
            "Return to Karazhan",
        },
        [168882] = {
            "Fleeting Manifestation",
            "Sanguine Depths",
        },
        [165556] = {
            "Fleeting Manifestation",
            "Sanguine Depths",
        },
        [82682] = {
            "Archmage Sol",
            "The Everbloom",
            "enUS",
        },
        [90998] = {
            "Blightshard Shaper",
            "Neltharion's Lair",
        },
        [203678] = {
            "Grommash Hellscream",
            "Dawn of the Infinite",
            "enUS",
        },
        [208363] = {
            "Urctos",
            "Amirdrassil, the Dream's Hope",
            "enUS",
        },
        [120651] = {
            "Explosives",
            "Atal'Dazar",
        },
        [168627] = {
            "Plaguebinder",
            "Plaguefall",
        },
        [126918] = {
            "Irontide Crackshot",
            "Freehold",
        },
        [83578] = {
            "Ogron Laborer",
            "Iron Docks",
        },
        [39616] = {
            "Naz'jar Invader",
            "Throne of the Tides",
            "enUS",
        },
        [137405] = {
            "Gripping Terror",
            "Siege of Boralus",
            "enUS",
        },
        [190377] = {
            "Primalist Icecaller",
            "Halls of Infusion",
            "enUS",
        },
        [192680] = {
            "Guardian Sentry",
            "Algeth'ar Academy",
            "enUS",
        },
        [168418] = {
            "Forsworn Inquisitor",
            "Spires of Ascension",
        },
        [139422] = {
            "Scaled Krolusk Tamer",
            "Temple of Sethraliss",
        },
        [194317] = {
            "Stormcaller Boroo",
            "The Nokhud Offensive",
            "enUS",
        },
        [151476] = {
            "Blastatron X-80",
            "Operation: Mechagon",
        },
        [126919] = {
            "Irontide Stormcaller",
            "Freehold",
        },
        [196263] = {
            "Nokhud Neophyte",
            "The Nokhud Offensive",
            "enUS",
        },
        [186284] = {
            "Gutchewer Bear",
            "Brackenhide Hollow",
            "enUS",
        },
        [135365] = {
            "Matron Alma",
            "Waycrest Manor",
            "enUS",
        },
        [131527] = {
            "Lord Waycrest",
            "Waycrest Manor",
            "enUS",
        },
        [130404] = {
            "Vermin Trapper",
            "Freehold",
        },
        [162744] = {
            "Nekthara the Mangler",
            "Theater of Pain",
        },
        [180431] = {
            "Focused Ritualist",
            "Tazavesh, the Veiled Market",
        },
        [212793] = {
            "Void Ascendant",
            "The Rookery",
            "enUS",
        },
        [198311] = {
            "Flamewrought Eradicator",
            "Vault of the Incarnates",
            "enUS",
        },
        [45922] = {
            "Empyrean Assassin",
            "The Vortex Pinnacle",
        },
        [122984] = {
            "Dazar'ai Colossus",
            "Atal'Dazar",
            "enUS",
        },
        [99359] = {
            "Rotheart Keeper",
            "Darkheart Thicket",
            "enUS",
        },
        [165111] = {
            "Drust Spiteclaw",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [168886] = {
            "Virulax Blightweaver",
            "Plaguefall",
        },
        [213893] = {
            "Nightfall Darkcaster",
            "The Dawnbreaker",
            "enUS",
        },
        [134599] = {
            "Imbued Stormcaller",
            "Temple of Sethraliss",
        },
        [167607] = {
            "Stoneborn Slasher",
            "Halls of Atonement",
        },
        [187897] = {
            "Defier Draghar",
            "Ruby Life Pools",
            "enUS",
        },
        [98792] = {
            "Wyrmtongue Scavenger",
            "Black Rook Hold",
            "enUS",
        },
        [213770] = {
            "Ink of Ozumat",
            "Throne of the Tides",
            "enUS",
        },
        [45919] = {
            "Young Storm Dragon",
            "The Vortex Pinnacle",
        },
        [215968] = {
            "Black Blood",
            "Ara-Kara, City of Echoes",
            "enUS",
        },
        [187566] = {
            "Hyena Matriarch",
            "10.0 Dragon Isles",
        },
        [134600] = {
            "Sandswept Marksman",
            "Temple of Sethraliss",
        },
        [134284] = {
            "Fallen Deathspeaker",
            "The Underrot",
        },
        [190381] = {
            "Rotburst Totem",
            "Brackenhide Hollow",
            "enUS",
        },
        [154020] = {
            "Prisonbreak Cursewalker",
            "Torghast, Tower of the Damned",
        },
        [206351] = {
            "Alliance Conjuror",
            "Dawn of the Infinite",
            "enUS",
        },
        [174773] = {
            "Spiteful Shade",
            "Black Rook Hold",
            "enUS",
        },
        [218016] = {
            "Ravenous Cinderbee",
            "Cinderbrew Meadery",
        },
        [81603] = {
            "Champion Druna",
            "Iron Docks",
        },
        [192464] = {
            "Raging Ember",
            "Neltharus",
            "enUS",
        },
        [91001] = {
            "Tarspitter Lurker",
            "Neltharion's Lair",
        },
        [207940] = {
            "Prioress Murrpray",
            "Priory of the Sacred Flame",
            "enUS",
        },
        [190345] = {
            "Primalist Geomancer",
            "Halls of Infusion",
            "enUS",
        },
        [176565] = {
            "Disruptive Patron",
            "Tazavesh, the Veiled Market",
        },
        [40484] = {
            "Erudax",
            "Grim Batol",
            "enUS",
        },
        [234393] = {
            "Void Aberration",
            "Excavation Site 9",
            "enUS",
        },
        [193760] = {
            "Surging Ruiner",
            "Vault of the Incarnates",
            "enUS",
        },
        [99360] = {
            "Vilethorn Blossom",
            "Darkheart Thicket",
            "enUS",
        },
        [114542] = {
            "Ghostly Philanthropist",
            "Return to Karazhan",
        },
        [136186] = {
            "Tidesage Spiritualist",
            "Shrine of the Storm",
        },
        [173044] = {
            "Stitching Assistant",
            "The Necrotic Wake",
            "enUS",
        },
        [40923] = {
            "Unstable Corruption",
            "Throne of the Tides",
            "enUS",
        },
        [133835] = {
            "Feral Bloodswarmer",
            "The Underrot",
        },
        [199595] = {
            "Nokhud Defender",
            "The Nokhud Offensive",
        },
        [162049] = {
            "Vestige of Doubt",
            "Sanguine Depths",
        },
        [212389] = {
            "Cursedheart Invader",
            "The Stonevault",
            "enUS",
        },
        [91002] = {
            "Rotdrool Grabber",
            "UNKNOWN",
        },
        [84989] = {
            "Infested Icecaller",
            "The Everbloom",
            "enUS",
        },
        [99366] = {
            "Taintheart Summoner",
            "Darkheart Thicket",
            "enUS",
        },
        [194990] = {
            "Stormseeker Acolyte",
            "Vault of the Incarnates",
            "enUS",
        },
        [144071] = {
            "Irontide Waveshaper",
            "Siege of Boralus",
            "enUS",
        },
        [136139] = {
            "Mechanized Peacekeeper",
            "The MOTHERLODE!!",
        },
        [104278] = {
            "Felbound Enforcer",
            "Court of Stars",
        },
        [150143] = {
            "Scrapbone Grinder",
            "Operation: Mechagon",
        },
        [167612] = {
            "Stoneborn Reaver",
            "Halls of Atonement",
        },
        [231325] = {
            "Darkfuse Jumpstarter",
            "Operation: Floodgate",
            "enUS",
        },
        [129227] = {
            "Azerokk",
            "The MOTHERLODE!!",
        },
        [144294] = {
            "Mechagon Tinkerer",
            "Operation: Mechagon",
        },
        [92538] = {
            "Tarspitter Grub",
            "Neltharion's Lair",
        },
        [187315] = {
            "Disease Slasher",
            "Brackenhide Hollow",
            "enUS",
        },
        [191232] = {
            "Drakonid Stormbringer",
            "Vault of the Incarnates",
            "enUS",
        },
        [154758] = {
            "Toxic Monstrosity",
            "Operation: Mechagon",
        },
        [91003] = {
            "Rokmora",
            "Neltharion's Lair",
            "enUS",
        },
        [157634] = {
            "Flameforge Enforcer",
            "Torghast, Tower of the Damned",
        },
        [155812] = {
            "Mawsworn Ritualist",
            "Torghast, Tower of the Damned",
        },
        [214350] = {
            "Turned Speaker",
            "The Stonevault",
            "enUS",
        },
        [135052] = {
            "Blight Toad",
            "Waycrest Manor",
            "enUS",
        },
        [193457] = {
            "Balara",
            "The Nokhud Offensive",
            "enUS",
        },
        [75713] = {
            "Shadowmoon Bone-Mender",
            "Shadowmoon Burial Grounds",
        },
        [214439] = {
            "Corrupted Oracle",
            "The Rookery",
        },
        [163520] = {
            "Forsworn Squad-Leader",
            "Spires of Ascension",
        },
        [163126] = {
            "Brittlebone Mage",
            "The Necrotic Wake",
            "enUS",
        },
        [165762] = {
            "Soul Infuser",
            "Castle Nathria",
        },
        [137830] = {
            "Pallid Gorger",
            "Waycrest Manor",
            "enUS",
        },
        [39960] = {
            "Deep Murloc Drudge",
            "Throne of the Tides",
            "enUS",
        },
        [86526] = {
            "Grom'kar Chainmaster",
            "Iron Docks",
        },
        [228539] = {
            "Nightfall Darkcaster",
            "The Dawnbreaker",
            "enUS",
        },
        [225204] = {
            "Zekvir",
            "Zekvir's Lair",
            "enUS",
        },
        [99192] = {
            "Shade of Xavius",
            "Darkheart Thicket",
            "enUS",
        },
        [219046] = {
            "Voracious Worm",
            "Nerub-ar Palace",
            "enUS",
        },
        [229537] = {
            "Void Emissary",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [150146] = {
            "Scrapbone Shaman",
            "Operation: Mechagon",
        },
        [193462] = {
            "Batak",
            "The Nokhud Offensive",
            "enUS",
        },
        [190403] = {
            "Glacial Proto-Dragon",
            "Halls of Infusion",
            "enUS",
        },
        [179386] = {
            "Corsair Officer",
            "Tazavesh, the Veiled Market",
        },
        [204206] = {
            "Horde Farseer",
            "Dawn of the Infinite",
            "enUS",
        },
        [75652] = {
            "Void Spawn",
            "Shadowmoon Burial Grounds",
        },
        [198998] = {
            "Tyr, the Infinite Keeper",
            "Dawn of the Infinite",
            "enUS",
        },
        [102019] = {
            "Stormforged Obliterator",
            "Halls of Valor",
        },
        [168384] = {
            "Flesh Construct",
            "The Necrotic Wake",
        },
        [98681] = {
            "Rook Spinner",
            "Black Rook Hold",
            "enUS",
        },
        [137521] = {
            "Irontide Powdershot",
            "Siege of Boralus",
            "enUS",
        },
        [185528] = {
            "Trickclaw Mystic",
            "Brackenhide Hollow",
            "enUS",
        },
        [189878] = {
            "Nathrezim Infiltrator",
            "Tazavesh, the Veiled Market",
        },
        [115486] = {
            "Erudite Slayer",
            "Return to Karazhan",
        },
        [102295] = {
            "Emberhusk Dominator",
            "Neltharion's Lair",
        },
        [194316] = {
            "Stormcaller Zarii",
            "The Nokhud Offensive",
            "enUS",
        },
        [152009] = {
            "Malfunctioning Scrapbot",
            "Operation: Mechagon",
        },
        [102962] = {
            "Nightmare Abomination",
            "Darkheart Thicket",
            "enUS",
        },
        [210108] = {
            "E.D.N.A",
            "The Stonevault",
            "enUS",
        },
        [179388] = {
            "Hourglass Tidesage",
            "Tazavesh, the Veiled Market",
        },
        [175550] = {
            "Volatile Faerie",
            "9.0 Bastion Arena - Path of Ascension",
        },
        [163524] = {
            "Kyrian Dark-Praetor",
            "Spires of Ascension",
        },
        [136076] = {
            "Agitated Nimbus",
            "Temple of Sethraliss",
        },
        [186741] = {
            "Arcane Elemental",
            "The Azure Vault",
            "enUS",
        },
        [229686] = {
            "Venture Co. Surveyor",
            "Operation: Floodgate",
            "enUS",
        },
        [100991] = {
            "Strangling Roots",
            "Darkheart Thicket",
            "enUS",
        },
        [213932] = {
            "Sureki Militant",
            "The Dawnbreaker",
            "enUS",
        },
        [200126] = {
            "Fallen Waterspeaker",
            "Temple of the Jade Serpent",
        },
        [100526] = {
            "Tormented Bloodseeker",
            "Darkheart Thicket",
            "enUS",
        },
        [132820] = {
            "Mudsnout Piglet",
            "Skittering Hollow (Islands 5)",
        },
        [130436] = {
            "Off-Duty Laborer",
            "The MOTHERLODE!!",
        },
        [208438] = {
            "Infinite Saboteur",
            "Dawn of the Infinite",
            "enUS",
        },
        [176575] = {
            "Mawsworn Soulwarden",
            "Torghast, Tower of the Damned",
        },
        [170690] = {
            "Diseased Horror",
            "Theater of Pain",
        },
        [135167] = {
            "Spectral Berserker",
            "Kings' Rest",
        },
        [228424] = {
            "Darkfuse Mechadrone",
            "Operation: Floodgate",
            "enUS",
        },
        [204536] = {
            "Blight Chunk",
            "Dawn of the Infinite",
            "enUS",
        },
        [195851] = {
            "Ukhel Deathspeaker",
            "The Nokhud Offensive",
            "enUS",
        },
        [194487] = {
            "Vile Rothexer",
            "Brackenhide Hollow",
            "enUS",
        },
        [114803] = {
            "Spectral Stable Hand",
            "Return to Karazhan",
        },
        [83025] = {
            "Grom'kar Battlemaster",
            "Iron Docks",
        },
        [210812] = {
            "Royal Wicklighter",
            "Darkflame Cleft",
            "enUS",
        },
        [213934] = {
            "Nightfall Tactician",
            "The Dawnbreaker",
            "enUS",
        },
        [203799] = {
            "Horde Axe Thrower",
            "Dawn of the Infinite",
            "enUS",
        },
        [65362] = {
            "Minion of Doubt",
            "Temple of the Jade Serpent",
        },
        [153292] = {
            "Training Dummy",
            "Eastern Kingdoms",
        },
        [169924] = {
            "Veteran Stoneguard",
            "Castle Nathria",
        },
        [134629] = {
            "Scaled Krolusk Rider",
            "Temple of Sethraliss",
        },
        [186246] = {
            "Fleshripper Vulture",
            "Brackenhide Hollow",
            "enUS",
        },
        [81297] = {
            "Dreadfang",
            "Iron Docks",
        },
        [97788] = {
            "Storm Drake",
            "Halls of Valor",
        },
        [81864] = {
            "Dreadpetal",
            "The Everbloom",
            "enUS",
        },
        [207177] = {
            "Infinite Watchkeeper",
            "Dawn of the Infinite",
            "enUS",
        },
        [196043] = {
            "Primalist Infuser",
            "Halls of Infusion",
            "enUS",
        },
        [84957] = {
            "Putrid Pyromancer",
            "The Everbloom",
            "enUS",
        },
        [114804] = {
            "Spectral Charger",
            "Return to Karazhan",
        },
        [162309] = {
            "Kul'tharok",
            "Theater of Pain",
        },
        [164552] = {
            "Rotmarrow Slime",
            "Plaguefall",
        },
        [129517] = {
            "Reanimated Raptor",
            "Atal'Dazar",
            "enUS",
        },
        [167111] = {
            "Spinemaw Staghorn",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [86547] = {
            "Venom Sprayer",
            "The Everbloom",
        },
        [91008] = {
            "Rockbound Pelter",
            "Neltharion's Lair",
        },
        [135204] = {
            "Spectral Hex Priest",
            "Kings' Rest",
        },
        [156212] = {
            "Coldheart Agent",
            "Torghast, Tower of the Damned",
        },
        [131545] = {
            "Lady Waycrest",
            "Waycrest Manor",
            "enUS",
        },
        [191164] = {
            "Arcane Tender",
            "The Azure Vault",
            "enUS",
        },
        [207796] = {
            "Burning Colossus",
            "Amirdrassil, the Dream's Hope",
            "enUS",
        },
        [169159] = {
            "Unstable Canister",
            "Plaguefall",
        },
        [207186] = {
            "Unruly Stormrook",
            "The Rookery",
            "enUS",
        },
        [184107] = {
            "Runic Protector",
            "Uldaman: Legacy of Tyr",
            "enUS",
        },
        [169927] = {
            "Putrid Butcher",
            "Theater of Pain",
        },
        [113398] = {
            "Bloodtainted Fury",
            "Darkheart Thicket",
        },
        [133593] = {
            "Expert Technician",
            "The MOTHERLODE!!",
        },
        [163862] = {
            "Defender of Many Eyes",
            "Plaguefall",
        },
        [98813] = {
            "Bloodscent Felhound",
            "Black Rook Hold",
            "enUS",
        },
        [167113] = {
            "Spinemaw Acidgullet",
            "Mists of Tirna Scithe",
            "enUS",
        },
        [212403] = {
            "Cursedheart Invader",
            "The Stonevault",
            "enUS",
        },
        [188252] = {
            "Melidrussa Chillworn",
            "Ruby Life Pools",
            "enUS",
        },
        [82590] = {
            "Grimrail Scout",
            "Grimrail Depot",
        },
        [188244] = {
            "Primal Juggernaut",
            "Ruby Life Pools",
            "enUS",
        },
        [209333] = {
            "Gnarlroot",
            "Amirdrassil, the Dream's Hope",
            "enUS",
        },
        [81212] = {
            "Grimrail Overseer",
            "Grimrail Depot",
        },
        [220141] = {
            "Royal Jelly Purveyor",
            "Cinderbrew Meadery",
            "enUS",
        },
        [185537] = {
            "Foul Controller",
            "Sepulcher of the First Ones",
        },
        [180432] = {
            "Devoted Accomplice",
            "Tazavesh, the Veiled Market",
        },
        [97720] = {
            "Blightshard Skitter",
            "Neltharion's Lair",
        },
        [223423] = {
            "Careless Hopgoblin",
            "Cinderbrew Meadery",
            "enUS",
        },
        [170480] = {
            "Atal'ai Deathwalker",
            "De Other Side",
        },
        [194816] = {
            "Forgewrought Monstrosity",
            "Neltharus",
            "enUS",
        },
        [219984] = {
            "Xeph'itik",
            "City of Threads",
            "enUS",
        },
        [189719] = {
            "Watcher Irideus",
            "Halls of Infusion",
            "enUS",
        },
        [145185] = {
            "Gnomercy 4.U.",
            "Operation: Mechagon",
        },
        [167532] = {
            "Heavin the Breaker",
            "Theater of Pain",
        },
        [207205] = {
            "Stormguard Gorren",
            "The Rookery",
        },
        [216338] = {
            "Hulking Bloodguard",
            "Ara-Kara, City of Echoes",
            "enUS",
        },
        [226398] = {
            "Big M.O.M.M.A.",
            "Operation: Floodgate",
            "enUS",
        },
        [178630] = {
            "Mawsworn Seeker",
            "Sanctum of Domination",
        },
        [164557] = {
            "Shard of Halkias",
            "Halls of Atonement",
        },
        [229212] = {
            "Darkfuse Demolitionist",
            "Operation: Floodgate",
            "enUS",
        },
        [134364] = {
            "Faithless Tender",
            "Temple of Sethraliss",
        },
        [155090] = {
            "Anodized Coilbearer",
            "Operation: Mechagon",
        },
        [83846] = {
            "Yalnu",
            "The Everbloom",
            "enUS",
        },
        [190401] = {
            "Gusting Proto-Dragon",
            "Halls of Infusion",
        },
        [196798] = {
            "Corrupted Manafiend",
            "Algeth'ar Academy",
        },
        [168396] = {
            "Plaguebelcher",
            "Plaguefall",
        },
        [96640] = {
            "Valarjar Marksman",
            "Halls of Valor",
        },
        [213942] = {
            "Sludge",
            "Throne of the Tides",
            "enUS",
        },
        [199027] = {
            "Magmas",
            "Vault of the Incarnates",
            "enUS",
        },
        [208747] = {
            "The Darkness",
            "Darkflame Cleft",
            "enUS",
        },
        [43875] = {
            "Asaad",
            "The Vortex Pinnacle",
            "enUS",
        },
        [216856] = {
            "Black Blood",
            "Ara-Kara, City of Echoes",
            "enUS",
        },
        [226396] = {
            "Swampface",
            "Operation: Floodgate",
            "enUS",
        },
        [226403] = {
            "Keeza Quickfuse",
            "Operation: Floodgate",
            "enUS",
        },
        [190484] = {
            "Kyrakka",
            "Ruby Life Pools",
            "enUS",
        },
        [40177] = {
            "Forgemaster Throngus",
            "Grim Batol",
            "enUS",
        },
    },
    ["aura_grow_direction"] = 3,
    ["health_selection_overlay_alpha"] = 0.29999998211861,
    ["aura_stack_shadow_color"] = {
        nil,
        nil,
        nil,
        0,
    },
    ["minor_height_scale"] = 0.99999994039536,
    ["aura_padding"] = 2,
    ["indicator_worldboss"] = false,
    ["last_news_time"] = 1551553489,
    ["cast_statusbar_fadeout_time"] = 0.48999997973442,
    ["aura_stack_size"] = 7,
    ["plater_resources_align"] = "horizontal",
    ["plater_resources_scale"] = 0.8,
    ["cast_colors"] = {
        [384524] = {
            true,
            "burlywood",
            "",
        },
        [376683] = {
            true,
            "burlywood",
            "",
        },
        [375727] = {
            true,
            "burlywood",
            "",
        },
        [88308] = {
            true,
            "burlywood",
            "",
        },
        [265568] = {
            false,
            "orchid",
            "",
        },
        [372222] = {
            true,
            "burlywood",
            "",
        },
        [267354] = {
            true,
            "orchid",
            "",
        },
        [372223] = {
            true,
            "burlywood",
            "",
        },
        [427176] = {
            true,
            "orchid",
            "",
        },
        [382233] = {
            true,
            "burlywood",
            "",
        },
        [323137] = {
            true,
            "burlywood",
            "",
        },
        [372735] = {
            true,
            "orchid",
            "",
        },
        [374839] = {
            true,
            "burlywood",
            "",
        },
        [269843] = {
            true,
            "burlywood",
            "",
        },
        [283422] = {
            true,
            "burlywood",
            "",
        },
        [388801] = {
            true,
            "orchid",
            "",
        },
        [426860] = {
            true,
            "burlywood",
            "",
        },
        [260894] = {
            true,
            "burlywood",
            "",
        },
        [375351] = {
            true,
            "burlywood",
            "",
        },
        [443500] = {
            true,
            "burlywood",
            "",
        },
        [226406] = {
            true,
            "burlywood",
            "",
        },
        [183088] = {
            true,
            "burlywood",
            "",
        },
        [267551] = {
            true,
            "burlywood",
            "",
        },
        [412200] = {
            true,
            "orchid",
            "",
        },
        [197974] = {
            true,
            "burlywood",
            "",
        },
        [384597] = {
            false,
            "white",
        },
        [370764] = {
            true,
            "orchid",
            "",
        },
        [201226] = {
            true,
            "burlywood",
            "",
        },
        [259940] = {
            true,
            "burlywood",
            "",
        },
        [377204] = {
            true,
            "burlywood",
            "",
        },
        [468813] = {
            true,
            "orangered",
            "",
        },
        [412012] = {
            true,
            "orchid",
            "",
        },
        [427376] = {
            true,
            "orchid",
            "",
        },
        [465754] = {
            true,
            "orangered",
            "",
        },
        [332708] = {
            true,
            "burlywood",
            "",
        },
        [413607] = {
            true,
            "orchid",
            "",
        },
        [432031] = {
            true,
            "orchid",
            "",
        },
        [369365] = {
            true,
            "orchid",
            "",
        },
        [372107] = {
            true,
            "burlywood",
            "",
        },
        [257870] = {
            true,
            "orchid",
            "",
        },
        [256627] = {
            true,
            "burlywood",
            "",
        },
        [268260] = {
            true,
            "burlywood",
            "",
        },
        [424958] = {
            true,
            "burlywood",
            "",
        },
        [333477] = {
            true,
            "burlywood",
            "",
        },
        [439621] = {
            true,
            "burlywood",
            "",
        },
        [451543] = {
            true,
            "burlywood",
            "",
        },
        [376892] = {
            true,
            "burlywood",
            "",
        },
        [367521] = {
            true,
            "orchid",
            "",
        },
        [340300] = {
            true,
            "burlywood",
            "",
        },
        [200784] = {
            true,
            "orchid",
            "",
        },
        [257426] = {
            true,
            "burlywood",
            "",
        },
        [1214546] = {
            true,
            "orangered",
            "",
        },
        [419351] = {
            true,
            "burlywood",
            "",
        },
        [473220] = {
            true,
            "orangered",
            "",
        },
        [434779] = {
            true,
            "burlywood",
            "",
        },
        [369563] = {
            true,
            "burlywood",
            "",
        },
        [320729] = {
            true,
            "burlywood",
            "",
        },
        [200913] = {
            true,
            "burlywood",
            "",
        },
        [422541] = {
            true,
            "orchid",
            "",
        },
        [448105] = {
            true,
            "burlywood",
            "",
        },
        [330614] = {
            true,
            "burlywood",
            "",
        },
        [427323] = {
            true,
            "burlywood",
            "",
        },
        [429427] = {
            true,
            "orchid",
            "",
        },
        [384978] = {
            true,
            "burlywood",
            "",
        },
        [412215] = {
            true,
            "burlywood",
            "",
        },
        [387910] = {
            true,
            "orchid",
            "",
        },
        [377383] = {
            true,
            "burlywood",
            "",
        },
        [375943] = {
            true,
            "burlywood",
            "",
        },
        [255567] = {
            true,
            "burlywood",
            "",
        },
        [257397] = {
            true,
            "orchid",
            "",
        },
        [333294] = {
            true,
            "burlywood",
            "",
        },
        [384868] = {
            true,
            "burlywood",
            "",
        },
        [339706] = {
            true,
            "burlywood",
            "",
        },
        [435012] = {
            true,
            "burlywood",
            "",
        },
        [447395] = {
            true,
            "burlywood",
            "",
        },
        [448619] = {
            true,
            "burlywood",
            "",
        },
        [265721] = {
            true,
            "burlywood",
            "",
        },
        [381525] = {
            true,
            "burlywood",
            "",
        },
        [317231] = {
            true,
            "burlywood",
            "",
        },
        [449130] = {
            true,
            "burlywood",
            "",
        },
        [437719] = {
            true,
            "orchid",
            "",
        },
        [391118] = {
            true,
            "burlywood",
            "",
        },
        [183465] = {
            true,
            "burlywood",
            "",
        },
        [369061] = {
            true,
            "burlywood",
            "",
        },
        [421910] = {
            true,
            "burlywood",
            "",
        },
        [272609] = {
            true,
            "burlywood",
            "",
        },
        [323608] = {
            true,
            "burlywood",
            "",
        },
        [377732] = {
            true,
            "orchid",
            "",
        },
        [200630] = {
            false,
            "darkorange",
            "",
        },
        [388060] = {
            true,
            "burlywood",
            "",
        },
        [459779] = {
            true,
            "orangered",
            "",
        },
        [369828] = {
            true,
            "orchid",
            "",
        },
        [425027] = {
            true,
            "burlywood",
            "",
        },
        [1217653] = {
            true,
            "orangered",
            "",
        },
        [164357] = {
            true,
            "burlywood",
            "",
        },
        [375439] = {
            true,
            "burlywood",
            "",
        },
        [385958] = {
            true,
            "burlywood",
            "",
        },
        [411012] = {
            true,
            "burlywood",
            "",
        },
        [397931] = {
            true,
            "burlywood",
            "",
        },
        [386660] = {
            true,
            "burlywood",
            "",
        },
        [377034] = {
            true,
            "burlywood",
            "",
        },
        [382708] = {
            true,
            "burlywood",
            "",
        },
        [421277] = {
            true,
            "burlywood",
            "",
        },
        [200345] = {
            true,
            "orchid",
            "",
        },
        [291865] = {
            true,
            "burlywood",
            "",
        },
        [188169] = {
            true,
            "burlywood",
            "",
        },
        [385578] = {
            true,
            "burlywood",
            "",
        },
        [262377] = {
            true,
            "mediumturquoise",
            "",
        },
        [375251] = {
            true,
            "burlywood",
            "",
        },
        [427869] = {
            true,
            "burlywood",
            "",
        },
        [427359] = {
            true,
            "orchid",
            "",
        },
        [226304] = {
            true,
            "burlywood",
            "",
        },
        [269029] = {
            true,
            "burlywood",
            "",
        },
        [372225] = {
            true,
            "orchid",
            "",
        },
        [372087] = {
            true,
            "burlywood",
            "",
        },
        [266209] = {
            true,
            "burlywood",
            "",
        },
        [428293] = {
            true,
            "burlywood",
            "",
        },
        [382712] = {
            true,
            "burlywood",
            "",
        },
        [374361] = {
            true,
            "burlywood",
            "",
        },
        [265540] = {
            true,
            "orchid",
            "",
        },
        [411994] = {
            true,
            "burlywood",
            "",
        },
        [199151] = {
            true,
            "orchid",
            "",
        },
        [253721] = {
            true,
            "orchid",
            "",
        },
        [275907] = {
            true,
            "burlywood",
            "",
        },
        [369573] = {
            true,
            "burlywood",
            "",
        },
        [369675] = {
            true,
            "burlywood",
            "",
        },
        [426893] = {
            true,
            "burlywood",
            "",
        },
        [340160] = {
            true,
            "burlywood",
            "",
        },
        [257862] = {
            true,
            "burlywood",
            "",
        },
        [375065] = {
            false,
            "orangered",
            "",
        },
        [321834] = {
            true,
            "burlywood",
            "",
        },
        [440218] = {
            true,
            "burlywood",
            "",
        },
        [1217496] = {
            true,
            "orangered",
            "",
        },
        [451496] = {
            true,
            "burlywood",
            "",
        },
        [447270] = {
            true,
            "burlywood",
            "",
        },
        [397889] = {
            true,
            "orchid",
            "",
        },
        [257756] = {
            true,
            "orchid",
            "",
        },
        [409492] = {
            false,
            "darkorange",
            "",
        },
        [453161] = {
            true,
            "burlywood",
            "",
        },
        [253517] = {
            false,
            "white",
            "",
        },
        [226296] = {
            true,
            "burlywood",
            "",
        },
        [324323] = {
            true,
            "burlywood",
            "",
        },
        [388392] = {
            true,
            "burlywood",
            "",
        },
        [434824] = {
            true,
            "burlywood",
            "",
        },
        [426260] = {
            true,
            "burlywood",
            "",
        },
        [427342] = {
            true,
            "orchid",
            "",
        },
        [450854] = {
            true,
            "burlywood",
            "",
        },
        [253544] = {
            true,
            "orchid",
            "",
        },
        [462216] = {
            true,
            "burlywood",
            "",
        },
        [472452] = {
            true,
            "orangered",
            "",
        },
        [367484] = {
            true,
            "orchid",
            "",
        },
        [200291] = {
            true,
            "orchid",
            "",
        },
        [375327] = {
            true,
            "burlywood",
            "",
        },
        [432198] = {
            true,
            "burlywood",
            "",
        },
        [426645] = {
            true,
            "burlywood",
            "",
        },
        [87618] = {
            true,
            "burlywood",
            "",
        },
        [321968] = {
            true,
            "burlywood",
            "",
        },
        [393432] = {
            true,
            "burlywood",
            "",
        },
        [436592] = {
            true,
            "burlywood",
            "",
        },
        [387950] = {
            true,
            "burlywood",
            "",
        },
        [377559] = {
            true,
            "burlywood",
            "",
        },
        [382277] = {
            true,
            "burlywood",
            "",
        },
        [209628] = {
            true,
            "mediumturquoise",
            "",
        },
        [426261] = {
            true,
            "burlywood",
            "",
        },
        [169179] = {
            true,
            "burlywood",
            "",
        },
        [441119] = {
            true,
            "burlywood",
            "",
        },
        [323496] = {
            true,
            "burlywood",
            "",
        },
        [473114] = {
            true,
            "orangered",
            "",
        },
        [372311] = {
            true,
            "burlywood",
            "",
        },
        [369465] = {
            true,
            "orchid",
            "",
        },
        [431494] = {
            true,
            "burlywood",
            "",
        },
        [200768] = {
            true,
            "burlywood",
            "",
        },
        [433662] = {
            true,
            "orchid",
            "",
        },
        [293986] = {
            true,
            "burlywood",
            "",
        },
        [449090] = {
            true,
            "burlywood",
            "",
        },
        [408141] = {
            true,
            "burlywood",
            "",
        },
        [396812] = {
            true,
            "orchid",
            "",
        },
        [445457] = {
            true,
            "burlywood",
            "",
        },
        [388911] = {
            true,
            "burlywood",
            "",
        },
        [320822] = {
            true,
            "orchid",
            "",
        },
        [448640] = {
            true,
            "burlywood",
            "",
        },
        [474018] = {
            true,
            "orangered",
            "",
        },
        [156718] = {
            true,
            "orchid",
            "",
        },
        [388976] = {
            true,
            "burlywood",
            "",
        },
        [422414] = {
            true,
            "burlywood",
            "",
        },
        [372201] = {
            true,
            "burlywood",
            "",
        },
        [427025] = {
            true,
            "burlywood",
            "",
        },
        [396665] = {
            true,
            "burlywood",
            "",
        },
        [378818] = {
            true,
            "orchid",
            "",
        },
        [331718] = {
            true,
            "burlywood",
            "",
        },
        [265019] = {
            true,
            "burlywood",
            "",
        },
        [88194] = {
            false,
            "orangered",
            "",
        },
        [373742] = {
            true,
            "burlywood",
            "",
        },
        [385536] = {
            true,
            "orchid",
            "",
        },
        [432520] = {
            true,
            "orchid",
            "",
        },
        [1214315] = {
            true,
            "orangered",
            "",
        },
        [200261] = {
            true,
            "burlywood",
            "",
        },
        [432967] = {
            true,
            "orchid",
            "",
        },
        [1217294] = {
            true,
            "orangered",
            "",
        },
        [371875] = {
            true,
            "orchid",
            "",
        },
        [188404] = {
            true,
            "burlywood",
            "",
        },
        [369409] = {
            true,
            "burlywood",
            "",
        },
        [474087] = {
            true,
            "orangered",
            "",
        },
        [412129] = {
            true,
            "burlywood",
            "",
        },
        [412505] = {
            true,
            "burlywood",
            "",
        },
        [416139] = {
            true,
            "burlywood",
            "",
        },
        [391723] = {
            true,
            "burlywood",
            "",
        },
        [260793] = {
            true,
            "burlywood",
            "",
        },
        [193505] = {
            true,
            "burlywood",
            "",
        },
        [268202] = {
            true,
            "orchid",
            "",
        },
        [333488] = {
            true,
            "burlywood",
            "",
        },
        [375348] = {
            true,
            "burlywood",
            "",
        },
        [265372] = {
            true,
            "burlywood",
            "",
        },
        [427616] = {
            true,
            "burlywood",
            "",
        },
        [376170] = {
            true,
            "burlywood",
            "",
        },
        [169929] = {
            true,
            "burlywood",
            "",
        },
        [461796] = {
            true,
            "orchid",
            "",
        },
        [257288] = {
            true,
            "burlywood",
            "",
        },
        [376171] = {
            true,
            "orchid",
            "",
        },
        [1215738] = {
            true,
            "orangered",
            "",
        },
        [413529] = {
            true,
            "burlywood",
            "",
        },
        [451843] = {
            true,
            "burlywood",
            "",
        },
        [383823] = {
            true,
            "orchid",
            "",
        },
        [466124] = {
            true,
            "orangered",
            "",
        },
        [465682] = {
            true,
            "orangered",
            "",
        },
    },
    ["ui_parent_cast_strata"] = "DIALOG",
    ["class_colors"] = {
        ["DEATHKNIGHT"] = {
            ["colorStr"] = "ffc31d3a",
        },
        ["WARRIOR"] = {
            ["colorStr"] = "ffc69a6d",
        },
        ["PALADIN"] = {
            ["colorStr"] = "fff48bb9",
        },
        ["WARLOCK"] = {
            ["colorStr"] = "ff8687ed",
        },
        ["DEMONHUNTER"] = {
            ["colorStr"] = "ffa22fc8",
        },
        ["SHAMAN"] = {
            ["colorStr"] = "ff006fdd",
        },
        ["DRUID"] = {
            ["colorStr"] = "ffff7c09",
        },
        ["EVOKER"] = {
            ["colorStr"] = "ff33937e",
        },
        ["ROGUE"] = {
            ["colorStr"] = "fffff467",
        },
    },
    ["script_auto_imported"] = {
        ["Aura - Is Cast Bar [P]"] = 1,
        ["Aura - Buff Alert"] = 15,
        ["Cast - Effect After Cast [P]"] = 2,
        ["Cast - Circular Swipe"] = 4,
        ["Aura - Debuff Alert"] = 12,
        ["Unit - Show Energy"] = 11,
        ["Cast - Castbar is Timer [P]"] = 2,
        ["Blink by Time Left"] = 1,
        ["Cast - Ultra Important"] = 14,
        ["Add - Health Markers [P]"] = 3,
        ["Cast - Small Alert"] = 12,
        ["Relics 9.2 M Dungeons"] = 2,
        ["Aura - Invalidate Unit"] = 1,
        ["Add - Important [P]"] = 4,
        ["Unit - Health Markers"] = 12,
        ["Unit - Main Target"] = 11,
        ["Aura - Blink Time Left"] = 13,
        ["Add - Explode on Die [P]"] = 1,
        ["Add - Tag Number [P]"] = 2,
        ["Unit Power"] = 1,
        ["Cast - On Going Cast [P]"] = 2,
        ["Cast - Special Ability [P]"] = 3,
        ["Cast - Tank Interrupt"] = 12,
        ["Fixate by Unit Buff [P]"] = 2,
        ["Cast - Spark Color [P]"] = 2,
        ["Cast - Heal Stun [P]"] = 2,
        ["Cast - Voidzone [P]"] = 2,
        ["Cast - Important Target [P]"] = 2,
        ["Unit - Important"] = 11,
        ["Cast - Glowing [P]"] = 10,
        ["Cast - Shield Interrupt"] = 2,
        ["Color Change"] = 1,
        ["Cast - Very Important"] = 15,
        ["Cast - Alert + Timer [P]"] = 4,
        ["Spiteful Affix"] = 3,
        ["Cast - Quick Flash"] = 2,
        ["Aura is Shield [P]"] = 5,
        ["Cast - Debuff [P]"] = 2,
        ["Cast - Simple Interrupt [P]"] = 2,
        ["Aura While Casting [P]"] = 1,
        ["Cast - Big Alert"] = 14,
        ["Cast - Ongoing Cast [P]"] = 4,
        ["Cast - Important by Color [P]"] = 2,
        ["Cast - Heal Cut [P]"] = 3,
        ["Add - Warning [P]"] = 5,
        ["Auto Set Skull"] = 11,
        ["Cast - AoE Hit All [P]"] = 3,
        ["Add - Non Elite Trash [P]"] = 4,
        ["Countdown"] = 12,
        ["Aura Border Color"] = 1,
        ["Cast - Stop Casting"] = 4,
        ["Cast - AoE With Range [P]"] = 2,
        ["Cast - Frontal Cone"] = 17,
        ["Fixate"] = 11,
        ["Cast - Heroic Leap [P]"] = 3,
        ["Cast - Shining Green [P]"] = 3,
        ["Explosion Affix M+"] = 14,
        ["Fixate On You"] = 12,
    },
    ["extra_icon_anchor"] = {
        ["x"] = 0,
        ["side"] = 9,
    },
    ["range_check_alpha"] = 0.79999995231628,
    ["semver"] = "1.0.45",
    ["plater_resources_padding"] = 2,
    ["aura_frame2_anchor"] = {
        ["y"] = 0,
        ["x"] = 2.5,
        ["side"] = 6,
    },
    ["cast_statusbar_texture"] = "Cronix",
    ["auto_toggle_friendly"] = {
        ["world"] = false,
    },
    ["indicator_faction"] = false,
    ["castbar_icon_x_offset"] = 11,
    ["extra_icon_height"] = 8,
    ["plater_resources_show_number"] = false,
    ["debuff_show_cc_border"] = {
        0.090196080505848,
        0.090196080505848,
        0.090196080505848,
    },
    ["aura_consolidate"] = true,
    ["extra_icon_width"] = 12,
    ["health_statusbar_texture"] = "Cronix",
    ["hook_auto_imported"] = {
        ["Color Automation"] = 1,
        ["Blockade Encounter"] = 1,
        ["Cast Bar Icon Config"] = 2,
        ["Hide Neutral Units"] = 1,
        ["Aura Reorder"] = 3,
        ["Reorder Nameplate"] = 4,
        ["Dont Have Aura"] = 1,
        ["Players Targetting Amount"] = 4,
        ["Bwonsamdi Reaping"] = 1,
        ["Jaina Encounter"] = 6,
        ["Execute Range"] = 1,
        ["Attacking Specific Unit"] = 2,
        ["Extra Border"] = 2,
        ["Targetting Alpha"] = 3,
        ["Target Color"] = 3,
        ["Combo Points"] = 6,
        ["Monk Statue"] = 2,
    },
    ["extra_icon_border_color"] = {
        0.090196080505848,
        0.090196080505848,
        0.090196080505848,
    },
    ["minor_width_scale"] = 0.99999994039536,
    ["indicator_pet"] = false,
    ["captured_spells"] = {
        [384524] = {
            ["encounterName"] = "Watcher Irideus",
            ["source"] = "Watcher Irideus",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 189719,
        },
        [376683] = {
            ["encounterName"] = "Balakar Khan",
            ["source"] = "Balakar Khan",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 186151,
        },
        [375727] = {
            ["encounterName"] = "Chrono-Lord Deios",
            ["source"] = "Chrono-Lord Deios",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 184125,
        },
        [88308] = {
            ["encounterName"] = "Altairus",
            ["source"] = "Altairus",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 43873,
        },
        [372222] = {
            ["encounterName"] = "Azureblade",
            ["source"] = "Azureblade",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 186739,
        },
        [267354] = {
            ["encounterName"] = "",
            ["source"] = "Hired Assassin",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 134232,
        },
        [382233] = {
            ["encounterName"] = "",
            ["source"] = "Batak",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 193462,
        },
        [323137] = {
            ["encounterName"] = "Ingra Maloch",
            ["source"] = "Droman Oulfarran",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 164804,
        },
        [372735] = {
            ["encounterName"] = "",
            ["source"] = "Flashfrost Earthshaper",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 187969,
        },
        [1217294] = {
            ["encounterName"] = "Coin-Operated Crowd Pummeler",
            ["source"] = "Coin-Operated Crowd Pummeler",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 129214,
        },
        [269843] = {
            ["encounterName"] = "Unbound Abomination",
            ["source"] = "Unbound Abomination",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 133007,
        },
        [283422] = {
            ["encounterName"] = "Tussle Tonks",
            ["source"] = "Gnomercy 4.U.",
            ["npcID"] = 145185,
            ["isChanneled"] = false,
            ["event"] = "SPELL_CAST_SUCCESS",
            ["encounterID"] = 2257,
        },
        [388801] = {
            ["encounterName"] = "",
            ["source"] = "Risen Warrior",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 195855,
        },
        [426860] = {
            ["encounterName"] = "Anub'ikkaj",
            ["source"] = "Anub'ikkaj",
            ["npcID"] = 211089,
            ["isChanneled"] = false,
            ["event"] = "SPELL_CAST_SUCCESS",
            ["encounterID"] = 2838,
        },
        [260894] = {
            ["encounterName"] = "Elder Leaxa",
            ["source"] = "Elder Leaxa",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 131318,
        },
        [461796] = {
            ["encounterName"] = "",
            ["source"] = "Darkfuse Demolitionist",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 229212,
        },
        [443500] = {
            ["encounterName"] = "",
            ["source"] = "Royal Swarmguard",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 220197,
        },
        [226406] = {
            ["encounterName"] = "",
            ["source"] = "Emberhusk Dominator",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 102287,
        },
        [183088] = {
            ["encounterName"] = "",
            ["source"] = "Mightstone Breaker",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 90997,
        },
        [267551] = {
            ["encounterName"] = "",
            ["source"] = "Coin-Operated Crowd Pummeler",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 129214,
        },
        [412200] = {
            ["encounterName"] = "",
            ["source"] = "Time-Lost Aerobot",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 205723,
        },
        [197974] = {
            ["encounterName"] = "Ilysanna Ravencrest",
            ["source"] = "Soul-torn Vanguard",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 100485,
        },
        [370764] = {
            ["encounterName"] = "",
            ["source"] = "",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 196116,
        },
        [201226] = {
            ["encounterName"] = "",
            ["source"] = "Bloodtainted Fury",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 100531,
        },
        [259940] = {
            ["encounterName"] = "Rixxa Fluxfume",
            ["source"] = "Rixxa Fluxflame",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 129231,
        },
        [377204] = {
            ["encounterName"] = "Warlord Sargha",
            ["source"] = "Warlord Sargha",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 189901,
        },
        [468813] = {
            ["encounterName"] = "Geezle Gigazap",
            ["source"] = "Geezle Gigazap",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 226404,
        },
        [412012] = {
            ["encounterName"] = "",
            ["source"] = "Infinite Timeslicer",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 205408,
        },
        [427376] = {
            ["encounterName"] = "",
            ["source"] = "Gilgoblin Hunter",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 40935,
        },
        [465754] = {
            ["encounterName"] = "",
            ["source"] = "Shreddinator 3000",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 230740,
        },
        [332708] = {
            ["encounterName"] = "",
            ["source"] = "Heavin the Breaker",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 167532,
        },
        [275907] = {
            ["encounterName"] = "Azerokk",
            ["source"] = "Azerokk",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 129227,
        },
        [432031] = {
            ["encounterName"] = "Ki'katal the Harvester",
            ["source"] = "Black Blood",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 215968,
        },
        [447395] = {
            ["encounterName"] = "Forgemaster Throngus",
            ["source"] = "Forgemaster Throngus",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 40177,
        },
        [372107] = {
            ["encounterName"] = "Kokia Blazehoof",
            ["source"] = "Kokia Blazehoof",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 189232,
        },
        [257870] = {
            ["encounterName"] = "",
            ["source"] = "Irontide Buccaneer",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 130011,
        },
        [256627] = {
            ["encounterName"] = "",
            ["source"] = "Scrimshaw Enforcer",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 129374,
        },
        [268260] = {
            ["encounterName"] = "",
            ["source"] = "Ashvane Cannoneer",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 138465,
        },
        [424958] = {
            ["encounterName"] = "Stormguard Gorren",
            ["source"] = "Stormguard Gorren",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 207205,
        },
        [333477] = {
            ["encounterName"] = "",
            ["source"] = "Goregrind",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 163621,
        },
        [439621] = {
            ["encounterName"] = "Fangs of the Queen",
            ["source"] = "Nx",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 216648,
        },
        [451543] = {
            ["encounterName"] = "",
            ["source"] = "Eye of the Queen",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 220003,
        },
        [376892] = {
            ["encounterName"] = "Balakar Khan",
            ["source"] = "Balakar Khan",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 186151,
        },
        [367521] = {
            ["encounterName"] = "",
            ["source"] = "Bonebolt Hunter",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 185534,
        },
        [340300] = {
            ["encounterName"] = "",
            ["source"] = "Mistveil Gorgegullet",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 173720,
        },
        [169929] = {
            ["encounterName"] = "Yalnu",
            ["source"] = "Flourishing Ancient",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 84400,
        },
        [257426] = {
            ["encounterName"] = "",
            ["source"] = "Irontide Enforcer",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 129602,
        },
        [1214546] = {
            ["encounterName"] = "",
            ["source"] = "Void Ascendant",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 212793,
        },
        [419351] = {
            ["encounterName"] = "",
            ["source"] = "Infinite Saboteur",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 208438,
        },
        [473220] = {
            ["encounterName"] = "Big M.O.M.M.A.",
            ["source"] = "Big M.O.M.M.A.",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 226398,
        },
        [434779] = {
            ["encounterName"] = "Orator Krix'vizk",
            ["source"] = "Orator Krix'vizk",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 216619,
        },
        [369563] = {
            ["encounterName"] = "The Lost Dwarves",
            ["source"] = "Baelog",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 184581,
        },
        [200913] = {
            ["encounterName"] = "",
            ["source"] = "Wyrmtongue Scavenger",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 98792,
        },
        [448105] = {
            ["encounterName"] = "Drahga Shadowburner",
            ["source"] = "Valiona",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 40320,
        },
        [330614] = {
            ["encounterName"] = "",
            ["source"] = "Rancid Gasbag",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 163086,
        },
        [427323] = {
            ["encounterName"] = "",
            ["source"] = "Cursed Stormrider",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 212786,
        },
        [429427] = {
            ["encounterName"] = "",
            ["source"] = "Cursedforge Stoneshaper",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 214066,
        },
        [412215] = {
            ["encounterName"] = "",
            ["source"] = "Spurlok, Timesworn Sentinel",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 205158,
        },
        [257397] = {
            ["encounterName"] = "",
            ["source"] = "Irontide Bonesaw",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 129788,
        },
        [333294] = {
            ["encounterName"] = "",
            ["source"] = "Nefarious Darkspeaker",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 169893,
        },
        [375943] = {
            ["encounterName"] = "Balakar Khan",
            ["source"] = "Balakar Khan",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 186151,
        },
        [448619] = {
            ["encounterName"] = "",
            ["source"] = "Careless Hopgoblin",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 223423,
        },
        [317231] = {
            ["encounterName"] = "Xav the Unfallen",
            ["source"] = "Xav the Unfallen",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 162329,
        },
        [449130] = {
            ["encounterName"] = "",
            ["source"] = "Forge Loader",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 213343,
        },
        [437719] = {
            ["encounterName"] = "",
            ["source"] = "Primalist Galesinger",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 190373,
        },
        [391118] = {
            ["encounterName"] = "",
            ["source"] = "Scalebane Lieutenant",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 191739,
        },
        [369061] = {
            ["encounterName"] = "Emberon",
            ["source"] = "Emberon",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 184422,
        },
        [421910] = {
            ["encounterName"] = "Blazikon",
            ["source"] = "Blazikon",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 208743,
        },
        [323608] = {
            ["encounterName"] = "Mordretha",
            ["source"] = "Mordretha, the Endless Empress",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 165946,
        },
        [377732] = {
            ["encounterName"] = "",
            ["source"] = "Refti Custodian",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 184319,
        },
        [408141] = {
            ["encounterName"] = "Blight of Galakrond",
            ["source"] = "Dazhak",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 201788,
        },
        [388060] = {
            ["encounterName"] = "",
            ["source"] = "Stinkbreath",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 187033,
        },
        [450854] = {
            ["isChanneled"] = false,
            ["event"] = "SPELL_CAST_SUCCESS",
            ["source"] = "Deathscreamer Iken'tak",
            ["npcID"] = 211263,
        },
        [369573] = {
            ["encounterName"] = "The Lost Dwarves",
            ["source"] = "Baelog",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 184581,
        },
        [164357] = {
            ["encounterName"] = "Witherbark",
            ["source"] = "Witherbark",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 81522,
        },
        [375439] = {
            ["encounterName"] = "Magmatusk",
            ["source"] = "Magmatusk",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 181861,
        },
        [385958] = {
            ["encounterName"] = "Vexamus",
            ["source"] = "Vexamus",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 194181,
        },
        [411012] = {
            ["encounterName"] = "",
            ["source"] = "Young Storm Dragon",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 45919,
        },
        [384868] = {
            ["encounterName"] = "",
            ["source"] = "Nokhud Longbow",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 192789,
        },
        [386660] = {
            ["encounterName"] = "Leymor",
            ["source"] = "Leymor",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 186644,
        },
        [377034] = {
            ["encounterName"] = "Crawth",
            ["source"] = "Crawth",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 191736,
        },
        [382708] = {
            ["encounterName"] = "",
            ["source"] = "Qalashi Warden",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 193293,
        },
        [421277] = {
            ["encounterName"] = "The Candle King",
            ["source"] = "The Candle King",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 208745,
        },
        [200345] = {
            ["encounterName"] = "",
            ["source"] = "Risen Archer",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 98275,
        },
        [291865] = {
            ["encounterName"] = "King Mechagon",
            ["source"] = "Aerial Unit R-21/X",
            ["npcID"] = 150396,
            ["isChanneled"] = false,
            ["event"] = "SPELL_CAST_SUCCESS",
            ["encounterID"] = 2260,
        },
        [188169] = {
            ["encounterName"] = "Rokmora",
            ["source"] = "",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 91003,
        },
        [385578] = {
            ["encounterName"] = "Azureblade",
            ["source"] = "Azureblade",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 186739,
        },
        [387910] = {
            ["encounterName"] = "",
            ["source"] = "Algeth'ar Echoknight",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 196200,
        },
        [451496] = {
            ["encounterName"] = "",
            ["source"] = "Eye of the Queen",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 220003,
        },
        [412129] = {
            ["encounterName"] = "",
            ["source"] = "Lerai, Timesworn Maiden",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 205152,
        },
        [451843] = {
            ["encounterName"] = "",
            ["source"] = "Stormguard Gorren",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 207205,
        },
        [1215738] = {
            ["encounterName"] = "An Affront of Challengers",
            ["source"] = "Paceran the Virulent",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 164463,
        },
        [255567] = {
            ["encounterName"] = "",
            ["source"] = "T'lonja",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 128455,
        },
        [257288] = {
            ["encounterName"] = "Chopper Redhook",
            ["source"] = "Irontide Cleaver",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 129879,
        },
        [262377] = {
            ["encounterName"] = "",
            ["source"] = "Crawler Mine",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 133482,
        },
        [1214315] = {
            ["encounterName"] = "Kyrioss",
            ["source"] = "Kyrioss",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 209230,
        },
        [428293] = {
            ["encounterName"] = "Lady Naz'jar",
            ["source"] = "Naz'jar Honor Guard",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 40633,
        },
        [382712] = {
            ["encounterName"] = "",
            ["source"] = "Wilted Oak",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 186229,
        },
        [374361] = {
            ["encounterName"] = "Echo of Doragosa",
            ["source"] = "Echo of Doragosa",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 190609,
        },
        [265540] = {
            ["encounterName"] = "",
            ["source"] = "Fetid Maggot",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 130909,
        },
        [269029] = {
            ["encounterName"] = "Dread Captain Lockwood",
            ["source"] = "Dread Captain Lockwood",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 129208,
        },
        [376170] = {
            ["encounterName"] = "Decatriarch Wratheye",
            ["source"] = "Decatriarch Wratheye",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 186121,
        },
        [340160] = {
            ["encounterName"] = "",
            ["source"] = "Mistveil Matriarch",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 173655,
        },
        [268202] = {
            ["encounterName"] = "Gorak Tul",
            ["source"] = "Deathtouched Slaver",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 135552,
        },
        [333488] = {
            ["encounterName"] = "Amarth, The Harvester",
            ["source"] = "Amarth",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 163157,
        },
        [272609] = {
            ["encounterName"] = "",
            ["source"] = "Faceless Corruptor",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 138281,
        },
        [426893] = {
            ["encounterName"] = "",
            ["source"] = "Quartermaster Koratite",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 209801,
        },
        [465682] = {
            ["encounterName"] = "",
            ["source"] = "Darkfuse Inspector",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 231385,
        },
        [369828] = {
            ["encounterName"] = "",
            ["source"] = "Vicious Basilisk",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 184023,
        },
        [427869] = {
            ["encounterName"] = "Void Speaker Eirich",
            ["source"] = "Void Speaker Eirich",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 213119,
        },
        [321834] = {
            ["encounterName"] = "Mistcaller",
            ["source"] = "Mistcaller",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 164501,
        },
        [440218] = {
            ["encounterName"] = "Fangs of the Queen",
            ["source"] = "Vx",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 216649,
        },
        [416139] = {
            ["encounterName"] = "Chrono-Lord Deios",
            ["source"] = "Chrono-Lord Deios",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 199000,
        },
        [427359] = {
            ["encounterName"] = "",
            ["source"] = "Arathi Footman",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 206705,
        },
        [375351] = {
            ["encounterName"] = "",
            ["source"] = "Glacial Proto-Dragon",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 190403,
        },
        [397889] = {
            ["encounterName"] = "",
            ["source"] = "Fallen Waterspeaker",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 200126,
        },
        [257756] = {
            ["encounterName"] = "",
            ["source"] = "",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 129527,
        },
        [427342] = {
            ["encounterName"] = "",
            ["source"] = "Arathi Footman",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 206705,
        },
        [453161] = {
            ["encounterName"] = "",
            ["source"] = "Hulking Bloodguard",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 216338,
        },
        [324323] = {
            ["encounterName"] = "",
            ["source"] = "Skeletal Marauder",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 165919,
        },
        [474087] = {
            ["encounterName"] = "Kul'tharok",
            ["source"] = "Kul'tharok",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 162309,
        },
        [331718] = {
            ["encounterName"] = "",
            ["source"] = "Mistveil Defender",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 171772,
        },
        [265019] = {
            ["encounterName"] = "",
            ["source"] = "Chosen Blood Matron",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 131436,
        },
        [369409] = {
            ["encounterName"] = "",
            ["source"] = "Earthen Custodian",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 184130,
        },
        [426260] = {
            ["encounterName"] = "",
            ["source"] = "",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 212411,
        },
        [375348] = {
            ["encounterName"] = "",
            ["source"] = "Gusting Proto-Dragon",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 190401,
        },
        [378818] = {
            ["encounterName"] = "",
            ["source"] = "Qalashi Thaumaturge",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 192788,
        },
        [253721] = {
            ["encounterName"] = "",
            ["source"] = "",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 127879,
        },
        [462216] = {
            ["encounterName"] = "",
            ["source"] = "Twilight Flamerender",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 224240,
        },
        [375251] = {
            ["encounterName"] = "Magmatusk",
            ["source"] = "Magmatusk",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 181861,
        },
        [367484] = {
            ["encounterName"] = "",
            ["source"] = "Claw Fighter",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 185508,
        },
        [383823] = {
            ["encounterName"] = "",
            ["source"] = "Nokhud Hornsounder",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 192796,
        },
        [427025] = {
            ["encounterName"] = "The Darkness",
            ["source"] = "The Darkness",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 208747,
        },
        [372201] = {
            ["encounterName"] = "",
            ["source"] = "Qalashi Irontorch",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 189464,
        },
        [426645] = {
            ["encounterName"] = "",
            ["source"] = "Naz'jar Ravager",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 212673,
        },
        [87618] = {
            ["encounterName"] = "Asaad",
            ["source"] = "",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 43875,
        },
        [321968] = {
            ["encounterName"] = "",
            ["source"] = "Tirnenn Villager",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 164929,
        },
        [393432] = {
            ["encounterName"] = "",
            ["source"] = "Refti Defender",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 190340,
        },
        [373742] = {
            ["encounterName"] = "Chargath, Bane of Scales",
            ["source"] = "Chargath, Bane of Scales",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 189340,
        },
        [387950] = {
            ["encounterName"] = "",
            ["source"] = "",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 187919,
        },
        [377559] = {
            ["encounterName"] = "Treemouth",
            ["source"] = "Treemouth",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 186120,
        },
        [422414] = {
            ["encounterName"] = "",
            ["source"] = "Shuffling Horror",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 208456,
        },
        [209628] = {
            ["encounterName"] = "Advisor Melandrus",
            ["source"] = "",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 104218,
        },
        [375327] = {
            ["encounterName"] = "",
            ["source"] = "Subterranean Proto-Dragon",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 190404,
        },
        [448640] = {
            ["encounterName"] = "",
            ["source"] = "Cursedforge Honor Guard",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 214264,
        },
        [441119] = {
            ["encounterName"] = "",
            ["source"] = "Bee Wrangler",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 210264,
        },
        [320822] = {
            ["encounterName"] = "",
            ["source"] = "Zolramus Bonemender",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 165222,
        },
        [426261] = {
            ["encounterName"] = "",
            ["source"] = "Sootsnout",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 212412,
        },
        [169179] = {
            ["encounterName"] = "Yalnu",
            ["source"] = "Yalnu",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 83846,
        },
        [369465] = {
            ["encounterName"] = "",
            ["source"] = "Earthen Weaver",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 186420,
        },
        [431494] = {
            ["isChanneled"] = false,
            ["event"] = "SPELL_CAST_SUCCESS",
            ["source"] = "Nightfall Tactician",
            ["npcID"] = 213934,
        },
        [323496] = {
            ["encounterName"] = "",
            ["source"] = "Flesh Crafter",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 165872,
        },
        [433662] = {
            ["encounterName"] = "",
            ["source"] = "Black Blood",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 216856,
        },
        [293986] = {
            ["isChanneled"] = false,
            ["event"] = "SPELL_CAST_SUCCESS",
            ["source"] = "Blastatron X-80",
            ["npcID"] = 151476,
        },
        [449090] = {
            ["encounterName"] = "",
            ["source"] = "Careless Hopgoblin",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 223423,
        },
        [473114] = {
            ["encounterName"] = "Swampface",
            ["source"] = "Swampface",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 226396,
        },
        [200768] = {
            ["encounterName"] = "",
            ["source"] = "Crazed Razorbeak",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 95766,
        },
        [445457] = {
            ["encounterName"] = "Skardyn Monstrosity",
            ["source"] = "Voidstone Monstrosity",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 207207,
        },
        [388911] = {
            ["encounterName"] = "",
            ["source"] = "Spellbound Battleaxe",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 196577,
        },
        [200291] = {
            ["encounterName"] = "",
            ["source"] = "Risen Scout",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 98691,
        },
        [474018] = {
            ["encounterName"] = "",
            ["source"] = "Cursed Stormrider",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 212786,
        },
        [432198] = {
            ["encounterName"] = "Brewmaster Aldryr",
            ["source"] = "Brew Master Aldryr",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 210271,
        },
        [156718] = {
            ["encounterName"] = "",
            ["source"] = "Monstrous Corpse Spider",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 76104,
        },
        [388976] = {
            ["encounterName"] = "",
            ["source"] = "Arcane Ravager",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 196671,
        },
        [382277] = {
            ["encounterName"] = "",
            ["source"] = "Balara",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 193457,
        },
        [436592] = {
            ["encounterName"] = "Goldie Baronbottom",
            ["source"] = "Goldie Baronbottom",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 214661,
        },
        [372311] = {
            ["encounterName"] = "",
            ["source"] = "Qalashi Trainee",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 189266,
        },
        [396812] = {
            ["encounterName"] = "",
            ["source"] = "Spellbound Scepter",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 196576,
        },
        [472452] = {
            ["encounterName"] = "Big M.O.M.M.A.",
            ["source"] = "Darkfuse Mechadrone",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 228424,
        },
        [434824] = {
            ["encounterName"] = "",
            ["source"] = "Ixin",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 217531,
        },
        [226296] = {
            ["encounterName"] = "",
            ["source"] = "Vileshard Hulk",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 91000,
        },
        [447270] = {
            ["encounterName"] = "Captain Dailcry",
            ["source"] = "Captain Dailcry",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 207946,
        },
        [1217496] = {
            ["encounterName"] = "",
            ["source"] = "Bubbles",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 231197,
        },
        [385536] = {
            ["encounterName"] = "",
            ["source"] = "Primalist Flamedancer",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 190206,
        },
        [432520] = {
            ["isChanneled"] = false,
            ["event"] = "SPELL_CAST_SUCCESS",
            ["source"] = "Nightfall Darkcaster",
            ["npcID"] = 213893,
        },
        [396665] = {
            ["encounterName"] = "",
            ["source"] = "Magmas",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 199027,
        },
        [200261] = {
            ["encounterName"] = "",
            ["source"] = "Soul-Torn Champion",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 98243,
        },
        [432967] = {
            ["encounterName"] = "",
            ["source"] = "Sentry Stagshell",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 216340,
        },
        [199151] = {
            ["encounterName"] = "",
            ["source"] = "",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 96611,
        },
        [411994] = {
            ["encounterName"] = "",
            ["source"] = "Infinite Chronoweaver",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 205384,
        },
        [188404] = {
            ["encounterName"] = "Hymdall",
            ["source"] = "",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 97788,
        },
        [266209] = {
            ["encounterName"] = "",
            ["source"] = "Fallen Deathspeaker",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 134284,
        },
        [372087] = {
            ["encounterName"] = "",
            ["source"] = "Defier Draghar",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 187897,
        },
        [372225] = {
            ["encounterName"] = "",
            ["source"] = "Qalashi Bonesplitter",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 189467,
        },
        [412505] = {
            ["encounterName"] = "",
            ["source"] = "Tyr's Vanguard",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 205151,
        },
        [226304] = {
            ["encounterName"] = "",
            ["source"] = "Vileshard Hulk",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 91000,
        },
        [391723] = {
            ["encounterName"] = "",
            ["source"] = "Flamegullet",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 197697,
        },
        [260793] = {
            ["encounterName"] = "Cragmaw the Infested",
            ["source"] = "Cragmaw the Infested",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 131817,
        },
        [193505] = {
            ["encounterName"] = "",
            ["source"] = "Vileshard Hulk",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 91000,
        },
        [397931] = {
            ["encounterName"] = "",
            ["source"] = "",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 57109,
        },
        [1217653] = {
            ["encounterName"] = "Demolition Duo",
            ["source"] = "Keeza Quickfuse",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 226403,
        },
        [425027] = {
            ["encounterName"] = "",
            ["source"] = "Earth Infused Golem",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 210109,
        },
        [265372] = {
            ["encounterName"] = "",
            ["source"] = "Bewitched Captain",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 131587,
        },
        [183465] = {
            ["encounterName"] = "",
            ["source"] = "Tarspitter Lurker",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 91001,
        },
        [381525] = {
            ["encounterName"] = "Kyrakka and Erkhart Stormvein",
            ["source"] = "Kyrakka",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 190484,
        },
        [265721] = {
            ["encounterName"] = "",
            ["source"] = "",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 200349,
        },
        [200784] = {
            ["encounterName"] = "",
            ["source"] = "Wyrmtongue Scavenger",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 98792,
        },
        [435012] = {
            ["encounterName"] = "Anub'zekt",
            ["source"] = "Anub'zekt",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 215405,
        },
        [339706] = {
            ["encounterName"] = "Mordretha",
            ["source"] = "",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 173549,
        },
        [257862] = {
            ["encounterName"] = "Hadal Darkfathom",
            ["source"] = "Hadal Darkfathom",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 128651,
        },
        [413529] = {
            ["encounterName"] = "",
            ["source"] = "Timestream Anomaly",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 199749,
        },
        [377383] = {
            ["encounterName"] = "",
            ["source"] = "Alpha Eagle",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 192333,
        },
        [384978] = {
            ["encounterName"] = "Umbrelskul",
            ["source"] = "Umbrelskul",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 186738,
        },
        [459779] = {
            ["encounterName"] = "Demolition Duo",
            ["source"] = "Bront",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 226402,
        },
        [320729] = {
            ["encounterName"] = "Xav the Unfallen",
            ["source"] = "Xav the Unfallen",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 162329,
        },
    },
    ["aura_frame1_anchor"] = {
        ["y"] = 8,
        ["side"] = 1,
    },
    ["aura_timer_text_font"] = "Cronix-Bold",
    ["cast_statusbar_color_finished"] = {
        0.52156865596771,
        0.83921575546265,
        0.58431375026703,
    },
    ["extra_icon_stack_font"] = "Cronix",
    ["aura_height"] = 13,
    ["cast_statusbar_bgtexture"] = "Cronix",
    ["plater_resources_personal_bar"] = false,
    ["target_indicator"] = "NONE",
    ["extra_icon_stack_size"] = 7,
    ["aura_show_buff_by_the_unit"] = false,
    ["saved_cvars"] = {
        ["ShowClassColorInNameplate"] = "1",
        ["nameplateOverlapV"] = "1.1000000238419",
        ["nameplateLargeTopInset"] = "0.049999997019768",
        ["nameplateShowEnemyMinus"] = "1",
        ["NamePlateClassificationScale"] = "1",
        ["nameplateShowFriendlyTotems"] = "0",
        ["nameplatePersonalHideDelaySeconds"] = "0.2",
        ["nameplateShowFriendlyPets"] = "0",
        ["nameplatePersonalShowInCombat"] = "1",
        ["nameplateTargetRadialPosition"] = "1",
        ["nameplateMinAlpha"] = "0.90135484",
        ["nameplateResourceOnTarget"] = "0",
        ["clampTargetNameplateToScreen"] = "1",
        ["nameplateLargerScale"] = "1.0999999046326",
        ["nameplateMaxDistance"] = "60",
        ["nameplateShowFriendlyMinions"] = "0",
        ["nameplateSelfScale"] = "1.0",
        ["nameplateOtherBottomInset"] = "0.049999997019768",
        ["nameplateTargetBehindMaxDistance"] = "30",
        ["nameplateShowEnemies"] = "1",
        ["NamePlateVerticalScale"] = "1",
        ["nameplateSelectedAlpha"] = "1",
        ["nameplateShowSelf"] = "0",
        ["nameplateSelfTopInset"] = "0.5",
        ["nameplateMotionSpeed"] = "0.054999995976686",
        ["nameplateGlobalScale"] = "1",
        ["nameplateShowEnemyMinions"] = "1",
        ["nameplateShowFriendlyNPCs"] = "1",
        ["nameplateSelectedScale"] = "1.1000000238419",
        ["nameplatePersonalShowWithTarget"] = "0",
        ["nameplateShowAll"] = "1",
        ["nameplateMinAlphaDistance"] = "-158489.31924611",
        ["nameplateLargeBottomInset"] = "0.049999997019768",
        ["nameplateMotion"] = "1",
        ["nameplateOccludedAlphaMult"] = "1",
        ["nameplateMinScale"] = "1",
        ["NamePlateHorizontalScale"] = "1",
        ["nameplateOtherTopInset"] = "0.049999997019768",
        ["nameplateOtherAtBase"] = "0",
        ["nameplateSelfBottomInset"] = "0.2",
        ["nameplatePlayerMaxDistance"] = "60",
        ["nameplateShowFriendlyGuardians"] = "0",
        ["nameplateSelfAlpha"] = "0.75",
        ["nameplatePersonalShowAlways"] = "0",
        ["nameplateShowFriends"] = "0",
        ["ShowNamePlateLoseAggroFlash"] = "1",
        ["nameplateShowOnlyNames"] = "1",
    },
    ["login_counter"] = 20389,
    ["click_space_friendly"] = {
        130,
    },
    ["aura_stack_font"] = "Cronix-Bold",
    ["blizzard_nameplate_font"] = "Cronix-Bold",
    ["auto_toggle_combat"] = {
        ["blizz_healthbar_ooc"] = true,
    },
    ["hide_friendly_castbars"] = true,
    ["OptionsPanelDB"] = {
        ["PlaterOptionsPanelFrame"] = {
            ["scale"] = 1.1000000238419,
        },
    },
    ["aura_timer_text_shadow_color"] = {
        nil,
        nil,
        nil,
        0,
    },
    ["auras_per_row_amount"] = 7,
    ["plater_resources_show_depleted"] = false,
    ["blizzard_nameplate_large_font"] = "Cronix-Bold",
    ["hover_highlight_alpha"] = 0.19999998807907,
    ["usePlaterWidget"] = false,
    ["plate_config"] = {
        ["player"] = {
            ["spellpercent_text_font"] = "Cronix-Bold",
            ["power_percent_text_enabled"] = false,
            ["level_text_font"] = "Accidental Presidency",
            ["actorname_text_font"] = "Accidental Presidency",
            ["big_actortitle_text_font"] = "Accidental Presidency",
            ["spellname_text_font"] = "Cronix-Bold",
            ["click_through"] = true,
            ["big_actorname_text_font"] = "Accidental Presidency",
            ["power_percent_text_color"] = {
                1,
                1,
                1,
            },
            ["percent_text_font"] = "Cronix-Bold",
            ["power_percent_text_font"] = "Cronix-Bold",
        },
        ["friendlyplayer"] = {
            ["actorname_use_friends_color"] = false,
            ["spellpercent_text_font"] = "Cronix-Bold",
            ["level_text_size"] = 7,
            ["actorname_use_class_color"] = true,
            ["cast"] = {
                115,
                2,
            },
            ["percent_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["spellpercent_text_anchor"] = {
                ["y"] = -0.80000305175781,
                ["x"] = 3.8999938964844,
                ["side"] = 5,
            },
            ["spellname_text_outline"] = "OUTLINE",
            ["big_actorname_text_shadow_color"] = {
                0,
                0,
                0,
                1,
            },
            ["level_text_font"] = "Cronix-Bold",
            ["actorname_text_font"] = "Cronix-Bold",
            ["big_actorname_text_shadow_color_offset"] = {
                1,
                -1,
            },
            ["mana_incombat"] = {
                nil,
                4,
            },
            ["actorname_use_guild_color"] = false,
            ["all_names"] = true,
            ["big_actortitle_text_outline"] = "OUTLINE",
            ["actorname_text_spacing"] = 7,
            ["only_damaged"] = false,
            ["quest_color_enemy"] = {
                0.63921570777893,
                1,
                0.31764706969261,
                1,
            },
            ["only_thename"] = true,
            ["big_actortitle_text_font"] = "Cronix",
            ["percent_text_ooc"] = true,
            ["level_text_anchor"] = {
                ["x"] = 1,
                ["side"] = 5,
            },
            ["big_actortitle_text_shadow_color_offset"] = {
                1,
                -1,
            },
            ["cast_incombat"] = {
                115,
                2,
            },
            ["actorname_text_anchor"] = {
                ["y"] = -3,
            },
            ["actorname_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["spellname_text_anchor"] = {
                ["side"] = 3,
            },
            ["big_actortitle_text_shadow_color"] = {
                0,
                0,
                0,
                1,
            },
            ["percent_text_anchor"] = {
                ["side"] = 10,
            },
            ["spellname_text_font"] = "Cronix-Bold",
            ["big_actorname_text_outline"] = "OUTLINE",
            ["quest_color_neutral"] = {
                0.63921570777893,
                1,
                0.31764706969261,
                1,
            },
            ["mana"] = {
                nil,
                4,
            },
            ["big_actorname_text_font"] = "Cronix",
            ["power_percent_text_font"] = "Accidental Presidency",
            ["big_actorname_text_size"] = 8,
            ["spellpercent_text_size"] = 7,
            ["percent_text_enabled"] = true,
            ["big_actortitle_text_size"] = 8,
            ["level_text_alpha"] = 0.29999998211861,
            ["percent_text_size"] = 7,
            ["spellpercent_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["percent_text_font"] = "Cronix-Bold",
            ["buff_frame_y_offset"] = 0,
            ["quest_enabled"] = true,
            ["spellname_text_color"] = {
                0.95294117647059,
                [3] = 0.9921568627451,
            },
            ["spellname_text_size"] = 7,
            ["quest_color_enabled"] = true,
            ["health_incombat"] = {
                115,
                8,
            },
            ["health"] = {
                115,
                8,
            },
            ["spellname_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["spellpercent_text_enabled"] = true,
            ["percent_show_health"] = true,
            ["actorname_text_size"] = 8,
            ["level_text_enabled"] = true,
        },
        ["friendlynpc"] = {
            ["big_actorname_text_size"] = 8,
            ["spellpercent_text_font"] = "ViklunD's SexFont",
            ["actorname_friend_color"] = {
                0.71,
                1,
                1,
                1,
            },
            ["level_text_size"] = 7,
            ["actorname_use_class_color"] = false,
            ["cast"] = {
                115,
            },
            ["big_actortitle_text_size"] = 8,
            ["fixed_class_color"] = {
                1,
                0.4,
                0.1,
                1,
            },
            ["spellpercent_text_anchor"] = {
                ["y"] = -0.80000305175781,
                ["x"] = 3.8999938964844,
                ["side"] = 5,
            },
            ["spellname_text_outline"] = "OUTLINE",
            ["click_through"] = true,
            ["level_text_font"] = "Cronix-Bold",
            ["actorname_text_font"] = "Cronix-Bold",
            ["actorname_use_guild_color"] = false,
            ["actorname_text_outline"] = "OUTLINE",
            ["actorname_text_spacing"] = 6,
            ["only_damaged"] = false,
            ["quest_color_enemy"] = {
                0.28627452254295,
                1,
                0.094117656350136,
                1,
            },
            ["only_thename"] = true,
            ["big_actortitle_text_font"] = "Cronix-Bold",
            ["spellpercent_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["percent_text_ooc"] = true,
            ["level_text_anchor"] = {
                ["y"] = 100,
                ["x"] = 1,
                ["side"] = 5,
            },
            ["cast_incombat"] = {
                115,
                10,
            },
            ["health_incombat"] = {
                115,
                14,
            },
            ["spellpercent_text_size"] = 7,
            ["actorname_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["spellname_text_anchor"] = {
                ["y"] = 0.099998474121094,
                ["x"] = -0.80000305175781,
                ["side"] = 3,
            },
            ["percent_text_anchor"] = {
                ["side"] = 11,
            },
            ["spellname_text_font"] = "Cronix-Bold",
            ["only_names"] = false,
            ["spellpercent_text_enabled"] = true,
            ["quest_color_neutral"] = {
                0.28627452254295,
                1,
                0.094117656350136,
                1,
            },
            ["actorname_text_size"] = 7,
            ["percent_text_enabled"] = true,
            ["use_playerclass_color"] = true,
            ["actorname_use_friends_color"] = false,
            ["show_guild_name"] = false,
            ["percent_show_health"] = true,
            ["percent_text_size"] = 7,
            ["percent_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["percent_text_font"] = "Cronix-Bold",
            ["actorname_guild_color"] = {
                0.498039,
                1,
                0.2,
                1,
            },
            ["spellname_text_color"] = {
                0.95294117647059,
                [3] = 0.9921568627451,
            },
            ["spellname_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["spellname_text_size"] = 7,
            ["health"] = {
                115,
                14,
            },
            ["big_actorname_text_font"] = "Cronix-Bold",
            ["power_percent_text_font"] = "Accidental Presidency",
            ["level_text_alpha"] = 0.29999998211861,
            ["actorname_text_anchor"] = {
                ["y"] = -0.5,
                ["side"] = 1,
            },
        },
        ["global_health_height"] = 10,
        ["global_health_width"] = 120,
        ["enemyplayer"] = {
            ["big_actorname_text_size"] = 8,
            ["spellpercent_text_font"] = "ViklunD's SexFont",
            ["level_text_size"] = 7,
            ["cast"] = {
                125,
            },
            ["big_actortitle_text_size"] = 8,
            ["spellpercent_text_anchor"] = {
                ["y"] = -0.80000305175781,
                ["x"] = 3.8999938964844,
                ["side"] = 5,
            },
            ["spellname_text_outline"] = "OUTLINE",
            ["level_text_font"] = "Cronix-Bold",
            ["actorname_text_font"] = "Cronix-Bold",
            ["all_names"] = true,
            ["actorname_text_outline"] = "OUTLINE",
            ["actorname_text_spacing"] = 6,
            ["quest_color_enemy"] = {
                0.28627452254295,
                1,
                0.094117656350136,
                1,
            },
            ["big_actortitle_text_font"] = "Cronix-Bold",
            ["spellpercent_text_size"] = 7,
            ["level_text_anchor"] = {
                ["y"] = 100,
                ["x"] = 1,
                ["side"] = 5,
            },
            ["cast_incombat"] = {
                125,
                10,
            },
            ["actorname_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["spellname_text_anchor"] = {
                ["y"] = 0.099998474121094,
                ["x"] = -0.80000305175781,
                ["side"] = 3,
            },
            ["percent_text_anchor"] = {
                ["side"] = 11,
            },
            ["spellname_text_font"] = "Cronix-Bold",
            ["quest_color_neutral"] = {
                0.28627452254295,
                1,
                0.094117656350136,
                1,
            },
            ["actorname_text_size"] = 7,
            ["power_percent_text_font"] = "Accidental Presidency",
            ["percent_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["level_text_alpha"] = 0.29999998211861,
            ["percent_text_size"] = 7,
            ["percent_text_font"] = "Cronix-Bold",
            ["spellname_text_color"] = {
                0.95294117647059,
                [3] = 0.9921568627451,
            },
            ["quest_enabled"] = true,
            ["big_actorname_text_font"] = "Cronix-Bold",
            ["quest_color_enabled"] = true,
            ["spellname_text_size"] = 7,
            ["health"] = {
                125,
                14,
            },
            ["actorname_text_anchor"] = {
                ["y"] = -0.5,
                ["side"] = 1,
            },
            ["spellpercent_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["health_incombat"] = {
                125,
                14,
            },
            ["spellname_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["level_text_enabled"] = false,
        },
        ["enemynpc"] = {
            ["spellpercent_text_font"] = "ViklunD's SexFont",
            ["level_text_size"] = 7,
            ["cast"] = {
                125,
            },
            ["big_actortitle_text_size"] = 8,
            ["spellpercent_text_anchor"] = {
                ["y"] = -0.80000305175781,
                ["x"] = 3.8999938964844,
                ["side"] = 5,
            },
            ["level_text_font"] = "Cronix-Bold",
            ["actorname_text_font"] = "Cronix-Bold",
            ["actorname_text_outline"] = "OUTLINE",
            ["actorname_text_spacing"] = 6,
            ["quest_color_enemy"] = {
                0.28627452254295,
                1,
                0.094117656350136,
            },
            ["big_actortitle_text_font"] = "Cronix-Bold",
            ["spellpercent_text_size"] = 7,
            ["level_text_anchor"] = {
                ["y"] = 100,
                ["x"] = 1,
                ["side"] = 5,
            },
            ["cast_incombat"] = {
                125,
                10,
            },
            ["actorname_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["spellname_text_anchor"] = {
                ["y"] = 0.099998474121094,
                ["x"] = -0.80000305175781,
                ["side"] = 3,
            },
            ["percent_text_anchor"] = {
                ["side"] = 11,
            },
            ["spellname_text_font"] = "Cronix-Bold",
            ["quest_color_neutral"] = {
                0.28627452254295,
                1,
                0.094117656350136,
            },
            ["actorname_text_size"] = 7,
            ["power_percent_text_font"] = "Accidental Presidency",
            ["big_actorname_text_size"] = 8,
            ["percent_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["actorname_text_anchor"] = {
                ["y"] = -0.5,
                ["side"] = 1,
            },
            ["percent_text_size"] = 7,
            ["percent_text_font"] = "Cronix-Bold",
            ["spellname_text_color"] = {
                0.95294117647059,
                [3] = 0.9921568627451,
            },
            ["spellname_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["spellname_text_size"] = 7,
            ["health"] = {
                125,
                14,
            },
            ["spellpercent_text_shadow_color"] = {
                nil,
                nil,
                nil,
                0,
            },
            ["big_actorname_text_font"] = "Cronix-Bold",
            ["level_text_alpha"] = 0.29999998211861,
            ["health_incombat"] = {
                125,
                14,
            },
            ["level_text_enabled"] = false,
        },
    },
    ["aura_y_offset"] = 8,
    ["use_ui_parent"] = true,
    ["cast_statusbar_bgcolor"] = {
        0,
        0,
        0,
        0.7049064040184,
    },
    ["indicator_spec"] = false,
    ["border_thickness"] = 0.49999997019768,
    ["plater_resources_grow_direction"] = "center",
    ["resources_settings"] = {
        ["chr"] = {
            ["Player-3725-0C1533F1"] = "ComboPoints",
            ["Player-3725-0C1632F3"] = "HolyPower",
            ["Player-3691-0A230CF3"] = "Runes",
            ["Player-3725-0A9FE377"] = "Chi",
            ["Player-3691-09E75064"] = "Essence",
            ["Player-4184-003D46E0"] = "Chi",
            ["Player-3725-0C16E871"] = "HolyPower",
            ["Player-3725-0AA8E1EF"] = "Runes",
            ["Player-3691-09521F9C"] = "Runes",
            ["Player-3691-06C34E69"] = "Runes",
        },
    },
    ["spell_animation_list"] = {
        [27285] = {
            ["1"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.1,
                ["scale_upY"] = 1.1,
                ["scale_downX"] = 0.9,
                ["scale_downY"] = 0.9,
                ["duration"] = 0.075,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["2"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.1,
                ["scale_upY"] = 1.1,
                ["scale_downX"] = 0.9,
                ["scale_downY"] = 0.9,
                ["duration"] = 0.075,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
        },
        [188443] = {
            ["1"] = {
                ["scaleY"] = 0.6,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.45,
                ["fade_in"] = 0.01,
                ["duration"] = 0.2,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
            ["2"] = {
                ["scaleY"] = 0.6,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.45,
                ["fade_in"] = 0.01,
                ["duration"] = 0.2,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
        },
        [46968] = {
            ["1"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.1,
                ["enabled"] = true,
                ["amplitude"] = 0.95,
                ["fade_in"] = 0.01,
                ["duration"] = 0.1,
                ["cooldown"] = 0.1,
                ["frequency"] = 120,
            },
            ["2"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.1,
                ["enabled"] = true,
                ["amplitude"] = 0.95,
                ["fade_in"] = 0.01,
                ["duration"] = 0.1,
                ["cooldown"] = 0.1,
                ["frequency"] = 120,
            },
        },
        [275779] = {
            ["1"] = {
                ["scaleY"] = -1,
                ["fade_out"] = 0.02,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.1,
                ["enabled"] = true,
                ["amplitude"] = 1,
                ["fade_in"] = 0.01,
                ["duration"] = 0.12,
                ["cooldown"] = 0.5,
                ["frequency"] = 25,
            },
            ["2"] = {
                ["scaleY"] = -1,
                ["fade_out"] = 0.02,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.1,
                ["enabled"] = true,
                ["amplitude"] = 1,
                ["fade_in"] = 0.01,
                ["duration"] = 0.12,
                ["cooldown"] = 0.5,
                ["frequency"] = 25,
            },
        },
        [11366] = {
            ["1"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.15,
                ["scale_upY"] = 1.15,
                ["scale_downX"] = 0.8,
                ["scale_downY"] = 0.8,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["3"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.15,
                ["scale_upY"] = 1.15,
                ["scale_downX"] = 0.8,
                ["scale_downY"] = 0.8,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["2"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.09,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.1,
                ["critical_scale"] = 1,
                ["amplitude"] = 10,
                ["fade_in"] = 0.01,
                ["duration"] = 0.1,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
            ["4"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.09,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.1,
                ["critical_scale"] = 1,
                ["amplitude"] = 10,
                ["fade_in"] = 0.01,
                ["duration"] = 0.1,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
        },
        [228354] = {
            ["1"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.02,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.1,
                ["enabled"] = true,
                ["amplitude"] = 1,
                ["fade_in"] = 0.01,
                ["duration"] = 0.12,
                ["cooldown"] = 0.5,
                ["frequency"] = 25,
            },
            ["2"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.02,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.1,
                ["enabled"] = true,
                ["amplitude"] = 1,
                ["fade_in"] = 0.01,
                ["duration"] = 0.12,
                ["cooldown"] = 0.5,
                ["frequency"] = 25,
            },
        },
        [32645] = {
            ["1"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.1000000238419,
                ["scale_upY"] = 1.1999999284744,
                ["scale_downX"] = 0.89999997615814,
                ["scale_downY"] = 0.89999997615814,
                ["duration"] = 0.04,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["3"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.1000000238419,
                ["scale_upY"] = 1.1999999284744,
                ["scale_downX"] = 0.89999997615814,
                ["scale_downY"] = 0.89999997615814,
                ["duration"] = 0.04,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["2"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.1799999922514,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 1,
                ["enabled"] = true,
                ["amplitude"] = 4.0999999046326,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.12000000476837,
                ["cooldown"] = 0.5,
                ["frequency"] = 2.6099998950958,
            },
            ["4"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.1799999922514,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 1,
                ["enabled"] = true,
                ["amplitude"] = 4.0999999046326,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.12000000476837,
                ["cooldown"] = 0.5,
                ["frequency"] = 2.6099998950958,
            },
        },
        [189112] = {
            ["1"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.34999999403954,
                ["absolute_sineX"] = true,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 1.8799999952316,
                ["fade_in"] = 0,
                ["duration"] = 0.40000000596046,
                ["cooldown"] = 0.5,
                ["frequency"] = 51.979999542236,
            },
            ["2"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.34999999403954,
                ["absolute_sineX"] = true,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 1.8799999952316,
                ["fade_in"] = 0,
                ["duration"] = 0.40000000596046,
                ["cooldown"] = 0.5,
                ["frequency"] = 51.979999542236,
            },
        },
        [187874] = {
            ["1"] = {
                ["scaleY"] = 0.6,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.85,
                ["fade_in"] = 0.01,
                ["duration"] = 0.2,
                ["cooldown"] = 0,
                ["frequency"] = 100,
            },
            ["2"] = {
                ["scaleY"] = 0.6,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.85,
                ["fade_in"] = 0.01,
                ["duration"] = 0.2,
                ["cooldown"] = 0,
                ["frequency"] = 100,
            },
        },
        [185763] = {
            ["1"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.25999999046326,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.099998474121094,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 3.6583230495453,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.15999999642372,
                ["cooldown"] = 0.5,
                ["frequency"] = 23.525663375854,
            },
            ["3"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.25999999046326,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.099998474121094,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 3.6583230495453,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.15999999642372,
                ["cooldown"] = 0.5,
                ["frequency"] = 23.525663375854,
            },
            ["2"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.0299999713898,
                ["scale_upY"] = 1.0299999713898,
                ["scale_downX"] = 0.96999996900559,
                ["scale_downY"] = 0.96999996900559,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["4"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.0299999713898,
                ["scale_upY"] = 1.0299999713898,
                ["scale_downX"] = 0.96999996900559,
                ["scale_downY"] = 0.96999996900559,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
        },
        [31661] = {
            ["1"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.75,
                ["fade_in"] = 0.01,
                ["duration"] = 0.1,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
            ["2"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.75,
                ["fade_in"] = 0.01,
                ["duration"] = 0.1,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
        },
        [203782] = {
            ["1"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.089999996125698,
                ["absolute_sineX"] = true,
                ["scaleY"] = -1,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 1.5,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.099999994039536,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
            ["2"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.089999996125698,
                ["absolute_sineX"] = true,
                ["scaleY"] = -1,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 1.5,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.099999994039536,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
        },
        [100784] = {
            ["1"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.09,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 1,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 3,
                ["fade_in"] = 0.01,
                ["duration"] = 0.099999994039536,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
            ["2"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.09,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 1,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 3,
                ["fade_in"] = 0.01,
                ["duration"] = 0.099999994039536,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
        },
        [31935] = {
            ["1"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.03,
                ["scale_upY"] = 1.03,
                ["scale_downX"] = 0.97,
                ["scale_downY"] = 0.97,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["3"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.03,
                ["scale_upY"] = 1.03,
                ["scale_downX"] = 0.97,
                ["scale_downY"] = 0.97,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["2"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.09,
                ["absolute_sineX"] = true,
                ["scaleY"] = 1,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 1,
                ["critical_scale"] = 1,
                ["amplitude"] = 6,
                ["fade_in"] = 0.01,
                ["duration"] = 0.1,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
            ["4"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.09,
                ["absolute_sineX"] = true,
                ["scaleY"] = 1,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 1,
                ["critical_scale"] = 1,
                ["amplitude"] = 6,
                ["fade_in"] = 0.01,
                ["duration"] = 0.1,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
        },
        [53351] = {
            ["1"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.0199999809265,
                ["scale_upY"] = 1,
                ["scale_downX"] = 0.97999995946884,
                ["scale_downY"] = 1,
                ["duration"] = 0.050000000745058,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["3"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.0199999809265,
                ["scale_upY"] = 1,
                ["scale_downX"] = 0.97999995946884,
                ["scale_downY"] = 1,
                ["duration"] = 0.050000000745058,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["2"] = {
                ["scaleY"] = -1,
                ["fade_out"] = 0.1799999922514,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0,
                ["enabled"] = true,
                ["amplitude"] = 5.6999998092651,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.050000000745058,
                ["cooldown"] = 0.5,
                ["frequency"] = 3.0999999046326,
            },
            ["4"] = {
                ["scaleY"] = -1,
                ["fade_out"] = 0.1799999922514,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0,
                ["enabled"] = true,
                ["amplitude"] = 5.6999998092651,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.050000000745058,
                ["cooldown"] = 0.5,
                ["frequency"] = 3.0999999046326,
            },
        },
        [257045] = {
            ["1"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.75,
                ["fade_in"] = 0.01,
                ["duration"] = 0.1,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
            ["2"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.75,
                ["fade_in"] = 0.01,
                ["duration"] = 0.1,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
        },
        [107270] = {
            ["1"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.089999996125698,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.099998474121094,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 0.1499999910593,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.1499999910593,
                ["cooldown"] = 0.5,
                ["frequency"] = 200,
            },
            ["2"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.089999996125698,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.099998474121094,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 0.1499999910593,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.1499999910593,
                ["cooldown"] = 0.5,
                ["frequency"] = 200,
            },
        },
        [17364] = {
            ["1"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.02,
                ["scale_upY"] = 1.02,
                ["scale_downX"] = 0.97,
                ["scale_downY"] = 0.97,
                ["duration"] = 0.10000000745058,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["3"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.02,
                ["scale_upY"] = 1.02,
                ["scale_downX"] = 0.97,
                ["scale_downY"] = 0.97,
                ["duration"] = 0.10000000745058,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["2"] = {
                ["scaleY"] = -1,
                ["fade_out"] = 0.11,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0,
                ["enabled"] = true,
                ["amplitude"] = 2.5,
                ["fade_in"] = 0,
                ["duration"] = 0.1,
                ["cooldown"] = 0.5,
                ["frequency"] = 3.0999999046326,
            },
            ["4"] = {
                ["scaleY"] = -1,
                ["fade_out"] = 0.11,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0,
                ["enabled"] = true,
                ["amplitude"] = 2.5,
                ["fade_in"] = 0,
                ["duration"] = 0.1,
                ["cooldown"] = 0.5,
                ["frequency"] = 3.0999999046326,
            },
        },
        [49998] = {
            ["1"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.019999999552965,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.099998474121094,
                ["enabled"] = true,
                ["amplitude"] = 1.0330086946487,
                ["fade_in"] = 0.01,
                ["duration"] = 0.050000000745058,
                ["cooldown"] = 0.5,
                ["frequency"] = 25,
            },
            ["2"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.019999999552965,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.099998474121094,
                ["enabled"] = true,
                ["amplitude"] = 1.0330086946487,
                ["fade_in"] = 0.01,
                ["duration"] = 0.050000000745058,
                ["cooldown"] = 0.5,
                ["frequency"] = 25,
            },
        },
        [7268] = {
            ["1"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.75,
                ["fade_in"] = 0.01,
                ["duration"] = 0.1,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
            ["2"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.75,
                ["fade_in"] = 0.01,
                ["duration"] = 0.1,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
        },
        [206930] = {
            ["1"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.0199999809265,
                ["scale_upY"] = 1,
                ["scale_downX"] = 0.97999995946884,
                ["scale_downY"] = 1,
                ["duration"] = 0.050000000745058,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["3"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.0199999809265,
                ["scale_upY"] = 1,
                ["scale_downX"] = 0.97999995946884,
                ["scale_downY"] = 1,
                ["duration"] = 0.050000000745058,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["2"] = {
                ["scaleY"] = -1,
                ["fade_out"] = 0.1799999922514,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0,
                ["enabled"] = true,
                ["amplitude"] = 5.6999998092651,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.050000000745058,
                ["cooldown"] = 0.5,
                ["frequency"] = 3.0999999046326,
            },
            ["4"] = {
                ["scaleY"] = -1,
                ["fade_out"] = 0.1799999922514,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0,
                ["enabled"] = true,
                ["amplitude"] = 5.6999998092651,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.050000000745058,
                ["cooldown"] = 0.5,
                ["frequency"] = 3.0999999046326,
            },
        },
        [196278] = {
            ["1"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.75,
                ["fade_in"] = 0.01,
                ["duration"] = 0.05,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
            ["2"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.75,
                ["fade_in"] = 0.01,
                ["duration"] = 0.05,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
        },
        [162243] = {
            ["1"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.089999996125698,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.099998474121094,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 1,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.099999994039535,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
            ["2"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.089999996125698,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.099998474121094,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 1,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.099999994039535,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
        },
        [196819] = {
            ["1"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.1999999284744,
                ["scale_upY"] = 1.2999999523163,
                ["scale_downX"] = 0.89999997615814,
                ["scale_downY"] = 0.89999997615814,
                ["duration"] = 0.04,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["3"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.1999999284744,
                ["scale_upY"] = 1.2999999523163,
                ["scale_downX"] = 0.89999997615814,
                ["scale_downY"] = 0.89999997615814,
                ["duration"] = 0.04,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["2"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.1799999922514,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 1,
                ["enabled"] = true,
                ["amplitude"] = 5,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.21999999880791,
                ["cooldown"] = 0.5,
                ["frequency"] = 3.3099999427795,
            },
            ["4"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.1799999922514,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 1,
                ["enabled"] = true,
                ["amplitude"] = 5,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.21999999880791,
                ["cooldown"] = 0.5,
                ["frequency"] = 3.3099999427795,
            },
        },
        [264178] = {
            ["1"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.08,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 2.5,
                ["fade_in"] = 0.01,
                ["duration"] = 0.12,
                ["cooldown"] = 0.25,
                ["frequency"] = 20,
            },
            ["2"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.08,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 2.5,
                ["fade_in"] = 0.01,
                ["duration"] = 0.12,
                ["cooldown"] = 0.25,
                ["frequency"] = 20,
            },
        },
        [199804] = {
            ["1"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.09,
                ["absolute_sineX"] = false,
                ["scaleY"] = 0.88999938964844,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 1,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 1.1699999570847,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.19999998807907,
                ["cooldown"] = 0.5,
                ["frequency"] = 23.525676727295,
            },
            ["3"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.09,
                ["absolute_sineX"] = false,
                ["scaleY"] = 0.88999938964844,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 1,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 1.1699999570847,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.19999998807907,
                ["cooldown"] = 0.5,
                ["frequency"] = 23.525676727295,
            },
            ["2"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.0499999523163,
                ["scale_upY"] = 1.0499999523163,
                ["scale_downX"] = 1,
                ["scale_downY"] = 1,
                ["duration"] = 0.050000000745058,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["4"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.0499999523163,
                ["scale_upY"] = 1.0499999523163,
                ["scale_downX"] = 1,
                ["scale_downY"] = 1,
                ["duration"] = 0.050000000745058,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
        },
        [187708] = {
            ["1"] = {
                ["scaleY"] = 0.6,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.45,
                ["fade_in"] = 0.01,
                ["duration"] = 0.2,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
            ["2"] = {
                ["scaleY"] = 0.6,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.45,
                ["fade_in"] = 0.01,
                ["duration"] = 0.2,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
        },
        [185438] = {
            ["1"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.19999998807907,
                ["absolute_sineX"] = false,
                ["scaleY"] = -1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.099998474121094,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 6.460000038147,
                ["fade_in"] = 0,
                ["duration"] = 0.099999994039536,
                ["cooldown"] = 0.5,
                ["frequency"] = 25,
            },
            ["3"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.19999998807907,
                ["absolute_sineX"] = false,
                ["scaleY"] = -1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.099998474121094,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 6.460000038147,
                ["fade_in"] = 0,
                ["duration"] = 0.099999994039536,
                ["cooldown"] = 0.5,
                ["frequency"] = 25,
            },
            ["2"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.0299999713898,
                ["scale_upY"] = 1.0299999713898,
                ["scale_downX"] = 0.96999996900559,
                ["scale_downY"] = 0.96999996900559,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["4"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.0299999713898,
                ["scale_upY"] = 1.0299999713898,
                ["scale_downX"] = 0.96999996900559,
                ["scale_downY"] = 0.96999996900559,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
        },
        [86040] = {
            ["1"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.1,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.1,
                ["enabled"] = true,
                ["amplitude"] = 2,
                ["fade_in"] = 0.05,
                ["duration"] = 0.15,
                ["cooldown"] = 0.25,
                ["frequency"] = 20,
            },
            ["2"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.1,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.1,
                ["enabled"] = true,
                ["amplitude"] = 2,
                ["fade_in"] = 0.05,
                ["duration"] = 0.15,
                ["cooldown"] = 0.25,
                ["frequency"] = 20,
            },
        },
        [52174] = {
            ["1"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.15,
                ["scale_upY"] = 1.15,
                ["scale_downX"] = 0.8,
                ["scale_downY"] = 0.8,
                ["duration"] = 0.075,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["3"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.15,
                ["scale_upY"] = 1.15,
                ["scale_downX"] = 0.8,
                ["scale_downY"] = 0.8,
                ["duration"] = 0.075,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["2"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.2,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.15,
                ["critical_scale"] = 1,
                ["amplitude"] = 6,
                ["fade_in"] = 0.01,
                ["duration"] = 0.3,
                ["cooldown"] = 0.5,
                ["frequency"] = 50,
            },
            ["4"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.2,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.15,
                ["critical_scale"] = 1,
                ["amplitude"] = 6,
                ["fade_in"] = 0.01,
                ["duration"] = 0.3,
                ["cooldown"] = 0.5,
                ["frequency"] = 50,
            },
        },
        [2643] = {
            ["1"] = {
                ["scaleY"] = 0.6,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.45,
                ["fade_in"] = 0.01,
                ["duration"] = 0.2,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
            ["2"] = {
                ["scaleY"] = 0.6,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.45,
                ["fade_in"] = 0.01,
                ["duration"] = 0.2,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
        },
        [324540] = {
            ["1"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.089999996125698,
                ["absolute_sineX"] = false,
                ["scaleY"] = 2,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.099998474121094,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 0.89999997615814,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.1499999910593,
                ["cooldown"] = 0.5,
                ["frequency"] = 25.650197982788,
            },
            ["3"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.089999996125698,
                ["absolute_sineX"] = false,
                ["scaleY"] = 2,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.099998474121094,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 0.89999997615814,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.1499999910593,
                ["cooldown"] = 0.5,
                ["frequency"] = 25.650197982788,
            },
            ["2"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.0299999713898,
                ["scale_upY"] = 1.0299999713898,
                ["scale_downX"] = 0.96999996900558,
                ["scale_downY"] = 0.96999996900558,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["4"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.0299999713898,
                ["scale_upY"] = 1.0299999713898,
                ["scale_downX"] = 0.96999996900558,
                ["scale_downY"] = 0.96999996900558,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
        },
        [53595] = {
            ["1"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.03,
                ["scale_upY"] = 1.03,
                ["scale_downX"] = 0.97,
                ["scale_downY"] = 0.97,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["3"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.03,
                ["scale_upY"] = 1.03,
                ["scale_downX"] = 0.97,
                ["scale_downY"] = 0.97,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["2"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.09,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.1,
                ["critical_scale"] = 1,
                ["amplitude"] = 3,
                ["fade_in"] = 0.01,
                ["duration"] = 0.1,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
            ["4"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.09,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.1,
                ["critical_scale"] = 1,
                ["amplitude"] = 3,
                ["fade_in"] = 0.01,
                ["duration"] = 0.1,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
        },
        [108853] = {
            ["1"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.02,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.1,
                ["enabled"] = true,
                ["amplitude"] = 1,
                ["fade_in"] = 0.01,
                ["duration"] = 0.12,
                ["cooldown"] = 0.5,
                ["frequency"] = 25,
            },
            ["2"] = {
                ["scaleY"] = 1,
                ["fade_out"] = 0.02,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.1,
                ["enabled"] = true,
                ["amplitude"] = 1,
                ["fade_in"] = 0.01,
                ["duration"] = 0.12,
                ["cooldown"] = 0.5,
                ["frequency"] = 25,
            },
        },
        [204157] = {
            ["1"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.089999996125698,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 1,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 6,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.1,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
            ["3"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.089999996125698,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 1,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 6,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.1,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
            ["2"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.03,
                ["scale_upY"] = 1.03,
                ["scale_downX"] = 0.97,
                ["scale_downY"] = 0.97,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["4"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.03,
                ["scale_upY"] = 1.03,
                ["scale_downX"] = 0.97,
                ["scale_downY"] = 0.97,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
        },
        [117418] = {
            ["1"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.1499999910593,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.099998474121094,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 0.1499999910593,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.1799999922514,
                ["cooldown"] = 0.5,
                ["frequency"] = 116.00999450684,
            },
            ["2"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.1499999910593,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.099998474121094,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 0.1499999910593,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.1799999922514,
                ["cooldown"] = 0.5,
                ["frequency"] = 116.00999450684,
            },
        },
        [148135] = {
            ["1"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.09,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 1,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 1.75,
                ["fade_in"] = 0.01,
                ["duration"] = 0.099999994039536,
                ["cooldown"] = 0.5,
                ["frequency"] = 60.874122619629,
            },
            ["2"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.09,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 1,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 1.75,
                ["fade_in"] = 0.01,
                ["duration"] = 0.099999994039536,
                ["cooldown"] = 0.5,
                ["frequency"] = 60.874122619629,
            },
        },
        [228478] = {
            ["1"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.099999994039536,
                ["absolute_sineX"] = true,
                ["scaleY"] = 0.79999923706055,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.20000076293945,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 2.5,
                ["fade_in"] = 0,
                ["duration"] = 0.099999994039535,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
            ["3"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.099999994039536,
                ["absolute_sineX"] = true,
                ["scaleY"] = 0.79999923706055,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.20000076293945,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 2.5,
                ["fade_in"] = 0,
                ["duration"] = 0.099999994039535,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
            ["2"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.0299999713898,
                ["scale_upY"] = 1.0299999713898,
                ["scale_downX"] = 0.96999996900559,
                ["scale_downY"] = 0.96999996900559,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["4"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.0299999713898,
                ["scale_upY"] = 1.0299999713898,
                ["scale_downX"] = 0.96999996900559,
                ["scale_downY"] = 0.96999996900559,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
        },
        [199547] = {
            ["1"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.089999996125698,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.59999847412109,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 3,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.1,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
            ["3"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.089999996125698,
                ["absolute_sineX"] = false,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.59999847412109,
                ["critical_scale"] = 1.05,
                ["amplitude"] = 3,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.1,
                ["cooldown"] = 0.5,
                ["frequency"] = 1,
            },
            ["2"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.039999961853,
                ["scale_upY"] = 1.039999961853,
                ["scale_downX"] = 0.96999996900558,
                ["scale_downY"] = 0.96999996900558,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["4"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.039999961853,
                ["scale_upY"] = 1.039999961853,
                ["scale_downX"] = 0.96999996900558,
                ["scale_downY"] = 0.96999996900558,
                ["duration"] = 0.05,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
        },
        [222024] = {
            ["1"] = {
                ["enabled"] = true,
                ["scale_upX"] = 1,
                ["duration"] = 0.050000000745058,
                ["scale_downX"] = 1,
                ["animation_type"] = "scale",
                ["critical_scale"] = 1,
                ["scale_upY"] = 1.1000000238419,
                ["cooldown"] = 0.75,
                ["scale_downY"] = 0.89999997615814,
            },
            ["3"] = {
                ["enabled"] = true,
                ["scale_upX"] = 1,
                ["duration"] = 0.050000000745058,
                ["scale_downX"] = 1,
                ["animation_type"] = "scale",
                ["critical_scale"] = 1,
                ["scale_upY"] = 1.1000000238419,
                ["cooldown"] = 0.75,
                ["scale_downY"] = 0.89999997615814,
            },
            ["2"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.019999999552965,
                ["absolute_sineX"] = true,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0,
                ["critical_scale"] = 1,
                ["amplitude"] = 1.7999999523163,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.050000000745058,
                ["cooldown"] = 0.5,
                ["frequency"] = 11.14999961853,
            },
            ["4"] = {
                ["enabled"] = true,
                ["fade_out"] = 0.019999999552965,
                ["absolute_sineX"] = true,
                ["scaleY"] = 1,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0,
                ["critical_scale"] = 1,
                ["amplitude"] = 1.7999999523163,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.050000000745058,
                ["cooldown"] = 0.5,
                ["frequency"] = 11.14999961853,
            },
        },
        [155166] = {
            ["1"] = {
                ["scaleY"] = 0.6,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.45,
                ["fade_in"] = 0.01,
                ["duration"] = 0.2,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
            ["2"] = {
                ["scaleY"] = 0.6,
                ["fade_out"] = 0.01,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = false,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0.2,
                ["enabled"] = true,
                ["amplitude"] = 0.45,
                ["fade_in"] = 0.01,
                ["duration"] = 0.2,
                ["cooldown"] = 0,
                ["frequency"] = 200,
            },
        },
        [8042] = {
            ["1"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.05,
                ["scale_upY"] = 1.05,
                ["scale_downX"] = 0.95,
                ["scale_downY"] = 0.95,
                ["duration"] = 0.060000000745058,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["3"] = {
                ["animation_type"] = "scale",
                ["scale_upX"] = 1.05,
                ["scale_upY"] = 1.05,
                ["scale_downX"] = 0.95,
                ["scale_downY"] = 0.95,
                ["duration"] = 0.060000000745058,
                ["cooldown"] = 0.75,
                ["enabled"] = true,
            },
            ["2"] = {
                ["scaleY"] = -1,
                ["fade_out"] = 0.05,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0,
                ["enabled"] = true,
                ["amplitude"] = 7.5,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.06,
                ["cooldown"] = 0.5,
                ["frequency"] = 3.0999999046326,
            },
            ["4"] = {
                ["scaleY"] = -1,
                ["fade_out"] = 0.05,
                ["absolute_sineX"] = false,
                ["absolute_sineY"] = true,
                ["animation_type"] = "frameshake",
                ["scaleX"] = 0,
                ["enabled"] = true,
                ["amplitude"] = 7.5,
                ["fade_in"] = 0.0099999997764826,
                ["duration"] = 0.06,
                ["cooldown"] = 0.5,
                ["frequency"] = 3.0999999046326,
            },
        },
    },
    ["indicator_scale"] = 0.99999994039536,
    ["cast_statusbar_spark_offset"] = -10,
    ["npc_colors"] = {
        [40788] = {
            false,
            false,
            "orangered",
        },
        [169421] = {
            false,
            false,
            "gold",
        },
        [194241] = {
            false,
            false,
            "cyan",
        },
        [229296] = {
            true,
            false,
            "orangered",
        },
        [195265] = {
            true,
            false,
            "fuchsia",
        },
        [183495] = {
            false,
            false,
            "mediumpurple",
        },
        [99200] = {
            false,
            false,
            "mediumslateblue",
        },
        [190404] = {
            true,
            false,
            "aqua",
        },
        [190405] = {
            true,
            false,
            "fuchsia",
        },
        [133345] = {
            false,
            false,
            "goldenrod",
        },
        [164562] = {
            false,
            false,
            "deepskyblue",
        },
        [183497] = {
            false,
            false,
            "blue",
        },
        [220599] = {
            true,
            false,
            "fuchsia",
        },
        [164563] = {
            false,
            false,
            "blue",
        },
        [210109] = {
            true,
            false,
            "aqua",
        },
        [212412] = {
            true,
            false,
            "fuchsia",
        },
        [196548] = {
            true,
            false,
            "fuchsia",
        },
        [131812] = {
            true,
            false,
            "fuchsia",
        },
        [138465] = {
            true,
            false,
            "aqua",
        },
        [200131] = {
            false,
            false,
            "mediumslateblue",
        },
        [200387] = {
            false,
            false,
            "mediumslateblue",
        },
        [180429] = {
            false,
            false,
            "mediumpurple",
        },
        [217531] = {
            true,
            false,
            "fuchsia",
        },
        [98691] = {
            false,
            false,
            "lime",
        },
        [169428] = {
            false,
            false,
            "gold",
        },
        [151773] = {
            false,
            false,
            "deepskyblue",
        },
        [217533] = {
            true,
            false,
            "fuchsia",
        },
        [164567] = {
            true,
            false,
            "fuchsia",
        },
        [169429] = {
            false,
            false,
            "gold",
        },
        [141283] = {
            false,
            false,
            "navajowhite",
        },
        [209090] = {
            false,
            false,
            "mediumslateblue",
        },
        [169430] = {
            false,
            false,
            "gold",
        },
        [136934] = {
            false,
            false,
            "navajowhite",
        },
        [141284] = {
            false,
            false,
            "gold",
        },
        [180433] = {
            false,
            false,
            "orangered",
        },
        [199368] = {
            true,
            false,
            "DEATHKNIGHT",
        },
        [214209] = {
            true,
            false,
            "fuchsia",
        },
        [189901] = {
            false,
            false,
            "mediumpurple",
        },
        [141285] = {
            false,
            false,
            "lightgreen",
        },
        [131818] = {
            false,
            false,
            "magenta",
        },
        [98949] = {
            false,
            false,
            "mediumpurple",
        },
        [200137] = {
            true,
            false,
            "fuchsia",
        },
        [168153] = {
            false,
            false,
            "fuchsia",
        },
        [131819] = {
            true,
            false,
            "fuchsia",
        },
        [228540] = {
            true,
            false,
            "fuchsia",
        },
        [196044] = {
            true,
            false,
            "fuchsia",
        },
        [184018] = {
            false,
            false,
            "mediumslateblue",
        },
        [100485] = {
            true,
            false,
            "aqua",
        },
        [176598] = {
            false,
            false,
            "blue",
        },
        [59598] = {
            false,
            false,
            "dimgray",
        },
        [129527] = {
            false,
            false,
            "WARRIOR",
        },
        [196045] = {
            true,
            false,
            "fuchsia",
        },
        [101637] = {
            false,
            false,
            "deepskyblue",
        },
        [131821] = {
            true,
            false,
            "fuchsia",
        },
        [187602] = {
            true,
            false,
            "dodgerblue",
        },
        [175576] = {
            false,
            false,
            "fuchsia",
        },
        [58319] = {
            false,
            false,
            "dimgray",
        },
        [192464] = {
            false,
            false,
            "fuchsia",
        },
        [100486] = {
            false,
            false,
            "aqua",
        },
        [44566] = {
            false,
            false,
            "mediumpurple",
        },
        [178392] = {
            false,
            false,
            "deepskyblue",
        },
        [133870] = {
            true,
            false,
            "fuchsia",
        },
        [184022] = {
            true,
            false,
            "fuchsia",
        },
        [131824] = {
            false,
            false,
            "mediumslateblue",
        },
        [129529] = {
            false,
            false,
            "lime",
        },
        [184023] = {
            true,
            false,
            "fuchsia",
        },
        [131825] = {
            false,
            false,
            "mediumslateblue",
        },
        [178139] = {
            false,
            false,
            "mediumpurple",
        },
        [133361] = {
            false,
            false,
            "fuchsia",
        },
        [164578] = {
            false,
            false,
            "blue",
        },
        [150250] = {
            false,
            false,
            "deepskyblue",
        },
        [178141] = {
            false,
            false,
            "deepskyblue",
        },
        [168418] = {
            true,
            false,
            "fuchsia",
        },
        [150251] = {
            false,
            false,
            "aqua",
        },
        [178142] = {
            false,
            false,
            "aqua",
        },
        [137458] = {
            false,
            false,
            "deepskyblue",
        },
        [199124] = {
            false,
            false,
            "deepskyblue",
        },
        [126845] = {
            false,
            false,
            "fuchsia",
        },
        [131318] = {
            false,
            false,
            "mediumslateblue",
        },
        [168420] = {
            true,
            false,
            "fuchsia",
        },
        [150253] = {
            false,
            false,
            "mediumslateblue",
        },
        [168932] = {
            false,
            false,
            "gold",
        },
        [82579] = {
            false,
            false,
            "deepskyblue",
        },
        [129788] = {
            true,
            false,
            "fuchsia",
        },
        [190426] = {
            false,
            false,
            "cyan",
        },
        [137716] = {
            false,
            false,
            "blue",
        },
        [197847] = {
            false,
            false,
            "deepskyblue",
        },
        [177889] = {
            false,
            false,
            "mediumslateblue",
        },
        [168934] = {
            false,
            false,
            "fuchsia",
        },
        [45912] = {
            true,
            false,
            "fuchsia",
        },
        [177891] = {
            false,
            false,
            "deepskyblue",
        },
        [86547] = {
            false,
            false,
            "blue",
        },
        [177892] = {
            false,
            false,
            "deepskyblue",
        },
        [168425] = {
            false,
            false,
            "fuchsia",
        },
        [168681] = {
            false,
            false,
            "mediumslateblue",
        },
        [197595] = {
            false,
            false,
            "mediumpurple",
        },
        [126848] = {
            false,
            false,
            "deepskyblue",
        },
        [94224] = {
            false,
            false,
            "fuchsia",
        },
        [202969] = {
            false,
            false,
            "magenta",
        },
        [134139] = {
            false,
            false,
            "gold",
        },
        [229069] = {
            true,
            false,
            "fuchsia",
        },
        [172265] = {
            true,
            false,
            "fuchsia",
        },
        [160495] = {
            true,
            false,
            "magenta",
        },
        [186339] = {
            true,
            false,
            "fuchsia",
        },
        [218324] = {
            true,
            false,
            "aqua",
        },
        [192481] = {
            false,
            false,
            "fuchsia",
        },
        [81432] = {
            false,
            false,
            "deepskyblue",
        },
        [114312] = {
            false,
            false,
            "mediumslateblue",
        },
        [196576] = {
            true,
            false,
            "fuchsia",
        },
        [200926] = {
            false,
            false,
            "mediumslateblue",
        },
        [168942] = {
            true,
            false,
            "fuchsia",
        },
        [165872] = {
            true,
            false,
            "fuchsia",
        },
        [131585] = {
            false,
            false,
            "blue",
        },
        [134144] = {
            false,
            false,
            "lightgreen",
        },
        [197857] = {
            false,
            false,
            "lime",
        },
        [102287] = {
            true,
            false,
            "aqua",
        },
        [131586] = {
            false,
            false,
            "cyan",
        },
        [205790] = {
            false,
            false,
            "WARRIOR",
        },
        [101008] = {
            false,
            false,
            "fuchsia",
        },
        [135169] = {
            false,
            false,
            "fuchsia",
        },
        [131587] = {
            true,
            false,
            "fuchsia",
        },
        [191206] = {
            false,
            false,
            "deepskyblue",
        },
        [57109] = {
            false,
            false,
            "WARRIOR",
        },
        [40925] = {
            false,
            false,
            "cyan",
        },
        [98706] = {
            true,
            false,
            "aqua",
        },
        [86552] = {
            false,
            false,
            "deepskyblue",
        },
        [231380] = {
            true,
            false,
            "fuchsia",
        },
        [162038] = {
            false,
            false,
            "deepskyblue",
        },
        [130435] = {
            false,
            false,
            "white",
        },
        [45915] = {
            false,
            false,
            "WARRIOR",
        },
        [81819] = {
            true,
            false,
            "fuchsia",
        },
        [184300] = {
            false,
            false,
            "mediumslateblue",
        },
        [162039] = {
            true,
            false,
            "fuchsia",
        },
        [170483] = {
            false,
            false,
            "fuchsia",
        },
        [76446] = {
            true,
            false,
            "dodgerblue",
        },
        [184301] = {
            true,
            false,
            "fuchsia",
        },
        [162040] = {
            true,
            false,
            "fuchsia",
        },
        [131847] = {
            false,
            false,
            "WARRIOR",
        },
        [134150] = {
            false,
            false,
            "navajowhite",
        },
        [114316] = {
            false,
            false,
            "aqua",
        },
        [81820] = {
            true,
            false,
            "fuchsia",
        },
        [213216] = {
            true,
            false,
            "aqua",
        },
        [224219] = {
            true,
            false,
            "fuchsia",
        },
        [224731] = {
            true,
            false,
            "fuchsia",
        },
        [139269] = {
            false,
            false,
            "deepskyblue",
        },
        [137478] = {
            false,
            false,
            "gold",
        },
        [156157] = {
            false,
            false,
            "blue",
        },
        [131849] = {
            false,
            false,
            "deepskyblue",
        },
        [95766] = {
            true,
            false,
            "aqua",
        },
        [114317] = {
            false,
            false,
            "aqua",
        },
        [224732] = {
            true,
            false,
            "fuchsia",
        },
        [231385] = {
            true,
            false,
            "aqua",
        },
        [127111] = {
            false,
            false,
            "deepskyblue",
        },
        [131850] = {
            false,
            false,
            "aqua",
        },
        [191469] = {
            false,
            false,
            "aqua",
        },
        [98965] = {
            false,
            false,
            "mediumslateblue",
        },
        [175861] = {
            false,
            false,
            "fuchsia",
        },
        [83613] = {
            false,
            false,
            "mediumslateblue",
        },
        [178165] = {
            false,
            false,
            "mediumslateblue",
        },
        [199659] = {
            false,
            false,
            "magenta",
        },
        [86684] = {
            false,
            false,
            "deepskyblue",
        },
        [212453] = {
            true,
            false,
            "fuchsia",
        },
        [166396] = {
            false,
            false,
            "aqua",
        },
        [150276] = {
            false,
            false,
            "deepskyblue",
        },
        [164861] = {
            false,
            false,
            "blue",
        },
        [114319] = {
            false,
            false,
            "deepskyblue",
        },
        [162047] = {
            false,
            false,
            "deepskyblue",
        },
        [96664] = {
            true,
            false,
            "fuchsia",
        },
        [134157] = {
            false,
            false,
            "peru",
        },
        [216293] = {
            true,
            false,
            "fuchsia",
        },
        [56792] = {
            false,
            false,
            "fuchsia",
        },
        [239834] = {
            true,
            false,
            "fuchsia",
        },
        [134158] = {
            false,
            false,
            "navajowhite",
        },
        [155908] = {
            false,
            false,
            "fuchsia",
        },
        [168446] = {
            false,
            false,
            "mediumslateblue",
        },
        [174843] = {
            false,
            false,
            "mediumpurple",
        },
        [205804] = {
            false,
            false,
            "WARRIOR",
        },
        [84767] = {
            false,
            false,
            "WARRIOR",
        },
        [180473] = {
            false,
            false,
            "blue",
        },
        [214761] = {
            true,
            false,
            "fuchsia",
        },
        [178171] = {
            false,
            false,
            "fuchsia",
        },
        [180474] = {
            false,
            false,
            "fuchsia",
        },
        [131858] = {
            false,
            false,
            "deepskyblue",
        },
        [138255] = {
            false,
            false,
            "maroon",
        },
        [134417] = {
            false,
            false,
            "gold",
        },
        [208365] = {
            false,
            false,
            "palegreen",
        },
        [214762] = {
            true,
            false,
            "fuchsia",
        },
        [182778] = {
            false,
            false,
            "fuchsia",
        },
        [95771] = {
            true,
            false,
            "fuchsia",
        },
        [206063] = {
            false,
            false,
            "WARRIOR",
        },
        [59544] = {
            false,
            false,
            "magenta",
        },
        [129547] = {
            false,
            false,
            "mediumslateblue",
        },
        [206064] = {
            true,
            false,
            "fuchsia",
        },
        [208367] = {
            false,
            false,
            "deepskyblue",
        },
        [95772] = {
            false,
            false,
            "deepskyblue",
        },
        [206065] = {
            true,
            false,
            "fuchsia",
        },
        [186107] = {
            false,
            false,
            "fuchsia",
        },
        [129548] = {
            false,
            false,
            "WARRIOR",
        },
        [206066] = {
            true,
            false,
            "fuchsia",
        },
        [127757] = {
            false,
            false,
            "cyan",
        },
        [131863] = {
            false,
            false,
            "mediumslateblue",
        },
        [104217] = {
            false,
            false,
            "mediumslateblue",
        },
        [162057] = {
            true,
            false,
            "fuchsia",
        },
        [59545] = {
            true,
            false,
            "fuchsia",
        },
        [131864] = {
            true,
            false,
            "fuchsia",
        },
        [136214] = {
            false,
            false,
            "plum",
        },
        [191739] = {
            true,
            false,
            "aqua",
        },
        [107288] = {
            false,
            false,
            "deepskyblue",
        },
        [80805] = {
            false,
            false,
            "mediumpurple",
        },
        [184319] = {
            false,
            false,
            "lime",
        },
        [133912] = {
            true,
            false,
            "fuchsia",
        },
        [164873] = {
            false,
            false,
            "fuchsia",
        },
        [43873] = {
            true,
            false,
            "aqua",
        },
        [82597] = {
            false,
            false,
            "mediumslateblue",
        },
        [190206] = {
            false,
            false,
            "lime",
        },
        [191230] = {
            false,
            false,
            "fuchsia",
        },
        [204536] = {
            false,
            false,
            "blue",
        },
        [59546] = {
            true,
            false,
            "fuchsia",
        },
        [99358] = {
            false,
            false,
            "magenta",
        },
        [192767] = {
            false,
            false,
            "mediumpurple",
        },
        [150292] = {
            false,
            false,
            "mediumslateblue",
        },
        [224240] = {
            true,
            false,
            "aqua",
        },
        [163086] = {
            true,
            false,
            "aqua",
        },
        [184580] = {
            true,
            false,
            "fuchsia",
        },
        [129552] = {
            false,
            false,
            "WARRIOR",
        },
        [206074] = {
            true,
            false,
            "fuchsia",
        },
        [80808] = {
            false,
            false,
            "deepskyblue",
        },
        [80936] = {
            false,
            false,
            "blue",
        },
        [184581] = {
            true,
            false,
            "aqua",
        },
        [168717] = {
            false,
            false,
            "deepskyblue",
        },
        [134174] = {
            false,
            false,
            "honeydew",
        },
        [114584] = {
            false,
            false,
            "mediumpurple",
        },
        [184582] = {
            false,
            false,
            "deepskyblue",
        },
        [59547] = {
            false,
            false,
            "mediumpurple",
        },
        [150295] = {
            false,
            false,
            "mediumslateblue",
        },
        [129553] = {
            true,
            false,
            "fuchsia",
        },
        [214264] = {
            true,
            false,
            "aqua",
        },
        [222964] = {
            true,
            false,
            "fuchsia",
        },
        [80937] = {
            false,
            false,
            "deepskyblue",
        },
        [176395] = {
            false,
            false,
            "deepskyblue",
        },
        [77483] = {
            false,
            false,
            "deepskyblue",
        },
        [176396] = {
            false,
            false,
            "mediumslateblue",
        },
        [150297] = {
            false,
            false,
            "aqua",
        },
        [84520] = {
            false,
            false,
            "mediumpurple",
        },
        [80938] = {
            false,
            false,
            "mediumpurple",
        },
        [95779] = {
            false,
            false,
            "mediumslateblue",
        },
        [186121] = {
            false,
            false,
            "mediumslateblue",
        },
        [186122] = {
            false,
            false,
            "mediumslateblue",
        },
        [184331] = {
            false,
            false,
            "mediumslateblue",
        },
        [153882] = {
            false,
            false,
            "deepskyblue",
        },
        [193799] = {
            false,
            false,
            "cyan",
        },
        [196102] = {
            true,
            false,
            "fuchsia",
        },
        [167956] = {
            true,
            false,
            "fuchsia",
        },
        [224249] = {
            true,
            false,
            "aqua",
        },
        [189706] = {
            false,
            false,
            "yellow",
        },
        [151325] = {
            false,
            false,
            "fuchsia",
        },
        [180495] = {
            false,
            false,
            "fuchsia",
        },
        [223994] = {
            true,
            false,
            "fuchsia",
        },
        [186125] = {
            true,
            false,
            "fuchsia",
        },
        [165911] = {
            false,
            false,
            "fuchsia",
        },
        [201222] = {
            false,
            false,
            "cyan",
        },
        [184335] = {
            false,
            false,
            "WARRIOR",
        },
        [201223] = {
            true,
            false,
            "fuchsia",
        },
        [193291] = {
            false,
            false,
            "magenta",
        },
        [220158] = {
            true,
            false,
            "aqua",
        },
        [45924] = {
            false,
            false,
            "PALADIN",
        },
        [194315] = {
            true,
            false,
            "fuchsia",
        },
        [165913] = {
            false,
            false,
            "fuchsia",
        },
        [137511] = {
            false,
            false,
            "navajowhite",
        },
        [40167] = {
            true,
            false,
            "fuchsia",
        },
        [96934] = {
            false,
            false,
            "deepskyblue",
        },
        [171799] = {
            true,
            false,
            "fuchsia",
        },
        [193293] = {
            true,
            false,
            "aqua",
        },
        [114334] = {
            false,
            false,
            "mediumpurple",
        },
        [40935] = {
            false,
            false,
            "lime",
        },
        [129559] = {
            false,
            false,
            "lime",
        },
        [179733] = {
            false,
            false,
            "orangered",
        },
        [125977] = {
            false,
            false,
            "magenta",
        },
        [187154] = {
            false,
            false,
            "mediumslateblue",
        },
        [167964] = {
            false,
            false,
            "fuchsia",
        },
        [187155] = {
            true,
            false,
            "fuchsia",
        },
        [195855] = {
            false,
            false,
            "WARRIOR",
        },
        [134701] = {
            false,
            false,
            "magenta",
        },
        [218884] = {
            true,
            false,
            "fuchsia",
        },
        [167965] = {
            true,
            false,
            "fuchsia",
        },
        [137516] = {
            false,
            false,
            "lightsalmon",
        },
        [216326] = {
            true,
            false,
            "fuchsia",
        },
        [40936] = {
            false,
            false,
            "WARRIOR",
        },
        [165919] = {
            true,
            false,
            "fuchsia",
        },
        [137517] = {
            false,
            false,
            "peru",
        },
        [197904] = {
            false,
            false,
            "snow",
        },
        [115488] = {
            false,
            false,
            "aqua",
        },
        [171805] = {
            false,
            false,
            "blue",
        },
        [167967] = {
            true,
            false,
            "fuchsia",
        },
        [192787] = {
            false,
            false,
            "WARRIOR",
        },
        [197905] = {
            true,
            false,
            "fuchsia",
        },
        [163618] = {
            true,
            false,
            "fuchsia",
        },
        [192788] = {
            true,
            false,
            "fuchsia",
        },
        [205326] = {
            false,
            false,
            "lime",
        },
        [84400] = {
            false,
            false,
            "fuchsia",
        },
        [168992] = {
            true,
            false,
            "fuchsia",
        },
        [220423] = {
            true,
            false,
            "aqua",
        },
        [196115] = {
            true,
            false,
            "fuchsia",
        },
        [192789] = {
            true,
            false,
            "aqua",
        },
        [187160] = {
            true,
            false,
            "aqua",
        },
        [114338] = {
            false,
            false,
            "aqua",
        },
        [83761] = {
            false,
            false,
            "mediumslateblue",
        },
        [163620] = {
            false,
            false,
            "deepskyblue",
        },
        [135474] = {
            true,
            false,
            "fuchsia",
        },
        [59552] = {
            true,
            false,
            "fuchsia",
        },
        [189464] = {
            true,
            false,
            "fuchsia",
        },
        [206352] = {
            false,
            false,
            "deepskyblue",
        },
        [163621] = {
            true,
            false,
            "aqua",
        },
        [182045] = {
            false,
            false,
            "fuchsia",
        },
        [198933] = {
            false,
            false,
            "mediumpurple",
        },
        [133685] = {
            true,
            false,
            "fuchsia",
        },
        [189466] = {
            false,
            false,
            "cyan",
        },
        [189722] = {
            false,
            false,
            "mediumslateblue",
        },
        [165414] = {
            true,
            false,
            "magenta",
        },
        [133430] = {
            false,
            false,
            "cornflowerblue",
        },
        [135989] = {
            false,
            false,
            "WARRIOR",
        },
        [189467] = {
            false,
            false,
            "DRUID",
        },
        [83763] = {
            false,
            false,
            "deepskyblue",
        },
        [59553] = {
            false,
            false,
            "lime",
        },
        [199703] = {
            false,
            false,
            "aqua",
        },
        [97197] = {
            true,
            false,
            "fuchsia",
        },
        [133432] = {
            true,
            false,
            "fuchsia",
        },
        [45928] = {
            true,
            false,
            "aqua",
        },
        [83892] = {
            true,
            false,
            "fuchsia",
        },
        [163882] = {
            true,
            false,
            "fuchsia",
        },
        [192796] = {
            false,
            false,
            "lime",
        },
        [189470] = {
            true,
            false,
            "fuchsia",
        },
        [188703] = {
            false,
            false,
            "yellow",
        },
        [189471] = {
            false,
            false,
            "WARRIOR",
        },
        [189727] = {
            false,
            false,
            "fuchsia",
        },
        [83765] = {
            false,
            false,
            "aqua",
        },
        [83893] = {
            true,
            false,
            "fuchsia",
        },
        [189472] = {
            false,
            false,
            "deepskyblue",
        },
        [216339] = {
            true,
            false,
            "fuchsia",
        },
        [89011] = {
            false,
            false,
            "aqua",
        },
        [210966] = {
            true,
            false,
            "fuchsia",
        },
        [186658] = {
            true,
            false,
            "fuchsia",
        },
        [205337] = {
            true,
            false,
            "fuchsia",
        },
        [168747] = {
            false,
            false,
            "fuchsia",
        },
        [83894] = {
            false,
            false,
            "mediumslateblue",
        },
        [192800] = {
            true,
            false,
            "fuchsia",
        },
        [197406] = {
            false,
            false,
            "deepskyblue",
        },
        [201756] = {
            false,
            false,
            "fuchsia",
        },
        [216342] = {
            true,
            false,
            "fuchsia",
        },
        [100527] = {
            true,
            false,
            "fuchsia",
        },
        [59555] = {
            true,
            false,
            "fuchsia",
        },
        [163121] = {
            false,
            false,
            "deepskyblue",
        },
        [45930] = {
            true,
            false,
            "fuchsia",
        },
        [186151] = {
            false,
            false,
            "mediumslateblue",
        },
        [223253] = {
            true,
            false,
            "fuchsia",
        },
        [162099] = {
            false,
            false,
            "fuchsia",
        },
        [189478] = {
            false,
            false,
            "mediumslateblue",
        },
        [97202] = {
            false,
            false,
            "aqua",
        },
        [163891] = {
            true,
            false,
            "fuchsia",
        },
        [186664] = {
            false,
            false,
            "deepskyblue",
        },
        [195876] = {
            true,
            false,
            "fuchsia",
        },
        [135234] = {
            false,
            false,
            "WARRIOR",
        },
        [195877] = {
            true,
            false,
            "fuchsia",
        },
        [103344] = {
            false,
            false,
            "mediumslateblue",
        },
        [135235] = {
            false,
            false,
            "goldenrod",
        },
        [195878] = {
            true,
            false,
            "fuchsia",
        },
        [163894] = {
            false,
            false,
            "deepskyblue",
        },
        [75966] = {
            false,
            false,
            "fuchsia",
        },
        [199717] = {
            true,
            false,
            "fuchsia",
        },
        [165430] = {
            false,
            false,
            "deepskyblue",
        },
        [180015] = {
            false,
            false,
            "blue",
        },
        [223770] = {
            true,
            false,
            "fuchsia",
        },
        [136005] = {
            false,
            false,
            "blue",
        },
        [197671] = {
            false,
            false,
            "mediumslateblue",
        },
        [163128] = {
            true,
            false,
            "fuchsia",
        },
        [100531] = {
            true,
            false,
            "aqua",
        },
        [136006] = {
            false,
            false,
            "blue",
        },
        [164920] = {
            true,
            false,
            "aqua",
        },
        [135239] = {
            false,
            false,
            "paleturquoise",
        },
        [223772] = {
            true,
            false,
            "fuchsia",
        },
        [164921] = {
            true,
            false,
            "fuchsia",
        },
        [45932] = {
            false,
            false,
            "fuchsia",
        },
        [135240] = {
            true,
            false,
            "fuchsia",
        },
        [100532] = {
            true,
            false,
            "fuchsia",
        },
        [223773] = {
            true,
            false,
            "fuchsia",
        },
        [166969] = {
            false,
            false,
            "deepskyblue",
        },
        [208165] = {
            true,
            false,
            "fuchsia",
        },
        [177716] = {
            false,
            false,
            "deepskyblue",
        },
        [115757] = {
            false,
            false,
            "mediumslateblue",
        },
        [83389] = {
            false,
            false,
            "deepskyblue",
        },
        [166970] = {
            false,
            false,
            "blue",
        },
        [75713] = {
            true,
            false,
            "fuchsia",
        },
        [223775] = {
            true,
            false,
            "fuchsia",
        },
        [189232] = {
            false,
            false,
            "mediumslateblue",
        },
        [166971] = {
            false,
            false,
            "fuchsia",
        },
        [152898] = {
            false,
            false,
            "fuchsia",
        },
        [223776] = {
            true,
            false,
            "fuchsia",
        },
        [83390] = {
            false,
            false,
            "deepskyblue",
        },
        [231197] = {
            true,
            false,
            "aqua",
        },
        [195119] = {
            false,
            false,
            "magenta",
        },
        [189234] = {
            false,
            false,
            "mediumpurple",
        },
        [220195] = {
            true,
            false,
            "fuchsia",
        },
        [212775] = {
            true,
            false,
            "fuchsia",
        },
        [186420] = {
            true,
            false,
            "fuchsia",
        },
        [189235] = {
            true,
            false,
            "fuchsia",
        },
        [220196] = {
            true,
            false,
            "fuchsia",
        },
        [75459] = {
            true,
            false,
            "fuchsia",
        },
        [134990] = {
            false,
            false,
            "honeydew",
        },
        [167998] = {
            false,
            false,
            "deepskyblue",
        },
        [138061] = {
            false,
            false,
            "magenta",
        },
        [220197] = {
            true,
            false,
            "aqua",
        },
        [83392] = {
            false,
            false,
            "mediumslateblue",
        },
        [164929] = {
            true,
            false,
            "aqua",
        },
        [104246] = {
            false,
            false,
            "WARRIOR",
        },
        [212778] = {
            false,
            false,
            "fuchsia",
        },
        [81985] = {
            true,
            false,
            "fuchsia",
        },
        [131666] = {
            true,
            false,
            "fuchsia",
        },
        [138063] = {
            false,
            false,
            "blue",
        },
        [185656] = {
            true,
            false,
            "fuchsia",
        },
        [131667] = {
            false,
            false,
            "mediumslateblue",
        },
        [187192] = {
            false,
            false,
            "mediumpurple",
        },
        [65317] = {
            false,
            false,
            "mediumpurple",
        },
        [152905] = {
            false,
            false,
            "fuchsia",
        },
        [104247] = {
            true,
            false,
            "fuchsia",
        },
        [97083] = {
            false,
            false,
            "magenta",
        },
        [131669] = {
            false,
            false,
            "WARRIOR",
        },
        [176959] = {
            false,
            false,
            "deepskyblue",
        },
        [45935] = {
            true,
            false,
            "fuchsia",
        },
        [131670] = {
            false,
            false,
            "mediumslateblue",
        },
        [213806] = {
            true,
            false,
            "fuchsia",
        },
        [167493] = {
            true,
            false,
            "fuchsia",
        },
        [205363] = {
            true,
            false,
            "fuchsia",
        },
        [100539] = {
            false,
            false,
            "mediumslateblue",
        },
        [168007] = {
            false,
            false,
            "blue",
        },
        [179010] = {
            false,
            false,
            "deepskyblue",
        },
        [134232] = {
            true,
            false,
            "fuchsia",
        },
        [218671] = {
            true,
            false,
            "fuchsia",
        },
        [212786] = {
            true,
            false,
            "aqua",
        },
        [96574] = {
            false,
            false,
            "mediumslateblue",
        },
        [214066] = {
            true,
            false,
            "fuchsia",
        },
        [115765] = {
            false,
            false,
            "deepskyblue",
        },
        [189247] = {
            true,
            false,
            "fuchsia",
        },
        [104251] = {
            false,
            false,
            "lime",
        },
        [184130] = {
            true,
            false,
            "aqua",
        },
        [98366] = {
            false,
            false,
            "lime",
        },
        [41139] = {
            true,
            false,
            "fuchsia",
        },
        [179269] = {
            false,
            false,
            "deepskyblue",
        },
        [187969] = {
            false,
            false,
            "lime",
        },
        [184131] = {
            false,
            false,
            "cyan",
        },
        [101437] = {
            false,
            false,
            "peachpuff",
        },
        [131677] = {
            false,
            false,
            "mediumslateblue",
        },
        [165197] = {
            false,
            false,
            "mediumslateblue",
        },
        [208440] = {
            false,
            false,
            "mediumpurple",
        },
        [184132] = {
            true,
            false,
            "fuchsia",
        },
        [195135] = {
            false,
            false,
            "cyan",
        },
        [92610] = {
            false,
            false,
            "lime",
        },
        [84550] = {
            false,
            false,
            "mediumpurple",
        },
        [196671] = {
            true,
            false,
            "aqua",
        },
        [170572] = {
            true,
            false,
            "fuchsia",
        },
        [136541] = {
            false,
            false,
            "deepskyblue",
        },
        [208698] = {
            true,
            false,
            "fuchsia",
        },
        [98368] = {
            false,
            false,
            "WARRIOR",
        },
        [75979] = {
            true,
            false,
            "fuchsia",
        },
        [156244] = {
            false,
            false,
            "mediumpurple",
        },
        [201790] = {
            false,
            false,
            "mediumslateblue",
        },
        [171341] = {
            false,
            false,
            "deepskyblue",
        },
        [151127] = {
            false,
            false,
            "fuchsia",
        },
        [212793] = {
            true,
            false,
            "fuchsia",
        },
        [135263] = {
            false,
            false,
            "maroon",
        },
        [156245] = {
            false,
            false,
            "mediumpurple",
        },
        [128434] = {
            true,
            false,
            "fuchsia",
        },
        [197697] = {
            true,
            false,
            "aqua",
        },
        [223541] = {
            true,
            false,
            "aqua",
        },
        [199233] = {
            false,
            false,
            "mediumpurple",
        },
        [92612] = {
            true,
            false,
            "aqua",
        },
        [201792] = {
            false,
            false,
            "mediumpurple",
        },
        [171343] = {
            false,
            false,
            "deepskyblue",
        },
        [208445] = {
            false,
            false,
            "mediumslateblue",
        },
        [186696] = {
            false,
            false,
            "cyan",
        },
        [128435] = {
            false,
            false,
            "maroon",
        },
        [98370] = {
            true,
            false,
            "fuchsia",
        },
        [162133] = {
            false,
            false,
            "fuchsia",
        },
        [176974] = {
            false,
            false,
            "fuchsia",
        },
        [163157] = {
            true,
            false,
            "fuchsia",
        },
        [97219] = {
            false,
            false,
            "mediumslateblue",
        },
        [131685] = {
            true,
            false,
            "fuchsia",
        },
        [138338] = {
            true,
            false,
            "fuchsia",
        },
        [157017] = {
            false,
            false,
            "blue",
        },
        [220730] = {
            true,
            false,
            "aqua",
        },
        [184140] = {
            false,
            false,
            "fuchsia",
        },
        [211263] = {
            true,
            false,
            "aqua",
        },
        [184908] = {
            false,
            false,
            "magenta",
        },
        [193352] = {
            false,
            false,
            "peachpuff",
        },
        [84554] = {
            false,
            false,
            "fuchsia",
        },
        [208193] = {
            true,
            false,
            "fuchsia",
        },
        [136549] = {
            true,
            false,
            "aqua",
        },
        [231223] = {
            true,
            false,
            "fuchsia",
        },
        [184910] = {
            false,
            false,
            "palegreen",
        },
        [207939] = {
            true,
            false,
            "fuchsia",
        },
        [115388] = {
            false,
            false,
            "fuchsia",
        },
        [219454] = {
            true,
            false,
            "fuchsia",
        },
        [184911] = {
            false,
            false,
            "darksalmon",
        },
        [130485] = {
            false,
            false,
            "peru",
        },
        [136295] = {
            false,
            false,
            "peru",
        },
        [186191] = {
            true,
            false,
            "fuchsia",
        },
        [107073] = {
            false,
            false,
            "magenta",
        },
        [185680] = {
            false,
            false,
            "magenta",
        },
        [127799] = {
            false,
            false,
            "WARRIOR",
        },
        [192333] = {
            true,
            false,
            "fuchsia",
        },
        [151649] = {
            false,
            false,
            "deepskyblue",
        },
        [133482] = {
            true,
            false,
            "aqua",
        },
        [208198] = {
            false,
            false,
            "fuchsia",
        },
        [173655] = {
            true,
            false,
            "aqua",
        },
        [131436] = {
            true,
            false,
            "aqua",
        },
        [205384] = {
            true,
            false,
            "fuchsia",
        },
        [134251] = {
            false,
            false,
            "honeydew",
        },
        [194894] = {
            true,
            false,
            "fuchsia",
        },
        [189265] = {
            true,
            false,
            "fuchsia",
        },
        [185683] = {
            false,
            false,
            "palegreen",
        },
        [208456] = {
            true,
            false,
            "fuchsia",
        },
        [194895] = {
            true,
            false,
            "fuchsia",
        },
        [189266] = {
            true,
            false,
            "aqua",
        },
        [190034] = {
            false,
            false,
            "mediumslateblue",
        },
        [178008] = {
            false,
            false,
            "yellow",
        },
        [194896] = {
            false,
            false,
            "fuchsia",
        },
        [130488] = {
            false,
            false,
            "lightsalmon",
        },
        [207946] = {
            true,
            false,
            "fuchsia",
        },
        [185685] = {
            false,
            false,
            "darksalmon",
        },
        [165471] = {
            false,
            false,
            "blue",
        },
        [114624] = {
            false,
            false,
            "aqua",
        },
        [194897] = {
            false,
            false,
            "fuchsia",
        },
        [194898] = {
            false,
            false,
            "WARRIOR",
        },
        [52019] = {
            false,
            false,
            "fuchsia",
        },
        [190294] = {
            true,
            false,
            "fuchsia",
        },
        [151657] = {
            true,
            false,
            "fuchsia",
        },
        [225605] = {
            true,
            false,
            "fuchsia",
        },
        [40633] = {
            true,
            false,
            "aqua",
        },
        [187224] = {
            false,
            false,
            "cyan",
        },
        [134514] = {
            false,
            false,
            "lightgreen",
        },
        [114626] = {
            false,
            false,
            "aqua",
        },
        [174175] = {
            false,
            false,
            "deepskyblue",
        },
        [198995] = {
            false,
            false,
            "mediumslateblue",
        },
        [96587] = {
            false,
            false,
            "deepskyblue",
        },
        [203857] = {
            true,
            false,
            "fuchsia",
        },
        [214348] = {
            true,
            false,
            "fuchsia",
        },
        [83026] = {
            false,
            false,
            "mediumslateblue",
        },
        [198996] = {
            false,
            false,
            "mediumpurple",
        },
        [170850] = {
            false,
            false,
            "deepskyblue",
        },
        [114627] = {
            false,
            false,
            "blue",
        },
        [161895] = {
            false,
            false,
            "magenta",
        },
        [198997] = {
            false,
            false,
            "mediumpurple",
        },
        [115395] = {
            false,
            false,
            "mediumpurple",
        },
        [198998] = {
            false,
            false,
            "mediumpurple",
        },
        [81236] = {
            false,
            false,
            "aqua",
        },
        [189531] = {
            true,
            false,
            "fuchsia",
        },
        [195928] = {
            true,
            false,
            "fuchsia",
        },
        [165479] = {
            false,
            false,
            "mediumpurple",
        },
        [114628] = {
            false,
            false,
            "magenta",
        },
        [198999] = {
            false,
            false,
            "mediumslateblue",
        },
        [203861] = {
            false,
            false,
            "mediumslateblue",
        },
        [195929] = {
            true,
            false,
            "fuchsia",
        },
        [214608] = {
            false,
            false,
            "aqua",
        },
        [186206] = {
            false,
            false,
            "WARRIOR",
        },
        [231496] = {
            true,
            false,
            "fuchsia",
        },
        [199000] = {
            false,
            false,
            "mediumslateblue",
        },
        [195930] = {
            true,
            false,
            "fuchsia",
        },
        [114629] = {
            false,
            false,
            "deepskyblue",
        },
        [219983] = {
            true,
            false,
            "aqua",
        },
        [186208] = {
            false,
            false,
            "DRUID",
        },
        [180323] = {
            false,
            false,
            "fuchsia",
        },
        [193373] = {
            true,
            false,
            "fuchsia",
        },
        [165483] = {
            false,
            false,
            "fuchsia",
        },
        [87252] = {
            false,
            false,
            "mediumpurple",
        },
        [164461] = {
            true,
            false,
            "fuchsia",
        },
        [134012] = {
            false,
            false,
            "lightsalmon",
        },
        [181861] = {
            true,
            false,
            "aqua",
        },
        [180070] = {
            false,
            false,
            "fuchsia",
        },
        [129600] = {
            true,
            false,
            "fuchsia",
        },
        [210264] = {
            true,
            false,
            "aqua",
        },
        [167533] = {
            false,
            false,
            "deepskyblue",
        },
        [101326] = {
            false,
            false,
            "fuchsia",
        },
        [157810] = {
            false,
            false,
            "deepskyblue",
        },
        [164463] = {
            true,
            false,
            "fuchsia",
        },
        [210265] = {
            true,
            false,
            "fuchsia",
        },
        [114632] = {
            false,
            false,
            "aqua",
        },
        [211289] = {
            true,
            false,
            "fuchsia",
        },
        [129601] = {
            false,
            false,
            "deepskyblue",
        },
        [211290] = {
            true,
            false,
            "fuchsia",
        },
        [99664] = {
            false,
            false,
            "fuchsia",
        },
        [102095] = {
            false,
            false,
            "lime",
        },
        [104270] = {
            true,
            false,
            "fuchsia",
        },
        [114633] = {
            false,
            false,
            "deepskyblue",
        },
        [135552] = {
            false,
            false,
            "deepskyblue",
        },
        [207453] = {
            true,
            false,
            "fuchsia",
        },
        [129602] = {
            true,
            false,
            "aqua",
        },
        [111563] = {
            false,
            false,
            "WARRIOR",
        },
        [205151] = {
            true,
            false,
            "aqua",
        },
        [197219] = {
            false,
            false,
            "mediumslateblue",
        },
        [187240] = {
            false,
            false,
            "mediumslateblue",
        },
        [40765] = {
            false,
            false,
            "mediumpurple",
        },
        [171376] = {
            false,
            false,
            "deepskyblue",
        },
        [114634] = {
            false,
            false,
            "mediumslateblue",
        },
        [207199] = {
            true,
            false,
            "fuchsia",
        },
        [205408] = {
            false,
            false,
            "WARRIOR",
        },
        [191847] = {
            true,
            false,
            "fuchsia",
        },
        [179821] = {
            false,
            false,
            "mediumslateblue",
        },
        [207456] = {
            true,
            false,
            "fuchsia",
        },
        [196198] = {
            false,
            false,
            "blue",
        },
        [115019] = {
            false,
            false,
            "deepskyblue",
        },
        [207969] = {
            true,
            false,
            "fuchsia",
        },
        [188011] = {
            false,
            false,
            "mediumslateblue",
        },
        [186220] = {
            true,
            false,
            "fuchsia",
        },
        [180335] = {
            false,
            false,
            "deepskyblue",
        },
        [207202] = {
            true,
            false,
            "fuchsia",
        },
        [150142] = {
            false,
            false,
            "deepskyblue",
        },
        [104273] = {
            false,
            false,
            "deepskyblue",
        },
        [126918] = {
            false,
            false,
            "lime",
        },
        [196712] = {
            false,
            false,
            "fuchsia",
        },
        [168310] = {
            false,
            false,
            "fuchsia",
        },
        [207459] = {
            true,
            false,
            "fuchsia",
        },
        [101075] = {
            false,
            false,
            "fuchsia",
        },
        [134024] = {
            true,
            false,
            "fuchsia",
        },
        [196202] = {
            true,
            false,
            "fuchsia",
        },
        [135048] = {
            false,
            false,
            "magenta",
        },
        [174197] = {
            true,
            false,
            "magenta",
        },
        [205158] = {
            true,
            false,
            "fuchsia",
        },
        [187503] = {
            false,
            false,
            "mediumslateblue",
        },
        [196203] = {
            false,
            false,
            "deepskyblue",
        },
        [135049] = {
            true,
            false,
            "fuchsia",
        },
        [150146] = {
            false,
            false,
            "aqua",
        },
        [128455] = {
            true,
            false,
            "aqua",
        },
        [132491] = {
            false,
            false,
            "palegreen",
        },
        [104275] = {
            false,
            false,
            "mediumslateblue",
        },
        [128967] = {
            false,
            false,
            "palegreen",
        },
        [168058] = {
            true,
            false,
            "fuchsia",
        },
        [136330] = {
            false,
            false,
            "fuchsia",
        },
        [115406] = {
            false,
            false,
            "deepskyblue",
        },
        [208743] = {
            true,
            false,
            "fuchsia",
        },
        [186738] = {
            false,
            false,
            "mediumslateblue",
        },
        [166524] = {
            true,
            false,
            "fuchsia",
        },
        [214117] = {
            false,
            false,
            "orangered",
        },
        [206697] = {
            true,
            false,
            "fuchsia",
        },
        [186739] = {
            false,
            false,
            "mediumslateblue",
        },
        [168572] = {
            true,
            false,
            "fuchsia",
        },
        [220003] = {
            true,
            false,
            "aqua",
        },
        [115407] = {
            false,
            false,
            "blue",
        },
        [206698] = {
            true,
            false,
            "fuchsia",
        },
        [186740] = {
            false,
            false,
            "WARRIOR",
        },
        [213607] = {
            false,
            false,
            "WARRIOR",
        },
        [189555] = {
            false,
            false,
            "blue",
        },
        [133007] = {
            true,
            false,
            "aqua",
        },
        [168318] = {
            true,
            false,
            "fuchsia",
        },
        [162689] = {
            false,
            false,
            "deepskyblue",
        },
        [183671] = {
            false,
            false,
            "fuchsia",
        },
        [157572] = {
            false,
            false,
            "deepskyblue",
        },
        [223844] = {
            true,
            false,
            "fuchsia",
        },
        [164737] = {
            false,
            false,
            "fuchsia",
        },
        [187510] = {
            false,
            false,
            "deepskyblue",
        },
        [163458] = {
            true,
            false,
            "fuchsia",
        },
        [137103] = {
            false,
            false,
            "lime",
        },
        [98521] = {
            true,
            false,
            "fuchsia",
        },
        [162691] = {
            false,
            false,
            "mediumslateblue",
        },
        [163459] = {
            true,
            false,
            "fuchsia",
        },
        [165762] = {
            false,
            false,
            "deepskyblue",
        },
        [40577] = {
            false,
            false,
            "mediumslateblue",
        },
        [109908] = {
            false,
            false,
            "fuchsia",
        },
        [162692] = {
            false,
            false,
            "deepskyblue",
        },
        [187768] = {
            false,
            false,
            "deepskyblue",
        },
        [102232] = {
            true,
            false,
            "fuchsia",
        },
        [165763] = {
            false,
            false,
            "deepskyblue",
        },
        [180348] = {
            false,
            false,
            "blue",
        },
        [129227] = {
            false,
            false,
            "maroon",
        },
        [168578] = {
            true,
            false,
            "fuchsia",
        },
        [189816] = {
            false,
            false,
            "deepskyblue",
        },
        [165764] = {
            false,
            false,
            "mediumslateblue",
        },
        [166276] = {
            true,
            false,
            "fuchsia",
        },
        [170882] = {
            true,
            false,
            "magenta",
        },
        [130635] = {
            true,
            false,
            "fuchsia",
        },
        [188026] = {
            false,
            false,
            "fuchsia",
        },
        [187771] = {
            false,
            false,
            "blue",
        },
        [174210] = {
            true,
            false,
            "magenta",
        },
        [169861] = {
            false,
            false,
            "deepskyblue",
        },
        [180864] = {
            false,
            false,
            "fuchsia",
        },
        [183423] = {
            false,
            false,
            "deepskyblue",
        },
        [179841] = {
            false,
            false,
            "aqua",
        },
        [150160] = {
            false,
            false,
            "mediumslateblue",
        },
        [183424] = {
            false,
            false,
            "aqua",
        },
        [179842] = {
            false,
            false,
            "deepskyblue",
        },
        [204918] = {
            true,
            false,
            "fuchsia",
        },
        [134041] = {
            false,
            false,
            "deepskyblue",
        },
        [183425] = {
            false,
            false,
            "deepskyblue",
        },
        [171656] = {
            true,
            false,
            "fuchsia",
        },
        [126928] = {
            false,
            false,
            "DRUID",
        },
        [88163] = {
            false,
            false,
            "mediumslateblue",
        },
        [86372] = {
            false,
            false,
            "cyan",
        },
        [199547] = {
            false,
            false,
            "blueviolet",
        },
        [219984] = {
            true,
            false,
            "fuchsia",
        },
        [186242] = {
            false,
            false,
            "lime",
        },
        [194816] = {
            false,
            false,
            "deepskyblue",
        },
        [170480] = {
            false,
            false,
            "mediumpurple",
        },
        [223423] = {
            true,
            false,
            "aqua",
        },
        [97720] = {
            false,
            false,
            "magenta",
        },
        [179334] = {
            false,
            false,
            "mediumslateblue",
        },
        [180432] = {
            false,
            false,
            "blue",
        },
        [79720] = {
            false,
            false,
            "magenta",
        },
        [168156] = {
            false,
            false,
            "fuchsia",
        },
        [122963] = {
            false,
            false,
            "mediumpurple",
        },
        [199037] = {
            true,
            false,
            "fuchsia",
        },
        [150165] = {
            false,
            false,
            "aqua",
        },
        [199549] = {
            false,
            false,
            "deepskyblue",
        },
        [187523] = {
            false,
            false,
            "mediumslateblue",
        },
        [220141] = {
            true,
            false,
            "fuchsia",
        },
        [179847] = {
            false,
            false,
            "fuchsia",
        },
        [157571] = {
            false,
            false,
            "deepskyblue",
        },
        [76518] = {
            false,
            false,
            "fuchsia",
        },
        [176521] = {
            false,
            false,
            "blue",
        },
        [205435] = {
            false,
            false,
            "mediumpurple",
        },
        [205691] = {
            true,
            false,
            "fuchsia",
        },
        [168396] = {
            false,
            false,
            "deepskyblue",
        },
        [177787] = {
            false,
            false,
            "aqua",
        },
        [162103] = {
            false,
            false,
            "deepskyblue",
        },
        [180104] = {
            false,
            false,
            "deepskyblue",
        },
        [166275] = {
            true,
            false,
            "fuchsia",
        },
        [128969] = {
            true,
            false,
            "fuchsia",
        },
        [188244] = {
            false,
            false,
            "mediumpurple",
        },
        [163862] = {
            false,
            false,
            "deepskyblue",
        },
        [164557] = {
            false,
            false,
            "deepskyblue",
        },
        [195842] = {
            true,
            false,
            "fuchsia",
        },
        [212673] = {
            true,
            false,
            "aqua",
        },
        [190340] = {
            true,
            false,
            "aqua",
        },
        [184107] = {
            false,
            false,
            "WARRIOR",
        },
        [176523] = {
            false,
            false,
            "mediumpurple",
        },
        [150168] = {
            false,
            false,
            "mediumslateblue",
        },
        [207186] = {
            true,
            false,
            "fuchsia",
        },
        [95842] = {
            true,
            false,
            "fuchsia",
        },
        [99891] = {
            false,
            false,
            "WARRIOR",
        },
        [102094] = {
            false,
            false,
            "WARRIOR",
        },
        [77803] = {
            false,
            false,
            "deepskyblue",
        },
        [122965] = {
            false,
            false,
            "mediumpurple",
        },
        [186116] = {
            true,
            false,
            "fuchsia",
        },
        [150169] = {
            false,
            false,
            "deepskyblue",
        },
        [165076] = {
            true,
            false,
            "magenta",
        },
        [165010] = {
            false,
            false,
            "mediumpurple",
        },
        [164707] = {
            false,
            false,
            "mediumpurple",
        },
        [156212] = {
            false,
            false,
            "deepskyblue",
        },
        [210812] = {
            true,
            false,
            "fuchsia",
        },
        [135329] = {
            false,
            false,
            "magenta",
        },
        [127879] = {
            false,
            false,
            "WARRIOR",
        },
        [206070] = {
            false,
            false,
            "mediumslateblue",
        },
        [135167] = {
            false,
            false,
            "peru",
        },
        [114266] = {
            false,
            false,
            "deepskyblue",
        },
        [224962] = {
            true,
            false,
            "fuchsia",
        },
        [179852] = {
            false,
            false,
            "blue",
        },
        [138064] = {
            false,
            false,
            "blue",
        },
        [137521] = {
            false,
            false,
            "cornflowerblue",
        },
        [131492] = {
            true,
            false,
            "fuchsia",
        },
        [168594] = {
            true,
            false,
            "fuchsia",
        },
        [111068] = {
            false,
            false,
            "mediumpurple",
        },
        [209333] = {
            false,
            false,
            "mediumslateblue",
        },
        [115418] = {
            false,
            false,
            "deepskyblue",
        },
        [84957] = {
            true,
            false,
            "fuchsia",
        },
        [196043] = {
            true,
            false,
            "fuchsia",
        },
        [139425] = {
            false,
            false,
            "honeydew",
        },
        [207177] = {
            false,
            false,
            "mediumslateblue",
        },
        [212403] = {
            true,
            false,
            "fuchsia",
        },
        [213885] = {
            true,
            false,
            "fuchsia",
        },
        [98275] = {
            true,
            false,
            "aqua",
        },
        [118489] = {
            false,
            false,
            "fuchsia",
        },
        [98813] = {
            true,
            false,
            "fuchsia",
        },
        [169875] = {
            true,
            false,
            "magenta",
        },
        [122967] = {
            false,
            false,
            "mediumslateblue",
        },
        [81297] = {
            false,
            false,
            "deepskyblue",
        },
        [45477] = {
            true,
            false,
            "aqua",
        },
        [203799] = {
            false,
            false,
            "deepskyblue",
        },
        [169927] = {
            true,
            false,
            "fuchsia",
        },
        [115419] = {
            false,
            false,
            "mediumslateblue",
        },
        [177808] = {
            false,
            false,
            "mediumpurple",
        },
        [95832] = {
            false,
            false,
            "WARRIOR",
        },
        [204931] = {
            false,
            false,
            "mediumslateblue",
        },
        [205265] = {
            false,
            false,
            "WARRIOR",
        },
        [137484] = {
            false,
            false,
            "gold",
        },
        [207796] = {
            false,
            false,
            "orangered",
        },
        [196577] = {
            false,
            false,
            "snow",
        },
        [131545] = {
            true,
            false,
            "fuchsia",
        },
        [102295] = {
            false,
            false,
            "cyan",
        },
        [195851] = {
            false,
            false,
            "lime",
        },
        [122968] = {
            false,
            false,
            "mediumpurple",
        },
        [190407] = {
            true,
            false,
            "fuchsia",
        },
        [228424] = {
            true,
            false,
            "fuchsia",
        },
        [167111] = {
            true,
            false,
            "fuchsia",
        },
        [195927] = {
            true,
            false,
            "fuchsia",
        },
        [135258] = {
            false,
            false,
            "peru",
        },
        [130436] = {
            false,
            false,
            "aqua",
        },
        [190348] = {
            true,
            false,
            "fuchsia",
        },
        [114804] = {
            false,
            false,
            "aqua",
        },
        [154014] = {
            false,
            false,
            "deepskyblue",
        },
        [100526] = {
            false,
            false,
            "WARRIOR",
        },
        [200126] = {
            true,
            false,
            "fuchsia",
        },
        [190403] = {
            true,
            false,
            "aqua",
        },
        [118491] = {
            false,
            false,
            "deepskyblue",
        },
        [165529] = {
            true,
            false,
            "magenta",
        },
        [188302] = {
            false,
            false,
            "yellow",
        },
        [200840] = {
            false,
            false,
            "deepskyblue",
        },
        [100991] = {
            false,
            false,
            "fuchsia",
        },
        [129366] = {
            false,
            false,
            "goldenrod",
        },
        [95674] = {
            false,
            false,
            "mediumslateblue",
        },
        [229686] = {
            true,
            false,
            "fuchsia",
        },
        [206214] = {
            false,
            false,
            "mediumpurple",
        },
        [186741] = {
            true,
            false,
            "fuchsia",
        },
        [225204] = {
            true,
            false,
            "fuchsia",
        },
        [101476] = {
            false,
            false,
            "magenta",
        },
        [180431] = {
            false,
            false,
            "aqua",
        },
        [153292] = {
            false,
            false,
            "khaki",
        },
        [144293] = {
            false,
            false,
            "mediumslateblue",
        },
        [185032] = {
            false,
            false,
            "mediumpurple",
        },
        [210108] = {
            true,
            false,
            "fuchsia",
        },
        [114526] = {
            false,
            false,
            "aqua",
        },
        [98243] = {
            true,
            false,
            "aqua",
        },
        [98406] = {
            false,
            false,
            "cyan",
        },
        [166299] = {
            true,
            false,
            "fuchsia",
        },
        [129367] = {
            true,
            false,
            "fuchsia",
        },
        [213892] = {
            true,
            false,
            "fuchsia",
        },
        [137830] = {
            true,
            false,
            "fuchsia",
        },
        [194316] = {
            true,
            false,
            "fuchsia",
        },
        [97068] = {
            false,
            false,
            "WARRIOR",
        },
        [194487] = {
            false,
            false,
            "cyan",
        },
        [169425] = {
            false,
            false,
            "gold",
        },
        [136076] = {
            false,
            false,
            "lightcoral",
        },
        [81984] = {
            false,
            false,
            "mediumslateblue",
        },
        [144295] = {
            true,
            false,
            "fuchsia",
        },
        [197985] = {
            true,
            false,
            "fuchsia",
        },
        [75506] = {
            false,
            false,
            "deepskyblue",
        },
        [170690] = {
            true,
            false,
            "magenta",
        },
        [217208] = {
            true,
            false,
            "fuchsia",
        },
        [122971] = {
            true,
            false,
            "fuchsia",
        },
        [166301] = {
            false,
            false,
            "fuchsia",
        },
        [123227] = {
            true,
            false,
            "fuchsia",
        },
        [144296] = {
            true,
            false,
            "aqua",
        },
        [211228] = {
            true,
            false,
            "fuchsia",
        },
        [213338] = {
            true,
            false,
            "fuchsia",
        },
        [208521] = {
            false,
            false,
            "deepskyblue",
        },
        [132820] = {
            false,
            false,
            "WARRIOR",
        },
        [169426] = {
            false,
            false,
            "gold",
        },
        [154020] = {
            false,
            false,
            "deepskyblue",
        },
        [213932] = {
            true,
            false,
            "fuchsia",
        },
        [209801] = {
            true,
            false,
            "aqua",
        },
        [193462] = {
            true,
            false,
            "fuchsia",
        },
        [155812] = {
            false,
            false,
            "blue",
        },
        [177817] = {
            false,
            false,
            "aqua",
        },
        [98280] = {
            true,
            false,
            "fuchsia",
        },
        [122972] = {
            true,
            false,
            "fuchsia",
        },
        [41096] = {
            true,
            false,
            "fuchsia",
        },
        [129369] = {
            false,
            false,
            "lightsalmon",
        },
        [98792] = {
            true,
            false,
            "aqua",
        },
        [131817] = {
            true,
            false,
            "aqua",
        },
        [102019] = {
            false,
            false,
            "aqua",
        },
        [136249] = {
            false,
            false,
            "plum",
        },
        [163524] = {
            false,
            false,
            "mediumslateblue",
        },
        [165222] = {
            true,
            false,
            "fuchsia",
        },
        [179388] = {
            false,
            false,
            "aqua",
        },
        [139949] = {
            false,
            false,
            "honeydew",
        },
        [184020] = {
            false,
            false,
            "WARRIOR",
        },
        [101991] = {
            true,
            false,
            "fuchsia",
        },
        [39960] = {
            false,
            false,
            "WARRIOR",
        },
        [152009] = {
            false,
            false,
            "deepskyblue",
        },
        [162049] = {
            false,
            false,
            "mediumslateblue",
        },
        [122973] = {
            true,
            false,
            "fuchsia",
        },
        [164926] = {
            false,
            false,
            "fuchsia",
        },
        [129370] = {
            true,
            false,
            "fuchsia",
        },
        [163126] = {
            true,
            false,
            "fuchsia",
        },
        [165946] = {
            false,
            false,
            "deepskyblue",
        },
        [175517] = {
            false,
            false,
            "blue",
        },
        [197698] = {
            true,
            false,
            "aqua",
        },
        [135052] = {
            false,
            false,
            "WARRIOR",
        },
        [135204] = {
            false,
            false,
            "honeydew",
        },
        [164506] = {
            true,
            false,
            "fuchsia",
        },
        [75451] = {
            false,
            false,
            "fuchsia",
        },
        [207198] = {
            true,
            false,
            "fuchsia",
        },
        [81522] = {
            false,
            false,
            "mediumpurple",
        },
        [229252] = {
            true,
            false,
            "fuchsia",
        },
        [104295] = {
            true,
            false,
            "fuchsia",
        },
        [190359] = {
            false,
            false,
            "WARRIOR",
        },
        [211341] = {
            true,
            false,
            "fuchsia",
        },
        [47238] = {
            true,
            false,
            "fuchsia",
        },
        [187033] = {
            true,
            false,
            "aqua",
        },
        [81864] = {
            false,
            false,
            "blue",
        },
        [132532] = {
            false,
            false,
            "palegreen",
        },
        [183707] = {
            false,
            false,
            "deepskyblue",
        },
        [214668] = {
            true,
            false,
            "fuchsia",
        },
        [130011] = {
            true,
            false,
            "aqua",
        },
        [191232] = {
            false,
            false,
            "blue",
        },
        [144294] = {
            true,
            false,
            "fuchsia",
        },
        [186644] = {
            false,
            false,
            "mediumslateblue",
        },
        [219046] = {
            true,
            false,
            "fuchsia",
        },
        [76104] = {
            true,
            false,
            "fuchsia",
        },
        [134284] = {
            true,
            false,
            "fuchsia",
        },
        [173729] = {
            false,
            false,
            "mediumslateblue",
        },
        [206351] = {
            true,
            false,
            "fuchsia",
        },
        [211087] = {
            true,
            false,
            "fuchsia",
        },
        [216338] = {
            true,
            false,
            "aqua",
        },
        [190345] = {
            true,
            false,
            "fuchsia",
        },
        [189338] = {
            false,
            false,
            "magenta",
        },
        [104278] = {
            true,
            false,
            "fuchsia",
        },
        [193944] = {
            true,
            false,
            "fuchsia",
        },
        [201754] = {
            false,
            false,
            "deepskyblue",
        },
        [190362] = {
            true,
            false,
            "fuchsia",
        },
        [40586] = {
            false,
            false,
            "mediumslateblue",
        },
        [168357] = {
            true,
            false,
            "fuchsia",
        },
        [163520] = {
            false,
            false,
            "deepskyblue",
        },
        [80935] = {
            false,
            false,
            "magenta",
        },
        [183033] = {
            false,
            false,
            "magenta",
        },
        [204560] = {
            false,
            false,
            "fuchsia",
        },
        [40923] = {
            false,
            false,
            "WARRIOR",
        },
        [169893] = {
            true,
            false,
            "aqua",
        },
        [211089] = {
            true,
            false,
            "aqua",
        },
        [173044] = {
            true,
            false,
            "fuchsia",
        },
        [136186] = {
            false,
            false,
            "honeydew",
        },
        [189340] = {
            true,
            false,
            "aqua",
        },
        [76407] = {
            false,
            false,
            "mediumslateblue",
        },
        [157634] = {
            false,
            false,
            "blue",
        },
        [99360] = {
            false,
            false,
            "blue",
        },
        [193760] = {
            false,
            false,
            "mediumslateblue",
        },
        [105705] = {
            false,
            false,
            "WARRIOR",
        },
        [45704] = {
            false,
            false,
            "magenta",
        },
        [187315] = {
            false,
            false,
            "WARRIOR",
        },
        [92538] = {
            false,
            false,
            "lime",
        },
        [40484] = {
            true,
            false,
            "aqua",
        },
        [223777] = {
            true,
            false,
            "fuchsia",
        },
        [130909] = {
            true,
            false,
            "aqua",
        },
        [207940] = {
            true,
            false,
            "fuchsia",
        },
        [216364] = {
            true,
            false,
            "fuchsia",
        },
        [164266] = {
            false,
            false,
            "deepskyblue",
        },
        [129374] = {
            true,
            false,
            "aqua",
        },
        [45926] = {
            false,
            false,
            "WARRIOR",
        },
        [81603] = {
            false,
            false,
            "mediumslateblue",
        },
        [206230] = {
            false,
            false,
            "fuchsia",
        },
        [220815] = {
            true,
            false,
            "fuchsia",
        },
        [136139] = {
            false,
            false,
            "peru",
        },
        [144071] = {
            true,
            false,
            "fuchsia",
        },
        [217489] = {
            true,
            false,
            "aqua",
        },
        [194990] = {
            false,
            false,
            "aqua",
        },
        [196482] = {
            false,
            false,
            "mediumslateblue",
        },
        [187552] = {
            false,
            false,
            "deepskyblue",
        },
        [199748] = {
            true,
            false,
            "fuchsia",
        },
        [91002] = {
            false,
            false,
            "fuchsia",
        },
        [138281] = {
            true,
            false,
            "aqua",
        },
        [114790] = {
            false,
            false,
            "mediumslateblue",
        },
        [98542] = {
            false,
            false,
            "mediumslateblue",
        },
        [213770] = {
            false,
            false,
            "mediumslateblue",
        },
        [99366] = {
            true,
            false,
            "fuchsia",
        },
        [134331] = {
            false,
            false,
            "gold",
        },
        [45917] = {
            false,
            false,
            "cyan",
        },
        [206140] = {
            true,
            false,
            "fuchsia",
        },
        [190368] = {
            true,
            false,
            "fuchsia",
        },
        [200836] = {
            false,
            false,
            "deepskyblue",
        },
        [176551] = {
            false,
            false,
            "deepskyblue",
        },
        [213893] = {
            true,
            false,
            "fuchsia",
        },
        [224271] = {
            true,
            false,
            "fuchsia",
        },
        [40634] = {
            true,
            false,
            "fuchsia",
        },
        [214421] = {
            true,
            false,
            "fuchsia",
        },
        [104300] = {
            true,
            false,
            "fuchsia",
        },
        [165805] = {
            false,
            false,
            "mediumpurple",
        },
        [82039] = {
            false,
            false,
            "magenta",
        },
        [114783] = {
            false,
            false,
            "deepskyblue",
        },
        [199325] = {
            false,
            false,
            "deepskyblue",
        },
        [102253] = {
            false,
            false,
            "deepskyblue",
        },
        [185508] = {
            false,
            false,
            "lime",
        },
        [99359] = {
            false,
            false,
            "cyan",
        },
        [188067] = {
            true,
            false,
            "fuchsia",
        },
        [190370] = {
            false,
            false,
            "mediumslateblue",
        },
        [168109] = {
            false,
            false,
            "deepskyblue",
        },
        [205723] = {
            false,
            false,
            "deepskyblue",
        },
        [130400] = {
            false,
            false,
            "mediumslateblue",
        },
        [197535] = {
            true,
            false,
            "fuchsia",
        },
        [168443] = {
            true,
            false,
            "fuchsia",
        },
        [198047] = {
            true,
            false,
            "fuchsia",
        },
        [114792] = {
            false,
            false,
            "aqua",
        },
        [190371] = {
            false,
            false,
            "WARRIOR",
        },
        [137405] = {
            true,
            false,
            "fuchsia",
        },
        [205212] = {
            false,
            false,
            "deepskyblue",
        },
        [101438] = {
            false,
            false,
            "aqua",
        },
        [165111] = {
            true,
            false,
            "fuchsia",
        },
        [45922] = {
            true,
            false,
            "fuchsia",
        },
        [187897] = {
            true,
            false,
            "aqua",
        },
        [168718] = {
            false,
            false,
            "aqua",
        },
        [231312] = {
            true,
            false,
            "fuchsia",
        },
        [204262] = {
            false,
            false,
            "fuchsia",
        },
        [165410] = {
            false,
            false,
            "mediumpurple",
        },
        [213913] = {
            true,
            false,
            "fuchsia",
        },
        [203678] = {
            false,
            false,
            "mediumslateblue",
        },
        [150712] = {
            false,
            false,
            "aqua",
        },
        [194317] = {
            true,
            false,
            "fuchsia",
        },
        [190373] = {
            true,
            false,
            "fuchsia",
        },
        [194467] = {
            false,
            false,
            "blue",
        },
        [155830] = {
            false,
            false,
            "deepskyblue",
        },
        [187566] = {
            false,
            false,
            "mediumslateblue",
        },
        [154744] = {
            false,
            false,
            "mediumslateblue",
        },
        [45572] = {
            false,
            false,
            "fuchsia",
        },
        [170490] = {
            true,
            false,
            "fuchsia",
        },
        [39616] = {
            false,
            false,
            "WARRIOR",
        },
        [90997] = {
            true,
            false,
            "aqua",
        },
        [201788] = {
            false,
            false,
            "fuchsia",
        },
        [155831] = {
            false,
            false,
            "fuchsia",
        },
        [167607] = {
            false,
            false,
            "deepskyblue",
        },
        [134338] = {
            false,
            false,
            "navajowhite",
        },
        [205727] = {
            true,
            false,
            "fuchsia",
        },
        [171184] = {
            false,
            false,
            "mediumpurple",
        },
        [208363] = {
            false,
            false,
            "mediumslateblue",
        },
        [194469] = {
            false,
            false,
            "blue",
        },
        [169905] = {
            false,
            false,
            "deepskyblue",
        },
        [90998] = {
            true,
            false,
            "fuchsia",
        },
        [192934] = {
            false,
            false,
            "mediumslateblue",
        },
        [165556] = {
            false,
            false,
            "fuchsia",
        },
        [168882] = {
            false,
            false,
            "fuchsia",
        },
        [122984] = {
            false,
            false,
            "mediumslateblue",
        },
        [82682] = {
            false,
            false,
            "mediumslateblue",
        },
        [198308] = {
            false,
            false,
            "mediumpurple",
        },
        [137486] = {
            false,
            false,
            "gold",
        },
        [131823] = {
            false,
            false,
            "mediumslateblue",
        },
        [113537] = {
            true,
            false,
            "aqua",
        },
        [168627] = {
            true,
            false,
            "fuchsia",
        },
        [98538] = {
            false,
            false,
            "cyan",
        },
        [83578] = {
            false,
            false,
            "mediumslateblue",
        },
        [162744] = {
            false,
            false,
            "deepskyblue",
        },
        [213343] = {
            true,
            false,
            "aqua",
        },
        [190377] = {
            true,
            false,
            "fuchsia",
        },
        [192680] = {
            false,
            false,
            "mediumpurple",
        },
        [212681] = {
            false,
            false,
            "deepskyblue",
        },
        [139422] = {
            false,
            false,
            "gold",
        },
        [196117] = {
            false,
            false,
            "mediumpurple",
        },
        [98970] = {
            false,
            false,
            "mediumslateblue",
        },
        [190207] = {
            true,
            false,
            "fuchsia",
        },
        [196263] = {
            false,
            false,
            "aqua",
        },
        [186284] = {
            false,
            false,
            "WARRIOR",
        },
        [135365] = {
            true,
            false,
            "fuchsia",
        },
        [131527] = {
            false,
            false,
            "mediumslateblue",
        },
        [130404] = {
            false,
            false,
            "cyan",
        },
        [220060] = {
            true,
            false,
            "fuchsia",
        },
        [220314] = {
            true,
            false,
            "fuchsia",
        },
        [210818] = {
            true,
            false,
            "fuchsia",
        },
        [198311] = {
            false,
            false,
            "mediumpurple",
        },
        [136470] = {
            true,
            false,
            "fuchsia",
        },
        [114796] = {
            false,
            false,
            "blue",
        },
        [180336] = {
            false,
            false,
            "aqua",
        },
        [115640] = {
            false,
            false,
            "fuchsia",
        },
        [168886] = {
            true,
            false,
            "fuchsia",
        },
        [218865] = {
            true,
            false,
            "fuchsia",
        },
        [134599] = {
            false,
            false,
            "gold",
        },
        [91000] = {
            true,
            false,
            "aqua",
        },
        [126919] = {
            true,
            false,
            "fuchsia",
        },
        [207468] = {
            true,
            false,
            "fuchsia",
        },
        [173190] = {
            false,
            false,
            "deepskyblue",
        },
        [134137] = {
            false,
            false,
            "deepskyblue",
        },
        [172981] = {
            false,
            false,
            "deepskyblue",
        },
        [130661] = {
            true,
            false,
            "fuchsia",
        },
        [134600] = {
            false,
            false,
            "peru",
        },
        [192786] = {
            false,
            false,
            "lime",
        },
        [190381] = {
            true,
            false,
            "fuchsia",
        },
        [132126] = {
            false,
            false,
            "magenta",
        },
        [199220] = {
            false,
            false,
            "white",
        },
        [174773] = {
            false,
            false,
            "magenta",
        },
        [218016] = {
            true,
            false,
            "fuchsia",
        },
        [144298] = {
            false,
            false,
            "mediumslateblue",
        },
        [115020] = {
            false,
            false,
            "mediumslateblue",
        },
        [91001] = {
            true,
            false,
            "aqua",
        },
        [75899] = {
            false,
            false,
            "fuchsia",
        },
        [204030] = {
            false,
            false,
            "WARRIOR",
        },
        [176565] = {
            false,
            false,
            "aqua",
        },
        [163503] = {
            true,
            false,
            "fuchsia",
        },
        [155824] = {
            false,
            false,
            "blue",
        },
        [177816] = {
            false,
            false,
            "deepskyblue",
        },
        [151476] = {
            true,
            false,
            "aqua",
        },
        [114542] = {
            false,
            false,
            "mediumslateblue",
        },
        [167536] = {
            false,
            false,
            "deepskyblue",
        },
        [122970] = {
            false,
            false,
            "lime",
        },
        [150143] = {
            false,
            false,
            "blue",
        },
        [133835] = {
            true,
            false,
            "fuchsia",
        },
        [199595] = {
            false,
            false,
            "magenta",
        },
        [156226] = {
            false,
            false,
            "deepskyblue",
        },
        [212389] = {
            true,
            false,
            "fuchsia",
        },
        [190128] = {
            false,
            false,
            "darksalmon",
        },
        [84989] = {
            true,
            false,
            "fuchsia",
        },
        [80816] = {
            false,
            false,
            "aqua",
        },
        [105715] = {
            true,
            false,
            "fuchsia",
        },
        [133836] = {
            true,
            false,
            "fuchsia",
        },
        [81407] = {
            false,
            false,
            "deepskyblue",
        },
        [129758] = {
            false,
            false,
            "fuchsia",
        },
        [175992] = {
            false,
            false,
            "fuchsia",
        },
        [167612] = {
            false,
            false,
            "aqua",
        },
        [122969] = {
            true,
            false,
            "fuchsia",
        },
        [214673] = {
            true,
            false,
            "fuchsia",
        },
        [190174] = {
            false,
            false,
            "fuchsia",
        },
        [166589] = {
            false,
            false,
            "deepskyblue",
        },
        [138187] = {
            true,
            false,
            "fuchsia",
        },
        [44404] = {
            true,
            false,
            "fuchsia",
        },
        [133436] = {
            false,
            false,
            "gold",
        },
        [129699] = {
            false,
            false,
            "magenta",
        },
        [84990] = {
            true,
            false,
            "fuchsia",
        },
        [162317] = {
            false,
            false,
            "deepskyblue",
        },
        [83025] = {
            false,
            false,
            "mediumslateblue",
        },
        [223562] = {
            true,
            false,
            "fuchsia",
        },
        [193457] = {
            true,
            false,
            "aqua",
        },
        [196116] = {
            false,
            false,
            "lime",
        },
        [214439] = {
            true,
            false,
            "fuchsia",
        },
        [114544] = {
            false,
            false,
            "deepskyblue",
        },
        [105704] = {
            true,
            false,
            "fuchsia",
        },
        [130012] = {
            false,
            false,
            "PALADIN",
        },
        [167963] = {
            true,
            false,
            "fuchsia",
        },
        [115486] = {
            false,
            false,
            "mediumslateblue",
        },
        [86526] = {
            false,
            false,
            "deepskyblue",
        },
        [127315] = {
            false,
            false,
            "magenta",
        },
        [136353] = {
            false,
            false,
            "royalblue",
        },
        [99192] = {
            false,
            false,
            "mediumslateblue",
        },
        [165824] = {
            true,
            false,
            "fuchsia",
        },
        [229537] = {
            true,
            false,
            "orange",
        },
        [137713] = {
            false,
            false,
            "paleturquoise",
        },
        [95834] = {
            true,
            false,
            "fuchsia",
        },
        [164510] = {
            false,
            false,
            "deepskyblue",
        },
        [179386] = {
            false,
            false,
            "deepskyblue",
        },
        [204206] = {
            true,
            false,
            "fuchsia",
        },
        [75652] = {
            false,
            false,
            "mediumslateblue",
        },
        [205152] = {
            true,
            false,
            "aqua",
        },
        [134629] = {
            false,
            false,
            "navajowhite",
        },
        [168384] = {
            false,
            false,
            "blue",
        },
        [98681] = {
            false,
            false,
            "blue",
        },
        [98696] = {
            false,
            false,
            "deepskyblue",
        },
        [185528] = {
            true,
            false,
            "fuchsia",
        },
        [189878] = {
            false,
            false,
            "magenta",
        },
        [134418] = {
            false,
            false,
            "deepskyblue",
        },
        [180091] = {
            false,
            false,
            "mediumpurple",
        },
        [208438] = {
            true,
            false,
            "aqua",
        },
        [176573] = {
            false,
            false,
            "fuchsia",
        },
        [65362] = {
            false,
            false,
            "WARRIOR",
        },
        [189227] = {
            false,
            false,
            "lime",
        },
        [185529] = {
            true,
            false,
            "fuchsia",
        },
        [175550] = {
            false,
            false,
            "fuchsia",
        },
        [77700] = {
            false,
            false,
            "aqua",
        },
        [230740] = {
            true,
            false,
            "aqua",
        },
        [206068] = {
            false,
            false,
            "deepskyblue",
        },
        [135241] = {
            true,
            false,
            "fuchsia",
        },
        [40943] = {
            true,
            false,
            "fuchsia",
        },
        [98810] = {
            false,
            false,
            "WARRIOR",
        },
        [164804] = {
            true,
            false,
            "aqua",
        },
        [166302] = {
            true,
            false,
            "fuchsia",
        },
        [91006] = {
            true,
            false,
            "fuchsia",
        },
        [95769] = {
            true,
            false,
            "fuchsia",
        },
        [114636] = {
            false,
            false,
            "deepskyblue",
        },
        [176575] = {
            false,
            false,
            "deepskyblue",
        },
        [81283] = {
            false,
            false,
            "aqua",
        },
        [195696] = {
            true,
            false,
            "magenta",
        },
        [126969] = {
            false,
            false,
            "magenta",
        },
        [164414] = {
            true,
            false,
            "fuchsia",
        },
        [59873] = {
            false,
            false,
            "mediumslateblue",
        },
        [167876] = {
            true,
            false,
            "magenta",
        },
        [114803] = {
            false,
            false,
            "deepskyblue",
        },
        [186226] = {
            true,
            false,
            "fuchsia",
        },
        [135007] = {
            false,
            false,
            "gold",
        },
        [213934] = {
            true,
            false,
            "aqua",
        },
        [155221] = {
            false,
            false,
            "deepskyblue",
        },
        [165137] = {
            true,
            false,
            "fuchsia",
        },
        [198326] = {
            false,
            false,
            "mediumpurple",
        },
        [169924] = {
            false,
            false,
            "mediumpurple",
        },
        [173189] = {
            false,
            false,
            "deepskyblue",
        },
        [171384] = {
            false,
            false,
            "blue",
        },
        [115642] = {
            false,
            false,
            "blue",
        },
        [97788] = {
            false,
            false,
            "WARRIOR",
        },
        [45919] = {
            true,
            false,
            "aqua",
        },
        [40825] = {
            false,
            false,
            "mediumslateblue",
        },
        [205366] = {
            false,
            false,
            "WARRIOR",
        },
        [120651] = {
            true,
            false,
            "darkorange",
        },
        [194745] = {
            false,
            false,
            "fuchsia",
        },
        [102788] = {
            true,
            false,
            "fuchsia",
        },
        [164552] = {
            true,
            false,
            "fuchsia",
        },
        [129517] = {
            false,
            false,
            "fuchsia",
        },
        [185534] = {
            false,
            false,
            "lime",
        },
        [186124] = {
            false,
            false,
            "deepskyblue",
        },
        [91008] = {
            false,
            false,
            "deepskyblue",
        },
        [174802] = {
            true,
            false,
            "fuchsia",
        },
        [230748] = {
            true,
            false,
            "fuchsia",
        },
        [192955] = {
            false,
            false,
            "fuchsia",
        },
        [191164] = {
            true,
            false,
            "fuchsia",
        },
        [213937] = {
            true,
            false,
            "aqua",
        },
        [169159] = {
            false,
            false,
            "gold",
        },
        [221979] = {
            true,
            false,
            "fuchsia",
        },
        [131009] = {
            false,
            false,
            "fuchsia",
        },
        [221102] = {
            true,
            false,
            "fuchsia",
        },
        [189886] = {
            false,
            false,
            "gold",
        },
        [133593] = {
            false,
            false,
            "honeydew",
        },
        [102962] = {
            false,
            false,
            "fuchsia",
        },
        [162763] = {
            false,
            false,
            "mediumslateblue",
        },
        [167113] = {
            false,
            false,
            "blue",
        },
        [113398] = {
            false,
            false,
            "mediumslateblue",
        },
        [164185] = {
            false,
            false,
            "deepskyblue",
        },
        [199749] = {
            true,
            false,
            "aqua",
        },
        [190342] = {
            true,
            false,
            "fuchsia",
        },
        [168393] = {
            false,
            false,
            "deepskyblue",
        },
        [184303] = {
            false,
            false,
            "lime",
        },
        [196200] = {
            false,
            false,
            "lime",
        },
        [185537] = {
            false,
            false,
            "blue",
        },
        [186246] = {
            true,
            false,
            "fuchsia",
        },
        [221760] = {
            true,
            false,
            "fuchsia",
        },
        [195399] = {
            false,
            false,
            "fuchsia",
        },
        [186229] = {
            true,
            false,
            "aqua",
        },
        [207438] = {
            false,
            false,
            "mediumpurple",
        },
        [212827] = {
            true,
            false,
            "fuchsia",
        },
        [173016] = {
            true,
            false,
            "fuchsia",
        },
        [113998] = {
            true,
            false,
            "aqua",
        },
        [188252] = {
            false,
            false,
            "mediumslateblue",
        },
        [168658] = {
            false,
            false,
            "deepskyblue",
        },
        [116549] = {
            false,
            false,
            "aqua",
        },
        [82590] = {
            false,
            false,
            "magenta",
        },
        [178630] = {
            false,
            false,
            "deepskyblue",
        },
        [133852] = {
            false,
            false,
            "blue",
        },
        [127106] = {
            false,
            false,
            "WARRIOR",
        },
        [134364] = {
            false,
            false,
            "honeydew",
        },
        [155090] = {
            false,
            false,
            "deepskyblue",
        },
        [83846] = {
            false,
            false,
            "mediumslateblue",
        },
        [190401] = {
            true,
            false,
            "aqua",
        },
        [196798] = {
            true,
            false,
            "fuchsia",
        },
        [96512] = {
            false,
            false,
            "mediumslateblue",
        },
        [96640] = {
            false,
            false,
            "lime",
        },
        [213942] = {
            true,
            false,
            "fuchsia",
        },
        [104274] = {
            false,
            false,
            "aqua",
        },
        [214350] = {
            true,
            false,
            "fuchsia",
        },
        [154758] = {
            false,
            false,
            "mediumslateblue",
        },
        [101549] = {
            false,
            false,
            "magenta",
        },
        [213217] = {
            true,
            false,
            "fuchsia",
        },
        [81212] = {
            false,
            false,
            "deepskyblue",
        },
        [228539] = {
            true,
            false,
            "fuchsia",
        },
        [212981] = {
            false,
            false,
            "WARRIOR",
        },
    },
    ["aura_show_magic"] = true,
    ["plater_resources_show"] = false,
    ["extra_icon_show_enrage_border"] = {
        0.61568629741669,
        0.18823531270027,
        0.21176472306252,
    },
    ["cast_statusbar_spark_half"] = true,
    ["aura_timer_text_size"] = 7,
    ["hook_data"] = {
        {
            ["OptionsValues"] = {
            },
            ["HooksTemp"] = {
            },
            ["Hooks"] = {
                ["Constructor"] =
                "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.ListOfNpcs = {\n        [61146] = \"mediumseagreen\", --monk statue npcID\n        [103822] = \"mediumseagreen\", --druid treant npcID        \n        [61056] = \"mediumseagreen\", --shaman earth ele npcID\n        [95072] = \"mediumseagreen\", --shaman earth ele npcID    \n    }\n    \n    \n    \nend\n\n\n\n\n",
                ["Nameplate Updated"] =
                "function (self, unitId, unitFrame, envTable)\n    \n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        --check if the npcID of this unit is in the npc list \n        if (envTable.ListOfNpcs [npcID]) then\n            Plater.SetNameplateColor (unitFrame, envTable.ListOfNpcs [npcID])\n            \n        else\n            --check if the name of ths unit is in the list\n            local unitName = UnitName (unitId .. \"target\")\n            if (envTable.ListOfNpcs [unitName]) then\n                Plater.SetNameplateColor (unitFrame, envTable.ListOfNpcs [unitName])\n                \n            else\n                --check if the name of the unit in lower case is in the npc list\n                unitName = string.lower (unitName)\n                if (envTable.ListOfNpcs [unitName]) then\n                    Plater.SetNameplateColor (unitFrame, envTable.ListOfNpcs [unitName])                \n                    \n                end\n            end\n        end\n        \n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            },
            ["Time"] = 1725571048,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                    ["Enabled"] = true,
                    ["party"] = true,
                },
                ["class"] = {
                },
                ["map_ids"] = {
                },
                ["role"] = {
                    ["Enabled"] = true,
                    ["TANK"] = true,
                },
                ["pvptalent"] = {
                },
                ["affix"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["spec"] = {
                },
            },
            ["url"] = "",
            ["Icon"] = 134400,
            ["Enabled"] = true,
            ["Revision"] = 300,
            ["semver"] = "",
            ["Author"] = "Kastfall-Azralon",
            ["Desc"] = "",
            ["Prio"] = 99,
            ["version"] = -1,
            ["PlaterCore"] = 1,
            ["Name"] = "Attacking Specific Unit",
            ["LastHookEdited"] = "",
            ["Options"] = {
            },
        },
        {
            ["OptionsValues"] = {
            },
            ["HooksTemp"] = {
            },
            ["Hooks"] = {
                ["Initialization"] =
                "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Burning Wound\"] = 50,\n        [\"Rend\"] = 50,\n        [\"Colossus Smash\"] = 50,\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 40,\n        [\"Devouring Plague\"] = 30,\n        [\"Agony\"] = 50,\n        [\"Corruption\"] = 40,\n        [\"Unstable Affliction\"] = 30,\n        [\"Siphon Life\"] = 20,\n        [\"Shadow Embrace\"] = 10,\n        [\"Moonfire\"] = 40,\n        [\"Sunfire\"] = 50,\n        [\"Stellar Flare\"] = 30\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            },
            ["Time"] = 1703514904,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                },
                ["class"] = {
                },
                ["map_ids"] = {
                },
                ["role"] = {
                },
                ["pvptalent"] = {
                },
                ["affix"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["spec"] = {
                },
            },
            ["url"] = "",
            ["Icon"] = 134400,
            ["Enabled"] = true,
            ["Revision"] = 388,
            ["semver"] = "",
            ["Author"] = "Ditador-Azralon",
            ["Desc"] = "",
            ["Prio"] = 99,
            ["version"] = -1,
            ["PlaterCore"] = 1,
            ["Name"] = "Aura Reorder",
            ["LastHookEdited"] = "Initialization",
            ["Options"] = {
            },
        },
        {
            ["OptionsValues"] = {
                ["Descanchor"] = 4,
                ["BSborderth"] = 1,
                ["BStimer_size"] = 10,
                ["BSdesc_size"] = 8,
                ["Descyoff"] = -1,
            },
            ["HooksTemp"] = {
            },
            ["Hooks"] = {
                ["Nameplate Created"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    \n    unitFrame.ExtraIconFrame:SetOption (\"text_size\", modTable.config.BStimer_size)\n    unitFrame.ExtraIconFrame:SetOption (\"text_color\", modTable.config.BStimer_color)\n    unitFrame.ExtraIconFrame:SetOption (\"desc_text_size\", modTable.config.BSdesc_size)\n    unitFrame.ExtraIconFrame:SetOption (\"stack_text_size\", modTable.config.BSstack_size)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                ["Nameplate Updated"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.auramodifier ()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                ["Constructor"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.auramodifier = function()\n        \n        if modTable.config.BShidefriendl and unitFrame.actorType == \"friendlyplayer\" then\n            unitFrame.ExtraIconFrame:Hide()\n        end      \n        \n        for index, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n            if (auraIcon:IsShown()) then\n                \n                local profile = Plater.db.profile\n                local Anchor = {\n                    side = modTable.config.Descanchor, \n                    x = modTable.config.Descxoff, \n                    y = modTable.config.Descyoff,\n                }              \n                local size = modTable.config.BSborderth\n                \n                if (not auraIcon.PixelPerfectBorder) then\n                    auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n                end\n                \n                local r, g, b = auraIcon:GetBackdropBorderColor()\n                auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n                auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n                auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n                auraIcon.PixelPerfectBorder:UpdateSizes()\n                \n                auraIcon.Texture:SetSize(profile.extra_icon_width - size/2, profile.extra_icon_height - size/2)\n                auraIcon.Texture:ClearAllPoints()\n                auraIcon.Texture:SetAllPoints()\n                auraIcon.Border:Hide() \n                \n                Plater.SetFontOutlineAndShadow (auraIcon.CountdownText, profile.aura_timer_text_outline, profile.aura_timer_text_shadow_color, profile.aura_timer_text_shadow_color_offset[1], profile.aura_timer_text_shadow_color_offset[2])\n                \n                Plater.SetAnchor (auraIcon.Desc, Anchor)\n                auraIcon.Cooldown:SetEdgeTexture (profile.aura_cooldown_edge_texture)\n                auraIcon.Cooldown:SetDrawSwipe (true) \n                if modTable.config.BScdreverse then\n                    auraIcon.Cooldown:SetReverse (profile.aura_cooldown_reverse)\n                end\n                \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            },
            ["Time"] = 1703515022,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                },
                ["class"] = {
                },
                ["map_ids"] = {
                },
                ["role"] = {
                },
                ["pvptalent"] = {
                },
                ["affix"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["spec"] = {
                },
            },
            ["url"] = "",
            ["Icon"] = 134400,
            ["Enabled"] = true,
            ["Revision"] = 462,
            ["semver"] = "",
            ["Author"] = "Driani-Antonidas",
            ["Desc"] = "",
            ["Prio"] = 99,
            ["version"] = -1,
            ["PlaterCore"] = 1,
            ["Name"] = "Buff Special",
            ["LastHookEdited"] = "Nameplate Created",
            ["Options"] = {
                {
                    ["Type"] = 5,
                    ["Key"] = "",
                    ["Value"] = "Basic Options",
                    ["Name"] = "Basic Options",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "BShidefriendly",
                    ["Value"] = true,
                    ["Name"] = "Hide Buff Special at Friendly UnitFrame",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Hide Buff Special at Friendly UnitFrame",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "BScdreverse",
                    ["Value"] = true,
                    ["Name"] = "Swipe Closure Inverted",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "If enabled, swipe closure inverted",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 100,
                    ["Desc"] = "Set Buff Special border thickness",
                    ["Min"] = 0,
                    ["Key"] = "BSborderth",
                    ["Value"] = 2,
                    ["Name"] = "Border Thickness",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "",
                    ["Value"] = 0,
                    ["Name"] = "Blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "",
                    ["Value"] = "Buff Special Text Options",
                    ["Name"] = "Buff Special Text Options",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 100,
                    ["Desc"] = "Set timer text size",
                    ["Min"] = 1,
                    ["Key"] = "BStimer_size",
                    ["Value"] = 14,
                    ["Name"] = "Timer Text Size",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "BStimer_color",
                    ["Value"] = {
                        1,
                        1,
                        0,
                        1,
                    },
                    ["Name"] = "Timer Text Color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Set timer text color",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 100,
                    ["Desc"] = "Set stack text size",
                    ["Min"] = 1,
                    ["Key"] = "BSstack_size",
                    ["Value"] = 10,
                    ["Name"] = "Stack Text Size",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "",
                    ["Value"] = 0,
                    ["Name"] = "Blank",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "",
                    ["Value"] = "Buff Special Player Name Options",
                    ["Name"] = "Buff Special Player Name Options",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 100,
                    ["Desc"] = "Set player name text size",
                    ["Min"] = 1,
                    ["Key"] = "BSdesc_size",
                    ["Value"] = 10,
                    ["Name"] = "Player Name Text Size",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 8,
                    ["Desc"] =
                    "1(TOP-LEFT) / 2(LEFT) / 3(BOT-LEFT) / 4(BOT) / 5(BOT-RIGHT) / 6(RIGHT) / 7(TOP-RIGHT) / 8(TOP)",
                    ["Min"] = 1,
                    ["Key"] = "Descanchor",
                    ["Value"] = 4,
                    ["Name"] = "Player Name Text Anchor",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 100,
                    ["Desc"] = "Set player name text y-offset",
                    ["Min"] = -100,
                    ["Key"] = "Descyoff",
                    ["Value"] = -2,
                    ["Name"] = "Player Name Text Y-offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 100,
                    ["Desc"] = "Set player name text x-offset",
                    ["Min"] = -100,
                    ["Key"] = "Descxoff",
                    ["Value"] = 0,
                    ["Name"] = "Player Name Text X-offset",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = false,
                },
            },
        },
        {
            ["OptionsValues"] = {
            },
            ["HooksTemp"] = {
            },
            ["Hooks"] = {
                ["Cast Start"] =
                "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
                ["Destructor"] =
                "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
                ["Cast Update"] =
                "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
                ["Constructor"] =
                "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 0.6\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --create the border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.CastBarBorder:SetIgnoreParentScale(false)\n        \n    end    \n    \n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \nend\n\n\n\n\n",
            },
            ["Time"] = 1724846411,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                },
                ["class"] = {
                },
                ["map_ids"] = {
                },
                ["role"] = {
                },
                ["pvptalent"] = {
                },
                ["affix"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["spec"] = {
                },
            },
            ["url"] = "",
            ["Icon"] = 134400,
            ["Enabled"] = false,
            ["Revision"] = 176,
            ["semver"] = "",
            ["Author"] = "Izimode-Azralon",
            ["Desc"] = "",
            ["Prio"] = 99,
            ["version"] = -1,
            ["PlaterCore"] = 1,
            ["Name"] = "Cast Border",
            ["LastHookEdited"] = "",
            ["Options"] = {
            },
        },
        {
            ["OptionsValues"] = {
            },
            ["HooksTemp"] = {
            },
            ["Hooks"] = {
                ["Nameplate Updated"] =
                "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = .5 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
            },
            ["Time"] = 1703521954,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                },
                ["class"] = {
                },
                ["map_ids"] = {
                },
                ["role"] = {
                },
                ["pvptalent"] = {
                },
                ["affix"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["spec"] = {
                },
            },
            ["url"] = "",
            ["Icon"] = 134400,
            ["Enabled"] = true,
            ["Revision"] = 183,
            ["semver"] = "",
            ["Author"] = "????????-Illidan",
            ["Desc"] = "",
            ["Prio"] = 31,
            ["version"] = -1,
            ["PlaterCore"] = 1,
            ["Name"] = "Debuff Border",
            ["LastHookEdited"] = "",
            ["Options"] = {
            },
        },
        {
            ["OptionsValues"] = {
            },
            ["HooksTemp"] = {
            },
            ["UID"] = "0x60f358aaaef576",
            ["Hooks"] = {
                ["Constructor"] =
                "function(self, unitId, unitFrame, envTable, modTable)\n    local DF = _G ['DetailsFramework']\n    envTable.dbColor={}\n    for npcID, infoTable in pairs (Plater.db.profile.npc_colors) do\n        local enabled1 = infoTable[1] --this is the overall enabled\n        local enabled2 = infoTable[2] --if this is true, this color is only used for scripts\n        local colorID = infoTable[3] --the color\n        if (enabled1 and not enabled2) then\n            local r, g, b = DF:ParseColors (colorID)\n            envTable.dbColor[npcID] = {r, g, b, 1}\n        end\n    end\n    if Plater.PlayerClass == 'DEMONHUNTER' then\n        envTable.debuffID = 346278\n    elseif Plater.PlayerClass == 'ROGUE' then\n        envTable.debuffID = 324073\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                ["Nameplate Updated"] =
                "function(self, unitId, unitFrame, envTable, modTable)\n    if Plater.NameplateHasAura(unitFrame, envTable.debuffID) then\n        Plater.SetNameplateColor(unitFrame, 'deeppink')\n    else\n        local npcId = unitFrame['namePlateNpcId']\n        local npcColor = envTable.dbColor[npcId]\n        if npcColor then\n            Plater.SetNameplateColor(unitFrame, npcColor)\n        else\n            Plater.RefreshNameplateColor(unitFrame)\n        end\n    end\nend",
            },
            ["Time"] = 1703521950,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                    ["Enabled"] = true,
                    ["party"] = true,
                    ["scenario"] = true,
                    ["raid"] = true,
                    ["none"] = true,
                },
                ["class"] = {
                    ["Enabled"] = true,
                    ["DEMONHUNTER"] = true,
                    ["ROGUE"] = true,
                },
                ["map_ids"] = {
                },
                ["role"] = {
                },
                ["pvptalent"] = {
                },
                ["affix"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["spec"] = {
                },
            },
            ["url"] = "",
            ["Icon"] = 134400,
            ["Enabled"] = true,
            ["Revision"] = 243,
            ["semver"] = "",
            ["Author"] = "Avayde-Illidan",
            ["Desc"] = "",
            ["Prio"] = 30,
            ["version"] = -1,
            ["PlaterCore"] = 1,
            ["LastHookEdited"] = "",
            ["Options"] = {
            },
            ["Name"] = "Debuff Color",
        },
        {
            ["OptionsValues"] = {
            },
            ["HooksTemp"] = {
            },
            ["Hooks"] = {
                ["Nameplate Updated"] =
                "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
                ["Nameplate Added"] =
                "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
                ["Constructor"] =
                "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --Disable in PVP\n        if (UnitPlayerControlled(unitFrame.unit))\n        then \n            return     \n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n",
            },
            ["Time"] = 1740197195,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                },
                ["class"] = {
                },
                ["map_ids"] = {
                },
                ["role"] = {
                },
                ["pvptalent"] = {
                },
                ["affix"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["spec"] = {
                },
            },
            ["url"] = "",
            ["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
            ["Enabled"] = true,
            ["Revision"] = 50,
            ["semver"] = "",
            ["Author"] = "Kastfall-Azralon",
            ["Desc"] =
            "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
            ["Prio"] = 99,
            ["version"] = -1,
            ["PlaterCore"] = 1,
            ["Name"] = "Force Threat Color",
            ["LastHookEdited"] = "Constructor",
            ["Options"] = {
            },
        },
        {
            ["OptionsValues"] = {
            },
            ["HooksTemp"] = {
            },
            ["Hooks"] = {
                ["Constructor"] =
                "function (self, unitId, unitFrame, envTable)\n    \n    --colors for each time bracket\n    envTable.Colors = {\n        critical = \"red\",\n        okay = \"white\",\n    }\n    \n    --time amount to enter in warning or critical state\n    envTable.Timers = {\n        critical = 2.9,\n    }\n    \nend\n\n\n",
                ["Nameplate Updated"] =
                "function (self, unitId, unitFrame, envTable)\n    \n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsVisible()) then\n                if (auraIcon.RemainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)\n                end \n            end\n            \n        end\n    end\n    \n    \n    for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        if auraIcon:IsShown() then\n            if (auraIcon:IsVisible()) then\n                local remainingTime = (auraIcon.startTime + auraIcon.duration - GetTime())\n                if (remainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.okay)\n                end\n            end\n        end\n    end\n    \nend\n\n\n",
            },
            ["Time"] = 1689714040,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                },
                ["class"] = {
                },
                ["map_ids"] = {
                },
                ["role"] = {
                },
                ["pvptalent"] = {
                },
                ["affix"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["spec"] = {
                },
            },
            ["url"] = "",
            ["Icon"] = 134400,
            ["Enabled"] = true,
            ["Revision"] = 78,
            ["semver"] = "",
            ["Author"] = "Ditador-Azralon",
            ["Desc"] = "",
            ["Prio"] = 51,
            ["version"] = -1,
            ["PlaterCore"] = 1,
            ["Name"] = "Timer Text Color",
            ["LastHookEdited"] = "",
            ["Options"] = {
            },
        },
        {
            ["OptionsValues"] = {
            },
            ["HooksTemp"] = {
            },
            ["Hooks"] = {
                ["Destructor"] =
                "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.healthBar.TargetBorder) then\n        unitFrame.healthBar.TargetBorder:Hide()\n    end\nend",
                ["Nameplate Added"] =
                "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame)\nend\n\n\n",
                ["Target Changed"] =
                "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame)\nend\n\n\n",
                ["Constructor"] =
                "function (self, unitId, unitFrame, envTable)\n    \n    --border options\n    local borderSize = 2\n    local borderColor = \"white\"\n    \n    if (not unitFrame.healthBar.TargetBorder) then\n        unitFrame.healthBar.TargetBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n    end\n    \n    function envTable.UpdateBorder (unitFrame)\n        if (UnitIsUnit (\"target\", unitFrame.unit)) then               \n            local r, g, b, a = DetailsFramework:ParseColors (borderColor)\n            unitFrame.healthBar.TargetBorder:SetVertexColor (r, g, b, a)\n            \n            unitFrame.healthBar.TargetBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n            unitFrame.healthBar.TargetBorder:UpdateSizes()            \n            \n            unitFrame.healthBar.TargetBorder:Show()\n        else\n            unitFrame.healthBar.TargetBorder:Hide()\n        end\n    end\nend",
            },
            ["Time"] = 1739411702,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                },
                ["class"] = {
                },
                ["map_ids"] = {
                },
                ["role"] = {
                },
                ["pvptalent"] = {
                },
                ["affix"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["spec"] = {
                },
            },
            ["url"] = "https://wago.io/targetborder/1",
            ["Icon"] = "Interface\\CHATFRAME\\UI-ChatInputBorder",
            ["Enabled"] = true,
            ["Revision"] = 83,
            ["semver"] = "1.0.0",
            ["Author"] = "Izimode-Azralon",
            ["Desc"] = "Add a border around the current target.",
            ["Prio"] = 99,
            ["version"] = 1,
            ["PlaterCore"] = 1,
            ["Name"] = "Target Border",
            ["LastHookEdited"] = "",
            ["Options"] = {
            },
        },
        {
            ["OptionsValues"] = {
            },
            ["HooksTemp"] = {
            },
            ["Hooks"] = {
                ["Player Logon"] =
                "function()\n    -- /RELOAD AFTER IMPORTING OR CHANGING THE SCRIPT\n    -- SELECT THE INDICATOR AT THE TARGET TAB\n    \n    Plater.TargetIndicators    [\"Thin Arrow\"] = {\n        path = [[Interface\\AddOns\\Plater\\media\\arrow_thin_right_64]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 15,\n        height = 12,\n        x = 14,\n        y = 0,\n        blend = \"ADD\",\n        color =  {0.36, 0.73, 1, 0.9},\n    }    \n    \nend",
            },
            ["Time"] = 1725571049,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                },
                ["class"] = {
                },
                ["map_ids"] = {
                },
                ["role"] = {
                },
                ["pvptalent"] = {
                },
                ["affix"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["spec"] = {
                },
            },
            ["url"] = "https://wago.io/4rFUVdRiH/1",
            ["Icon"] = "Interface\\AddOns\\Plater\\media\\arrow_thin_right_64",
            ["Enabled"] = true,
            ["Revision"] = 62,
            ["semver"] = "1.0.0",
            ["Author"] = "Xitobel-Saurfang",
            ["Desc"] = "Adds a single thin arrow to target indicator options.",
            ["Prio"] = 99,
            ["version"] = 1,
            ["PlaterCore"] = 1,
            ["Name"] = "Arrow Thin Target",
            ["LastHookEdited"] = "",
            ["Options"] = {
            },
        },
        {
            ["OptionsValues"] = {
            },
            ["HooksTemp"] = {
            },
            ["Hooks"] = {
                ["Nameplate Created"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    --ensure reload updates existing\n    modTable.updateExisting(unitFrame)\nend\n\n\n",
                ["Initialization"] =
                "function (modTable)\n    \n    \n    -- settings:\n    local formatAuraTimers = modTable.config.formatAuraTimers\n    local formatBuffSpecialTimers = modTable.config.formatBuffSpecialTimers\n    \n    \n    -- time formatting function: (can be adjusted)\n    Plater.FormatTimeNew = function (s)\n        if s < 10 then\n            return (\"%.1f\"):format(s)\n        elseif s < 60 then\n            return (\"%d\"):format(s)\n        elseif s < 3600 then\n            return (\"%d:%02d\"):format(s/60%60, s%60)\n        elseif s < 86400 then\n            return (\"%dh %02dm\"):format(s/(3600), s/60%60)\n        else\n            return (\"%dd %02dh\"):format(s/86400, (s /3600) - (floor(s/86400) * 24))\n        end\n    end\n    Plater.FormatTimeOrig = Plater.FormatTimeOrig or Plater.FormatTime\n    \n    local DF = _G[\"DetailsFramework\"]\n    local IconRowFunctions = DF.IconRowFunctions or DF.IconMixin\n    IconRowFunctions.FormatCooldownTimeOrig = IconRowFunctions.FormatCooldownTimeOrig or IconRowFunctions.FormatCooldownTime\n    \n    \n    -- exchange formatting:\n    function modTable.hookTimeFormat()\n        if formatAuraTimers then\n            Plater.FormatTime = Plater.FormatTimeNew\n        else\n            Plater.FormatTime = Plater.FormatTimeOrig\n        end\n        \n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                IconRowFunctions.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n        else\n            -- no buff special\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            end\n        end\n    end\n    \n    function modTable.updateExisting(unitFrame)\n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        else\n            \n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeOrig (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        end\n        \n    end\n    \n    \n    modTable.hookTimeFormat()\n    for _, plateFrame in ipairs (Plater.GetAllShownPlates()) do\n        modTable.updateExisting(plateFrame.unitFrame)\n    end\n    \nend",
                ["Player Logon"] =
                "function(modTable)\n    modTable.hookTimeFormat()\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            },
            ["Time"] = 1724683151,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                },
                ["class"] = {
                },
                ["map_ids"] = {
                },
                ["role"] = {
                },
                ["pvptalent"] = {
                },
                ["affix"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["spec"] = {
                },
            },
            ["url"] = "https://wago.io/mULsbUUxJ/13",
            ["Icon"] = "INTERFACE\\ICONS\\Ability_BossMagistrix_TimeWarp2",
            ["Enabled"] = true,
            ["Revision"] = 196,
            ["semver"] = "1.0.12",
            ["Author"] = "Viash-Thrall",
            ["Desc"] = "Overwrites the Plater time formatting to show second fractions.",
            ["Prio"] = 99,
            ["version"] = 13,
            ["PlaterCore"] = 1,
            ["Name"] = "Detailed Time Format",
            ["LastHookEdited"] = "",
            ["Options"] = {
                {
                    ["Type"] = 4,
                    ["Key"] = "formatAuraTimers",
                    ["Value"] = true,
                    ["Name"] = "Format Aura Timers",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "formatBuffSpecialTimers",
                    ["Value"] = true,
                    ["Name"] = "Format Buff Special Timers",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "",
                },
            },
        },
        {
            ["OptionsValues"] = {
                ["lowScale"] = 0.8999999761581421,
                ["midScale"] = 1,
            },
            ["LastHookEdited"] = "Leave Combat",
            ["UID"] = "0x6366dbeb1fda6285",
            ["Hooks"] = {
                ["Leave Combat"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    local npcID = select(6, strsplit(\"-\", UnitGUID(unitId)))\n    if npcID then\n        local prio = modTable[\"npcIDs\"][npcID]\n        if prio then\n            local scale = modTable.config.scale\n            local midScale = modTable.config.midScale\n            local lowScale = modTable.config.lowScale\n            local color = modTable.config.color\n            local midColor = modTable.config.midColor\n            local lowColor = modTable.config.lowColor\n            if prio == 1 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, midScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, midColor)\n                end\n            elseif prio == 2 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, lowScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, lowColor)\n                end\n            end    \n        end\n    end\nend",
                ["Nameplate Added"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    local npcID = select(6, strsplit(\"-\", UnitGUID(unitId)))\n    if npcID then\n        local prio = modTable[\"npcIDs\"][npcID]\n        if prio then\n            local scale = modTable.config.scale\n            local midScale = modTable.config.midScale\n            local lowScale = modTable.config.lowScale\n            local color = modTable.config.color\n            local midColor = modTable.config.midColor\n            local lowColor = modTable.config.lowColor\n            if prio == 1 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, midScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, midColor)\n                end\n            elseif prio == 2 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, lowScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, lowColor)\n                end\n            end    \n        end\n    end\nend",
                ["Initialization"] =
                "function (modTable)\n    \n    -- 1 = mid prio, 2 = low prio\n    \n    modTable[\"npcIDs\"] = {\n        --affixes\n        [\"229296\"] = 2, --orbs\n        \n        --Siege of Boralus\n        [\"138002\"] = 2, -- Gutter\n        [\"133990\"] = 2, -- Gutter\n        [\"129374\"] = 1, --Enforcer\n        [\"129372\"] = 1, --Bomber\n        [\"129369\"] = 1, -- Raider\n        [\"129371\"] = 2, -- Shredder\n        [\"129928\"] = 1, -- Powdershot\n        [\"129879\"] = 2, -- Cleaver\n        [\"129989\"] = 1, -- Powdershot\n        [\"129996\"] = 2, -- Cleaver\n        [\"135258\"] = 2, --Curseblade\n        [\"137521\"] = 1, --Powdershot\n        [\"138247\"] = 2, --Curseblade\n        [\"138254\"] = 1, --Powdershot\n        [\"138464\"] = 2, --Deckhand\n        [\"136483\"] = 2, --Deckhand\n        [\"136483\"] = 1, --Deckhand\n        [\"129366\"] = 2, --Buccaneer\n        [\"129366\"] = 2, --Buccaneer\n        --[\"135241\"] = 1, --Pillager\n        [\"137511\"] = 2, --Buccaneer\n        [\"128967\"] = 1, --Sniper\n        [\"137517\"] = 2, --Destroyer\n        [\"137516\"] = 1, --Invader\n        [\"137405\"] = 1, --Gripping Terror\n        \n        --Necrotic Wake\n        [\"164702\"] = 2, --Carrion Worm\n        [\"162729\"] = 2, --Soldier\n        [\"165138\"] = 2, --Blight bag\n        [\"163121\"] = 1, --Vanguard\n        [\"163122\"] = 2, --Warrior\n        [\"165222\"] = 1, --Bonemender\n        [\"163619\"] = 1, --Bonecarver\n        [\"165197\"] = 2, --Gripping Terror\n        [\"171500\"] = 2, --Corpse\n        [\"166079\"] = 1, --Crossbowman\n        [\"164427\"] = 2, --Warrior (boss)\n        --[\"164414\"] = 1, --Mage (boss)\n        [\"168246\"] = 1, --Crossbowman (boss)\n        [\"166264\"] = 2, --Spare Parts\n        [\"166266\"] = 2, --Spare Parts\n        [\"165911\"] = 1, --Creation\n        [\"172981\"] = 1, --Stitchwerk\n        [\"167731\"] = 1, --Seperation Assistant\n        [\"164578\"] = 1, --Creation (boss)\n        [\"163622\"] = 2, --Bits\n        [\"163623\"] = 2, --Leftovers\n        \n        --City of Threads\n        [\"220193\"] = 2, --Venomblade\n        [\"220199\"] = 2, --Scarab\n        [\"220197\"] = 1, --Royal Swarmguard\n        [\"220003\"] = 1, --Eye\n        [\"223182\"] = 2, --Marauder\n        [\"224731\"] = 2, --Marauder\n        [\"223181\"] = 1, --Pursuer\n        [\"228361\"] = 1, --Pursuer\n        [\"223357\"] = 2, --Conscript\n        [\"216342\"] = 2, --Unnaturaler\n        [\"216328\"] = 1, --Test Subject\n        [\"216329\"] = 2, --Droplet\n        [\"219198\"] = 1, --Scarab\n        \n        --Ara-Kara\n        [\"216336\"] = 2, --Starved Crawler\n        [\"216341\"] = 2, --Jabbing Flyer\n        [\"214840\"] = 1, --Engorged Crawler\n        [\"216337\"] = 2, --Bloodworker\n        [\"216333\"] = 2, --Assistant\n        [\"216338\"] = 1, --Bloodguard\n        [\"216363\"] = 2, --Drone\n        [\"218325\"] = 2, --Swarming Flyer\n        [\"216365\"] = 1, --Carrier\n        [\"217039\"] = 1, --Hauler\n        \n        --Grim Batol\n        [\"224152\"] = 2, --Brute\n        [\"224609\"] = 1, --Destroyer\n        [\"224221\"] = 1, --Overseer\n        [\"40166\"] = 1, --Giant\n        [\"224240\"] = 1, --Flamerender\n        [\"224276\"] = 2, --Enforcer\n        [\"224249\"] = 1, --Lavabender\n        [\"40357\"] = 1, --Shadowflame (boss)\n        [\"224853\"] = 2, --Hatchling\n        [\"39388\"] = 1, --Hatchling (boss)\n        \n        --Dawnbreaker\n        [\"213894\"] = 2, --Curseblade\n        [\"228538\"] = 2, --Curseblade\n        [\"223995\"] = 2, --Curseblade\n        [\"214761\"] = 1, --Ritualist\n        [\"213932\"] = 2, --Militant\n        [\"213934\"] = 2, --Tactician\n        [\"213895\"] = 2, --Shadowalker\n        [\"228537\"] = 2, --Shadowalker\n        [\"225606\"] = 2, --Shadowalker\n        [\"211262\"] = 1, --Ixkreten\n        [\"211263\"] = 1, --Ikentak\n        [\"211261\"] = 1, --Viscoxria\n        [\"211341\"] = 1, --Manifested Shadow\n        [\"213885\"] = 1, --Architect\n        [\"224616\"] = 2, --Animated Shadow\n        [\"213905\"] = 2, --Animated Darkness\n        \n        --Stonevault\n        [\"210109\"] = 1, --Golem\n        [\"212389\"] = 1, --Invader\n        [\"214264\"] = 2, --Honor Guard\n        --[\"212765\"] = 1, --Despoiler\n        [\"212764\"] = 2, --Engine Speaker\n        [\"212405\"] = 2, --Forgehand\n        --[\"214350\"] = 1, --Turned Speaker\n        [\"212400\"] = 2, --Elemental\n        [\"213954\"] = 1, --Smasher\n        --[\"214066\"] = 1, --Stoneshaper\n        [\"222923\"] = 2, --Loaderbot\n        [\"213343\"] = 1, --Forge Loader\n        \n        --Mists\n        [\"165111\"] = 2, --Spiteclaw\n        [\"164929\"] = 1, --Villager\n        [\"164920\"] = 2, --Soulcleaver\n        [\"164926\"] = 1, --Boughbreaker\n        [\"166276\"] = 2, --Guardian\n        [\"163058\"] = 1, --Defender\n        [\"166301\"] = 2, --Stalker\n        [\"166304\"] = 1, --Mistveil Stinger\n        [\"167113\"] = 2, --Acidgullet\n        [\"167117\"] = 2, --Larva\n        [\"167116\"] = 2, --Reaver\n        [\"172312\"] = 1, --Gorger\n        [\"216329\"] = 2, --Droplet\n        [\"216329\"] = 2, --Droplet\n        \n        --Operation: Floodgate\n        [\"228144\"] = 2, -- Darkfuse Soldier\n        [\"229252\"] = 1, -- Darkfuse Hyena\n        [\"229250\"] = 2, -- Venture Co. Contractor\n        [\"228424\"] = 1, -- Darkfuse Mechadrone\n        [\"231014\"] = 2, -- Loaderbot\n        [\"229251\"] = 1, -- Venture Co. Architect\n        [\"231497\"] = 2, -- Bombshell Crab\n        [\"230740\"] = 1, -- Shreddinator 300\n        [\"232228\"] = 2, -- Waterworks Bottomfeeder\n        [\"231385\"] = 2, -- Darkfuse Inspector\n        [\"231325\"] = 2, -- Darkfuse Jumpstarter\n        [\"229069\"] = 2, -- Mechadrone Sniper\n        [\"227145\"] = 2, -- Waterworks Crocolisk\n        \n        --Priory of the Sacred Flame\n        [\"206705\"] = 2, -- Arathi Footman\n        [\"206694\"] = 1, -- Fervent Sharpshooter\n        [\"206696\"] = 1, -- Arathi Knight\n        [\"206710\"] = 1, -- Lightspawn\n        [\"206699\"] = 2, -- War Lynx\n        [\"207949\"] = 2, -- Zealous Templar\n        [\"212838\"] = 2, -- Arathi Neophyte\n        [\"206704\"] = 1, -- Ardent Paladin\n        [\"212835\"] = 2, -- Risen Footman\n        [\"217658\"] = 1, -- Sir Braunpyke\n        [\"211140\"] = 1, -- Arathi Neophyte\n        \n        --Cinderbrew\n        [\"214668\"] = 2, -- Venture Co. Patron\n        [\"217126\"] = 2, -- Over-Indulged Patron\n        [\"214920\"] = 2, -- Tasting Room Attendant\n        [\"214697\"] = 1, -- Chef Chewie\n        [\"210269\"] = 1, -- Hired Muscle\n        [\"223423\"] = 1, -- Careless Hopgoblin\n        [\"210270\"] = 2, -- Brew Drop\n        [\"219301\"] = 2, -- Brew Drop Boss\n        [\"219588\"] = 1, -- Yes Man\n        [\"210265\"] = 2, -- Worker Bee\n        [\"220946\"] = 1, -- Venture Co. Honey Harvester\n        [\"218865\"] = 2, -- Bee-let\n        [\"218016\"] = 1, -- Ravenous Cinderbee\n        \n        --Darkflame Cleft\n        [\"220616\"] = 2, -- Corridor Sleeper\n        [\"210810\"] = 2, -- Menial Laborer\n        [\"211121\"] = 1, -- Rank Overseer\n        [\"211977\"] = 2, -- Pack Mole\n        [\"208457\"] = 2, -- Skittering Darkness\n        [\"210539\"] = 2, -- Corridor Creeper\n        [\"210148\"] = 2, -- Menial Laborer Boss\n        [\"208450\"] = 1, -- Wandering Candle\n        [\"212383\"] = 2, -- Kobold Taskworker\n        [\"213008\"] = 1, -- Wriggling Darkspawn\n        [\"212411\"] = 1, -- Torchsnarl\n        \n        --Rookery\n        [\"207197\"] = 2, -- Cursed Rookguard\n        [\"212786\"] = 1, -- Voidrider\n        [\"209801\"] = 1, -- Quartermaster Koratite\n        [\"219066\"] = 2, -- Afflicted Civilian\n        [\"214419\"] = 1, -- Void-Cursed Crusher\n        [\"214421\"] = 1, -- Coalescing Void Diffuser\n        [\"212739\"] = 2, -- Radiating Voidstone\n        \n        --Motherlode\n        [\"137713\"] = 2, -- Big Money Crab\n        [\"130436\"] = 2, -- Off-Duty Laborer\n        [\"130488\"] = 2, -- Mech Jockey\n        [\"130485\"] = 1, -- Mechanized Peacekeeper\n        [\"130435\"] = 1, -- Addled Thug\n        [\"130653\"] = 2, -- Wanton Sapper\n        [\"136643\"] = 1, -- Azerite Extractor\n        [\"130437\"] = 2, -- Mine Rat\n        [\"134005\"] = 2, -- Shalebiter\n        [\"134012\"] = 1, -- Taskmaster Askari\n        [\"133963\"] = 2, -- Test Subject\n        [\"133430\"] = 1, -- Venture Co. Mastermind\n        [\"136934\"] = 1, -- Weapons Tester\n        [\"137940\"] = 2, -- Safety Shark\n        [\"133482\"] = 2, -- Crawler Mine\n        [\"137029\"] = 1, -- Ordnance Specialist\n        [\"132056\"] = 1, -- Venture Co. Skyscorcher\n        [\"136005\"] = 2, -- Rowdy Reveler\n        [\"136006\"] = 2, -- Rowdy Reveler\n        \n        --Theater of Pain\n        [\"170838\"] = 2, -- Unyielding Contender\n        [\"170850\"] = 1, -- Raging Bloodhorn\n        [\"164463\"] = 1, -- Paceran the Virulent\n        [\"164451\"] = 1, -- Dessia the Decapitator\n        [\"166524\"] = 1, -- Deathwalker\n        [\"169927\"] = 1, -- Putrid Butcher\n        [\"163089\"] = 2, -- Disgusting Refuse\n        [\"170690\"] = 1, -- Diseased Horror\n        [\"165260\"] = 1, -- Oozing Leftovers\n        [\"167998\"] = 1, -- Portal Guardian\n        [\"162763\"] = 1, -- Soulforged Bonereaver\n        [\"167994\"] = 2, -- Ossified Conscript\n        [\"164510\"] = 1, -- Shambling Arbalest\n        \n        --OP: Mechagon\n        [\"151658\"] = 1, -- Strider Tonk\n        --[\"151657\"] = 1, -- Bomb Tonk\n        [\"151659\"] = 2, -- Rocket Tonk\n        [\"144301\"] = 2, -- Living Waste\n        [\"144293\"] = 1, -- Waste Processing Unit\n        [\"151773\"] = 2, -- Junkyard D.0.G.\n        [\"144303\"] = 2, -- G.U.A.R.D.\n        [\"144298\"] = 1, -- Defense Bot Mk III\n        [\"151649\"] = 2, -- Defense Bot Mk I\n        [\"144295\"] = 2, -- Mechagon Mechanic\n        [\"144299\"] = 1, -- Workshop Defender\n        \n    }\n    \nend",
            },
            ["Time"] = 1740507114,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                    ["Enabled"] = true,
                    ["party"] = true,
                },
                ["class"] = {
                },
                ["map_ids"] = {
                },
                ["role"] = {
                },
                ["pvptalent"] = {
                },
                ["spec"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["affix"] = {
                },
            },
            ["url"] = "https://wago.io/Ru_9FLVjI/31",
            ["Icon"] = 1041231,
            ["Enabled"] = true,
            ["Revision"] = 3125,
            ["semver"] = "1.0.30",
            ["Author"] = "Causese-Valdrakken",
            ["Desc"] = "Allows you to scale a creatures nameplate based on it's importance in the dungeon.",
            ["Prio"] = 99,
            ["Name"] = "Priority based scaling",
            ["PlaterCore"] = 1,
            ["Options"] = {
                {
                    ["Type"] = 4,
                    ["Name"] = "Enable Scaling",
                    ["Value"] = true,
                    ["Key"] = "scale",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Allows nameplates to scale based on priority.",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Set scaling value for mid priority.",
                    ["Min"] = 0,
                    ["Fraction"] = true,
                    ["Value"] = 0.75,
                    ["Key"] = "midScale",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Name"] = "Mid prio",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "Set scaling value for low priority.",
                    ["Min"] = 0,
                    ["Fraction"] = true,
                    ["Value"] = 0.5,
                    ["Key"] = "lowScale",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Name"] = "Low prio",
                },
                {
                    ["Type"] = 4,
                    ["Name"] = "Enable Coloring",
                    ["Value"] = false,
                    ["Key"] = "color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Allows nameplates to be colored based on priority.",
                },
                {
                    ["Type"] = 1,
                    ["Name"] = "Mid prio",
                    ["Value"] = {
                        1,
                        0.92941182851791,
                        0,
                        1,
                    },
                    ["Key"] = "midColor",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Set color for mid priority.",
                },
                {
                    ["Type"] = 1,
                    ["Name"] = "Low prio",
                    ["Value"] = {
                        0.49803924560547,
                        0.49803924560547,
                        0.49803924560547,
                        1,
                    },
                    ["Key"] = "lowColor",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "Set color for low priority.",
                },
            },
            ["HooksTemp"] = {
            },
            ["version"] = 31,
        },
        {
            ["OptionsValues"] = {
                ["borderThickness"] = 1,
                ["interruptIndicatorWidth"] = 1.100000023841858,
                ["defaultBorderToggle"] = true,
                ["readyColor"] = {
                    0.3607843220233917,
                    1,
                    0.3803921937942505,
                    1,
                },
                ["defaultColor"] = {
                    0,
                    0,
                    0,
                    1,
                },
                ["willBeReadyColor"] = {
                    1,
                    0.5568627715110779,
                    0.207843154668808,
                    1,
                },
            },
            ["HooksTemp"] = {
                ["Cast Update"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        \n        if self.IsInterrupted then\n            Plater.SetCastBarColor(unitFrame, modTable.config[\"interruptedColor\"])\n            return\n        end\n        \n        local interruptCooldownStart, duration = nil\n        local interruptEndTime = nil\n        \n        if envTable.kickId ~= nil then\n            local cd = C_Spell.GetSpellCooldown(envTable.kickId)\n            interruptCooldownStart, duration = cd.startTime,  cd.duration\n            interruptEndTime =  interruptCooldownStart + duration\n            local   interruptRemainingCooldown = max ( interruptEndTime - GetTime(), 0)\n            local  castRemainingCooldown = max (unitFrame.castBar.spellEndTime - GetTime(), 0)\n            \n            if interruptCooldownStart  ~= 0 then\n                if ( interruptRemainingCooldown + modTable.config[\"reactionTime\"] - castRemainingCooldown ) < 0 then\n                    interruptCooldownStart  = -1\n                end\n            end\n        else\n            interruptCooldownStart = 1\n        end\n        \n        envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n    end\n    \nend",
                ["Cast Stop"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.castBar.interruptIsUpIndicator then\n        unitFrame.castBar. interruptIsUpIndicator:Hide()\n    end\n    envTable.removeBorder()\nend\n\n\n",
                ["Enter Combat"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.spec = GetSpecialization()\nend",
                ["Cast Start"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        local spec = GetSpecialization()\n        envTable.spec = spec\n        \n        if envTable.class ~= 9 then\n            envTable.kickId = modTable.kickIndex[envTable.class][envTable.spec]\n        else\n            -- Special warlock logic because warlocks are special\n            if envTable.spec == 1 or envTable.spec == 3 then -- Aff & Destro\n                if IsSpellKnown(19647, true) then -- Felhunter\n                    envTable.kickId = 119910\n                else -- Look for Grimoire of Sacrifice\n                    local i, found = 1, false\n                    local buff = UnitBuff(\"player\", i)\n                    while buff do\n                        if buff == \"Grimoire of Sacrifice\" then\n                            found = true\n                            buff = nil\n                        else\n                            i = i + 1\n                            buff = UnitBuff(\"player\", i)\n                        end\n                    end\n                    if found == true then\n                        envTable.kickId = 132409\n                    else \n                        envTable.kickId = nil\n                    end\n                end\n            elseif spec == 2 then -- Demo\n                if IsSpellKnown(89766, true) then -- Felguard\n                    envTable.kickId = 119914\n                elseif IsSpellKnown(19647, true) then -- Felhunter\n                    envTable.kickId = 119910\n                else \n                    envTable.kickId = nil \n                end\n            end\n        end\n        \n    end\nend",
                ["Initialization"] =
                "function (modTable)\n    modTable.kickIndex = {\n        [1] = {[1] = 6552, [2] = 6552, [3] = 6552}, -- Warrior\n        [2] = {[1] = 96231, [2] = 96231, [3] = 96231}, -- Paladin\n        [3] = {[1] = 147362, [2] = 147362, [3] = 187707}, -- Hunter\n        [4] = {[1] = 1766, [2] = 1766, [3] = 1766} ,-- Rogue\n        [5] = {[1] = nil, [2] = nil, [3] = 15487}, -- Priest\n        [6] = {[1] = 47528, [2] = 47528, [3] = 47528}, -- Death Knight\n        [7] = {[1] = 57994, [2] = 57994, [3] = 57994}, -- Shaman\n        [8] = {[1] = 2139, [2] = 2139, [3] = 2139}, -- Mage\n        [10] = {[1] = 116705, [2] = 116705, [3] = 116705}, -- Monk\n        [11] = {[1] = 78675, [2] = 106839, [3] = 106839, [4] = 106839}, -- Druid\n        [12] = {[1] = 183752, [2] = 183752}, -- Demon Hunter\n        [13] = {[1] = 351338, [2] = 351338, [3] = 351338} -- Evoker\n    }\n    \nend",
                ["Constructor"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    self.ThrottleUpdate = 0.016\n    \n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    local dummyFrame =  nil\n    if not dummyFrame then\n        dummyFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        dummyFrame:SetPoint(\"TOPLEFT\",0+modTable.config[\"borderThickness\"],0-modTable.config[\"borderThickness\"])\n        dummyFrame:SetPoint(\"BOTTOMRIGHT\",0-modTable.config[\"borderThickness\"],0+modTable.config[\"borderThickness\"])\n        dummyFrame:Show()\n    end\n    \n    function envTable.showBorder(r,g,b,a)\n        unitFrame.castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        unitFrame.castBar.CastBarBorder:Show()\n    end\n    \n    function envTable.removeBorder()\n        if modTable.config[\"defaultBorderToggle\"] then\n            local  r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n            envTable.showBorder(r,g,b,a)\n        else\n            unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n        end\n    end\n    \n    \n    if not unitFrame.castBar.CastBarBorder then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, dummyFrame, \"NamePlateFullBorderTemplate\")\n        \n        unitFrame.castBar.CastBarBorder:SetBorderSizes(modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"])\n        unitFrame.castBar.CastBarBorder:UpdateSizes()\n    end\n    \n    if modTable.config[\"defaultBorderToggle\"] then\n        local r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n        envTable.showBorder(r,g,b,a)\n    else\n        unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n    end\n    \n    function envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n        \n        if not unitFrame.castBar.interruptIsUpIndicator then\n            unitFrame.castBar.interruptIsUpIndicator = CreateFrame (\"frame\", nil, unitFrame.castBar)\n            unitFrame.castBar.interruptIsUpIndicator:SetWidth(modTable.config[\"interruptIndicatorWidth\"])\n            \n            local t = unitFrame.castBar.interruptIsUpIndicator:CreateTexture(nil,\"OVERLAY\")\n            t:SetTexture(\"Interface\\\\AddOns\\\\Plater\\\\images\\\\regular_white.blp\")\n            t:SetAllPoints(unitFrame.castBar.interruptIsUpIndicator)\n            local r,g,b,a = Plater:ParseColors(modTable.config[\"interruptIndicatorColor\"])\n            t:SetVertexColor(r,g,b,a)\n            unitFrame.castBar.interruptIsUpIndicator.texture = t\n            \n        end\n        \n        --moved this out of the if to update height in case of cast bar height changes from scripts/mods\n        unitFrame.castBar.interruptIsUpIndicator:SetHeight(unitFrame.castBar:GetHeight() - (2*modTable.config[\"borderThickness\"]))\n        \n        local isUpIndicatorLocation = (interruptEndTime - unitFrame.castBar.spellStartTime) / unitFrame.castBar.maxValue\n        \n        if unitFrame.castBar.channeling then\n            isUpIndicatorLocation = 1 - isUpIndicatorLocation\n        end\n        \n        unitFrame.castBar.interruptIsUpIndicator:SetPoint(\"CENTER\", unitFrame.castBar.CastBarBorder, \"LEFT\", isUpIndicatorLocation *  unitFrame.castBar:GetWidth() , 0)\n        \n        unitFrame.castBar. interruptIsUpIndicator:Show()\n        \n    end\n    \n    function envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n        \n        local r, g, b, a = nil\n        \n        if unitFrame.castBar.canInterrupt then\n            if  interruptCooldownStart > 0 then\n                envTable.removeBorder()\n            elseif  interruptCooldownStart < 0 then\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"willBeReadyColor\"])\n                envTable.showBorder(r,g,b,a)\n                \n                if modTable.config[\"castBarIndicatorToggle\"] then\n                    envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n                end\n                \n            else\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"readyColor\"])\n                envTable.showBorder(r,g,b,a)\n                if unitFrame.castBar.interruptIsUpIndicator then\n                    unitFrame.castBar. interruptIsUpIndicator:Hide()\n                end\n            end\n        else\n            --if a spell would turn from interruptable to not interruptable\n            envTable.removeBorder()\n        end\n        \n    end\n    \nend",
            },
            ["UID"] = "0x661711831a72796",
            ["Hooks"] = {
                ["Cast Update"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        \n        if self.IsInterrupted then\n            Plater.SetCastBarColor(unitFrame, modTable.config[\"interruptedColor\"])\n            return\n        end\n        \n        local interruptCooldownStart, duration = nil\n        local interruptEndTime = nil\n        \n        if envTable.kickId ~= nil then\n            local cd = C_Spell.GetSpellCooldown(envTable.kickId)\n            interruptCooldownStart, duration = cd.startTime,  cd.duration\n            interruptEndTime =  interruptCooldownStart + duration\n            local   interruptRemainingCooldown = max ( interruptEndTime - GetTime(), 0)\n            local  castRemainingCooldown = max (unitFrame.castBar.spellEndTime - GetTime(), 0)\n            \n            if interruptCooldownStart  ~= 0 then\n                if ( interruptRemainingCooldown + modTable.config[\"reactionTime\"] - castRemainingCooldown ) < 0 then\n                    interruptCooldownStart  = -1\n                end\n            end\n        else\n            interruptCooldownStart = 1\n        end\n        \n        envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n    end\n    \nend",
                ["Constructor"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    self.ThrottleUpdate = 0.016\n    \n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    local dummyFrame =  nil\n    if not dummyFrame then\n        dummyFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        dummyFrame:SetPoint(\"TOPLEFT\",0+modTable.config[\"borderThickness\"],0-modTable.config[\"borderThickness\"])\n        dummyFrame:SetPoint(\"BOTTOMRIGHT\",0-modTable.config[\"borderThickness\"],0+modTable.config[\"borderThickness\"])\n        dummyFrame:Show()\n    end\n    \n    function envTable.showBorder(r,g,b,a)\n        unitFrame.castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        unitFrame.castBar.CastBarBorder:Show()\n    end\n    \n    function envTable.removeBorder()\n        if modTable.config[\"defaultBorderToggle\"] then\n            local  r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n            envTable.showBorder(r,g,b,a)\n        else\n            unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n        end\n    end\n    \n    \n    if not unitFrame.castBar.CastBarBorder then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, dummyFrame, \"NamePlateFullBorderTemplate\")\n        \n        unitFrame.castBar.CastBarBorder:SetBorderSizes(modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"])\n        unitFrame.castBar.CastBarBorder:UpdateSizes()\n    end\n    \n    if modTable.config[\"defaultBorderToggle\"] then\n        local r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n        envTable.showBorder(r,g,b,a)\n    else\n        unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n    end\n    \n    function envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n        \n        if not unitFrame.castBar.interruptIsUpIndicator then\n            unitFrame.castBar.interruptIsUpIndicator = CreateFrame (\"frame\", nil, unitFrame.castBar)\n            unitFrame.castBar.interruptIsUpIndicator:SetWidth(modTable.config[\"interruptIndicatorWidth\"])\n            \n            local t = unitFrame.castBar.interruptIsUpIndicator:CreateTexture(nil,\"OVERLAY\")\n            t:SetTexture(\"Interface\\\\AddOns\\\\Plater\\\\images\\\\regular_white.blp\")\n            t:SetAllPoints(unitFrame.castBar.interruptIsUpIndicator)\n            local r,g,b,a = Plater:ParseColors(modTable.config[\"interruptIndicatorColor\"])\n            t:SetVertexColor(r,g,b,a)\n            unitFrame.castBar.interruptIsUpIndicator.texture = t\n            \n        end\n        \n        --moved this out of the if to update height in case of cast bar height changes from scripts/mods\n        unitFrame.castBar.interruptIsUpIndicator:SetHeight(unitFrame.castBar:GetHeight() - (2*modTable.config[\"borderThickness\"]))\n        \n        local isUpIndicatorLocation = (interruptEndTime - unitFrame.castBar.spellStartTime) / unitFrame.castBar.maxValue\n        \n        if unitFrame.castBar.channeling then\n            isUpIndicatorLocation = 1 - isUpIndicatorLocation\n        end\n        \n        unitFrame.castBar.interruptIsUpIndicator:SetPoint(\"CENTER\", unitFrame.castBar.CastBarBorder, \"LEFT\", isUpIndicatorLocation *  unitFrame.castBar:GetWidth() , 0)\n        \n        unitFrame.castBar. interruptIsUpIndicator:Show()\n        \n    end\n    \n    function envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n        \n        local r, g, b, a = nil\n        \n        if unitFrame.castBar.canInterrupt then\n            if  interruptCooldownStart > 0 then\n                envTable.removeBorder()\n            elseif  interruptCooldownStart < 0 then\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"willBeReadyColor\"])\n                envTable.showBorder(r,g,b,a)\n                \n                if modTable.config[\"castBarIndicatorToggle\"] then\n                    envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n                end\n                \n            else\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"readyColor\"])\n                envTable.showBorder(r,g,b,a)\n                if unitFrame.castBar.interruptIsUpIndicator then\n                    unitFrame.castBar. interruptIsUpIndicator:Hide()\n                end\n            end\n        else\n            --if a spell would turn from interruptable to not interruptable\n            envTable.removeBorder()\n        end\n        \n    end\n    \nend",
                ["Initialization"] =
                "function (modTable)\n    modTable.kickIndex = {\n        [1] = {[1] = 6552, [2] = 6552, [3] = 6552}, -- Warrior\n        [2] = {[1] = 96231, [2] = 96231, [3] = 96231}, -- Paladin\n        [3] = {[1] = 147362, [2] = 147362, [3] = 187707}, -- Hunter\n        [4] = {[1] = 1766, [2] = 1766, [3] = 1766} ,-- Rogue\n        [5] = {[1] = nil, [2] = nil, [3] = 15487}, -- Priest\n        [6] = {[1] = 47528, [2] = 47528, [3] = 47528}, -- Death Knight\n        [7] = {[1] = 57994, [2] = 57994, [3] = 57994}, -- Shaman\n        [8] = {[1] = 2139, [2] = 2139, [3] = 2139}, -- Mage\n        [10] = {[1] = 116705, [2] = 116705, [3] = 116705}, -- Monk\n        [11] = {[1] = 78675, [2] = 106839, [3] = 106839, [4] = 106839}, -- Druid\n        [12] = {[1] = 183752, [2] = 183752}, -- Demon Hunter\n        [13] = {[1] = 351338, [2] = 351338, [3] = 351338} -- Evoker\n    }\n    \nend",
                ["Cast Start"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        local spec = GetSpecialization()\n        envTable.spec = spec\n        \n        if envTable.class ~= 9 then\n            envTable.kickId = modTable.kickIndex[envTable.class][envTable.spec]\n        else\n            -- Special warlock logic because warlocks are special\n            if envTable.spec == 1 or envTable.spec == 3 then -- Aff & Destro\n                if IsSpellKnown(19647, true) then -- Felhunter\n                    envTable.kickId = 119910\n                else -- Look for Grimoire of Sacrifice\n                    local i, found = 1, false\n                    local buff = UnitBuff(\"player\", i)\n                    while buff do\n                        if buff == \"Grimoire of Sacrifice\" then\n                            found = true\n                            buff = nil\n                        else\n                            i = i + 1\n                            buff = UnitBuff(\"player\", i)\n                        end\n                    end\n                    if found == true then\n                        envTable.kickId = 132409\n                    else \n                        envTable.kickId = nil\n                    end\n                end\n            elseif spec == 2 then -- Demo\n                if IsSpellKnown(89766, true) then -- Felguard\n                    envTable.kickId = 119914\n                elseif IsSpellKnown(19647, true) then -- Felhunter\n                    envTable.kickId = 119910\n                else \n                    envTable.kickId = nil \n                end\n            end\n        end\n        \n    end\nend",
                ["Enter Combat"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.spec = GetSpecialization()\nend",
                ["Cast Stop"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.castBar.interruptIsUpIndicator then\n        unitFrame.castBar. interruptIsUpIndicator:Hide()\n    end\n    envTable.removeBorder()\nend\n\n\n",
            },
            ["Time"] = 1740509517,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                },
                ["class"] = {
                },
                ["map_ids"] = {
                },
                ["role"] = {
                },
                ["pvptalent"] = {
                },
                ["affix"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["spec"] = {
                },
            },
            ["url"] = "",
            ["Icon"] = 608940,
            ["Enabled"] = true,
            ["Revision"] = 833,
            ["semver"] = "",
            ["Author"] = "Maeliin-Silvermoon",
            ["Desc"] =
            "Changes the color of the nameplate castbar border based on the current cooldown of the player's interrupt.",
            ["Prio"] = 99,
            ["version"] = -1,
            ["PlaterCore"] = 1,
            ["LastHookEdited"] = "",
            ["Options"] = {
                {
                    ["Type"] = 6,
                    ["Key"] = "qweqew",
                    ["Value"] = 0,
                    ["Name"] = "qwdqwd",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 5,
                    ["Key"] = "option7",
                    ["Value"] = "IMPORTANT: UI Reload is needed after changing settings below",
                    ["Name"] = "Option 7",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option6",
                    ["Value"] = 0,
                    ["Name"] = "blank space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "readyColor",
                    ["Value"] = {
                        0,
                        1,
                        0,
                        1,
                    },
                    ["Name"] = "Interrupt ready color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "The color of the cast bar border when your interrupt is ready.",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "willBeReadyColor",
                    ["Value"] = {
                        1,
                        0.35686275362968,
                        0,
                        1,
                    },
                    ["Name"] = "Will be ready color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "The color of the cast bar border when your interrupt will be ready intime.",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 2,
                    ["Desc"] =
                    "Value of how many seconds the interrupt has to be off cooldown before the cast ends to indicate that it will be ready in time.",
                    ["Min"] = 0,
                    ["Key"] = "reactionTime",
                    ["Value"] = 0.3,
                    ["Name"] = "Reaction time",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 5,
                    ["Desc"] = "Set border thickness in pixel",
                    ["Min"] = 0,
                    ["Key"] = "borderThickness",
                    ["Value"] = 0.5,
                    ["Name"] = "Border thickness",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option6",
                    ["Value"] = 0,
                    ["Name"] = "blank space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "defaultBorderToggle",
                    ["Value"] = false,
                    ["Name"] = "Set a cast bar border in any case",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] =
                    "Check to enable a border around your cast bar by default. This border is always shown, even when your interrupt is on cd. Disable other cast bar border mods to have the best result.",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "defaultColor",
                    ["Value"] = {
                        0,
                        0,
                        0,
                        1,
                    },
                    ["Name"] = "Default cast bar border color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "The default border color",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option12",
                    ["Value"] = 0,
                    ["Name"] = "blank space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "castBarIndicatorToggle",
                    ["Value"] = true,
                    ["Name"] = "Exact indicator in cast bar",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] =
                    "Activate to have an indicator inside the cast bar that shows the exact moment when your interrupt will come up.",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "interruptIndicatorColor",
                    ["Value"] = {
                        1,
                        1,
                        1,
                        1,
                    },
                    ["Name"] = "Indicator color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] =
                    "The color of the indicator inside the castbar for when the cast is going to be up.",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 5,
                    ["Desc"] = "",
                    ["Min"] = 1,
                    ["Key"] = "interruptIndicatorWidth",
                    ["Value"] = 1,
                    ["Name"] = "Indicator thickness",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
            },
            ["Name"] = "Interrupt CD Indicator",
        },
        {
            ["OptionsValues"] = {
                ["spiderScale"] = 0.5,
                ["parasite"] = {
                    0.4980392456054688,
                    0.4980392456054688,
                    0.4980392456054688,
                    1,
                },
                ["color"] = false,
                ["parasiteScale"] = 0.25,
                ["mark"] = true,
            },
            ["HooksTemp"] = {
            },
            ["UID"] = "0x66f14b392cdfb00",
            ["Hooks"] = {
                ["Leave Combat"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    local npcID = select(6, strsplit(\"-\", UnitGUID(unitId)))\n    if npcID then\n        local prio = modTable[\"npcIDs\"][npcID]\n        if prio then\n            local color = modTable.config.color\n            local scale = modTable.config.scale\n            local parasite = modTable.config.parasite\n            local spider = modTable.config.spider\n            local spiderScale = modTable.config.spiderScale\n            local parasiteScale = modTable.config.parasiteScale\n            local wormScale = modTable.config.wormScale\n            local markColoring = modTable.config.mark\n            local mark = GetRaidTargetIndex(unitId)\n            if prio == 1 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, spiderScale)\n                end\n                if color and spider then\n                    Plater.SetNameplateColor (unitFrame, modTable.config.spider)\n                end\n            elseif prio == 2 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, parasiteScale)\n                end\n                if color and parasite then\n                    Plater.SetNameplateColor (unitFrame, modTable.config.parasite)\n                end\n            elseif prio == 0 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, wormScale)\n                end\n                if markColoring then\n                    if mark then\n                        Plater.SetNameplateColor (unitFrame, modTable.config[tostring(mark)])\n                    else\n                        Plater.SetNameplateColor (unitFrame)\n                    end\n                end\n            end    \n        end\n    end\nend",
                ["Nameplate Added"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    local npcID = select(6, strsplit(\"-\", UnitGUID(unitId)))\n    if npcID then\n        local prio = modTable[\"npcIDs\"][npcID]\n        if prio then\n            local color = modTable.config.color\n            local scale = modTable.config.scale\n            local parasite = modTable.config.parasite\n            local spider = modTable.config.spider\n            local spiderScale = modTable.config.spiderScale\n            local parasiteScale = modTable.config.parasiteScale\n            local wormScale = modTable.config.wormScale\n            local markColoring = modTable.config.mark\n            local mark = GetRaidTargetIndex(unitId)\n            if prio == 1 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, spiderScale)\n                end\n                if color and spider then\n                    Plater.SetNameplateColor (unitFrame, modTable.config.spider)\n                end\n            elseif prio == 2 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, parasiteScale)\n                end\n                if color and parasite then\n                    Plater.SetNameplateColor (unitFrame, modTable.config.parasite)\n                end\n            elseif prio == 0 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, wormScale)\n                end\n                if markColoring then\n                    if mark then\n                        Plater.SetNameplateColor (unitFrame, modTable.config[tostring(mark)])\n                    else\n                        Plater.SetNameplateColor (unitFrame)\n                    end\n                end\n            end    \n        end\n    end\nend",
                ["Initialization"] =
                "function (modTable)\n    modTable[\"npcIDs\"] = {\n        [\"219046\"] = 0, --worms\n        [\"219045\"] = 1, -- spider\n        [\"220626\"] = 2, --parasites\n    }\nend",
                ["Raid Target"] =
                "function (self, unitId, unitFrame, envTable, modTable)\n    local npcID = select(6, strsplit(\"-\", UnitGUID(unitId)))\n    if npcID then\n        local prio = modTable[\"npcIDs\"][npcID]\n        if prio == 0 then\n            local markColoring = modTable.config.mark\n            local mark = GetRaidTargetIndex(unitId)\n            if markColoring then\n                if mark then\n                    Plater.SetNameplateColor (unitFrame, modTable.config[tostring(mark)])\n                else\n                    Plater.SetNameplateColor (unitFrame)\n                end\n            end\n        end\n    end\nend",
            },
            ["Time"] = 1740197137,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                    ["Enabled"] = true,
                    ["raid"] = true,
                },
                ["class"] = {
                },
                ["map_ids"] = {
                },
                ["role"] = {
                },
                ["pvptalent"] = {
                },
                ["affix"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["spec"] = {
                },
            },
            ["url"] = "",
            ["Icon"] = 236551,
            ["Enabled"] = true,
            ["Revision"] = 3560,
            ["semver"] = "",
            ["Author"] = "Causese-Valdrakken",
            ["Desc"] = "Ovi'nax add scaling",
            ["Prio"] = 99,
            ["version"] = -1,
            ["PlaterCore"] = 1,
            ["LastHookEdited"] = "",
            ["Options"] = {
                {
                    ["Type"] = 4,
                    ["Key"] = "scale",
                    ["Value"] = true,
                    ["Name"] = "Enable Scaling",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Adjusts nameplate scaling",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "mark",
                    ["Value"] = true,
                    ["Name"] = "Enable Mark Coloring",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Colors marked units based on mark",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "color",
                    ["Value"] = true,
                    ["Name"] = "Enable Coloring",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "Colors specific units",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "parasite",
                    ["Value"] = {
                        0.49803924560547,
                        0.49803924560547,
                        0.49803924560547,
                        1,
                    },
                    ["Name"] = "parasite color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "spider",
                    ["Value"] = {
                        0.49803924560547,
                        0.49803924560547,
                        0.49803924560547,
                        1,
                    },
                    ["Name"] = "spider color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 6,
                    ["Key"] = "option15",
                    ["Value"] = 0,
                    ["Name"] = "blank space",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "8",
                    ["Value"] = {
                        1,
                        1,
                        1,
                        1,
                    },
                    ["Name"] = "skull color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "7",
                    ["Value"] = {
                        1,
                        0.062745101749897,
                        0,
                        1,
                    },
                    ["Name"] = "cross color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "6",
                    ["Value"] = {
                        0,
                        0.64705884456635,
                        1,
                        1,
                    },
                    ["Name"] = "square color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "5",
                    ["Value"] = {
                        0.91372555494308,
                        1,
                        0.77254909276962,
                        1,
                    },
                    ["Name"] = "moon color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "4",
                    ["Value"] = {
                        0.28627452254295,
                        1,
                        0.30196079611778,
                        1,
                    },
                    ["Name"] = "triangle color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "3",
                    ["Value"] = {
                        0.88627457618713,
                        0.17647059261799,
                        1,
                        1,
                    },
                    ["Name"] = "diamond color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "2",
                    ["Value"] = {
                        1,
                        0.56078433990479,
                        0.12549020349979,
                        1,
                    },
                    ["Name"] = "circle color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 1,
                    ["Key"] = "1",
                    ["Value"] = {
                        1,
                        0.96078437566757,
                        0,
                        1,
                    },
                    ["Name"] = "star color",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "",
                    ["Min"] = 0,
                    ["Key"] = "wormScale",
                    ["Value"] = 1,
                    ["Name"] = "worm scaling",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "",
                    ["Min"] = 0,
                    ["Key"] = "spiderScale",
                    ["Value"] = 0.75,
                    ["Name"] = "spider scaling",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
                {
                    ["Type"] = 2,
                    ["Max"] = 1,
                    ["Desc"] = "",
                    ["Min"] = 0,
                    ["Key"] = "parasiteScale",
                    ["Value"] = 0.5,
                    ["Name"] = "parasite scaling",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                    ["Fraction"] = true,
                },
            },
            ["Name"] = "Ovi'nax Color & Scaling",
        },
        {
            ["OptionsValues"] = {
            },
            ["HooksTemp"] = {
                ["Initialization"] =
                "function (modTable)\n    if not Plater.AddPerformanceUnits then\n        return\n    end\n    \n    local units = {\n        \n        -- Raids\n        [189706] = true, -- Chaotic Essence\n        [189707] = true, -- Chaotic mote\n        [176920] = true, -- Domination Arrow -- Sylv\n        [196679] = true, -- Frozen Shroud -- Broodkeeper\n        [194999] = true, -- Volatile Spark -- Raszageth\n        [191714] = true, -- Seeking Stormling -- Raszageth\n        [210231] = true, -- Tainted Lasher -- Gnarlroot\n        [211306] = true, -- Fiery vines -- Tindral\n        [219746] = true, --Tomb - Ansurek\n        [220626] = true, -- Blood Parasite Ovinax\n        \n        -- Dungeons\n        [196642] = true, -- Hungry Lasher (Boss add)\n        [197398] = true, -- Hungry Lasher\n        [208994] = true, -- Infected Lasher\n        [189363] = true, -- Infected Lasher\n        [96247] = true, -- Vileshard Crawler\n        [100529] = true, -- Hatespawn Slime\n        [84401] = true, -- Swift Sproutling (boss add)\n        \n        --Testing\n        [198594] = false, -- Testing target dummy\n        [87329] = false, -- testing\n    }\n    \n    for unit, flag in pairs(units) do\n        if flag and modTable.config.performance then\n            Plater.AddPerformanceUnits(unit)\n        else\n            Plater.RemovePerformanceUnits(unit)\n        end\n        if flag and modTable.config.forceBlizz then\n            Plater.AddForceBlizzardNameplateUnits(unit)\n        else\n            Plater.RemoveForceBlizzardNameplateUnits(unit)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            },
            ["UID"] = "0x62f9521d664ad",
            ["Hooks"] = {
                ["Initialization"] =
                "function (modTable)\n    if not Plater.AddPerformanceUnits then\n        return\n    end\n    \n    local units = {\n        \n        -- Raids\n        [189706] = true, -- Chaotic Essence\n        [189707] = true, -- Chaotic mote\n        [176920] = true, -- Domination Arrow -- Sylv\n        [196679] = true, -- Frozen Shroud -- Broodkeeper\n        [194999] = true, -- Volatile Spark -- Raszageth\n        [191714] = true, -- Seeking Stormling -- Raszageth\n        [210231] = true, -- Tainted Lasher -- Gnarlroot\n        [211306] = true, -- Fiery vines -- Tindral\n        [219746] = true, --Tomb - Ansurek\n        [220626] = true, -- Blood Parasite Ovinax\n        \n        -- Dungeons\n        [196642] = true, -- Hungry Lasher (Boss add)\n        [197398] = true, -- Hungry Lasher\n        [208994] = true, -- Infected Lasher\n        [189363] = true, -- Infected Lasher\n        [96247] = true, -- Vileshard Crawler\n        [100529] = true, -- Hatespawn Slime\n        [84401] = true, -- Swift Sproutling (boss add)\n        \n        --Testing\n        [198594] = false, -- Testing target dummy\n        [87329] = false, -- testing\n    }\n    \n    for unit, flag in pairs(units) do\n        if flag and modTable.config.performance then\n            Plater.AddPerformanceUnits(unit)\n        else\n            Plater.RemovePerformanceUnits(unit)\n        end\n        if flag and modTable.config.forceBlizz then\n            Plater.AddForceBlizzardNameplateUnits(unit)\n        else\n            Plater.RemoveForceBlizzardNameplateUnits(unit)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            },
            ["Time"] = 1740509517,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                },
                ["class"] = {
                },
                ["map_ids"] = {
                },
                ["role"] = {
                    ["Enabled"] = true,
                    ["TANK"] = true,
                    ["HEALER"] = true,
                    ["DAMAGER"] = true,
                },
                ["pvptalent"] = {
                },
                ["affix"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["spec"] = {
                },
            },
            ["url"] = "",
            ["Icon"] = 458228,
            ["Enabled"] = true,
            ["Revision"] = 416,
            ["semver"] = "",
            ["Author"] = "Viashi-Argent Dawn",
            ["Desc"] = "",
            ["Prio"] = 99,
            ["version"] = -1,
            ["PlaterCore"] = 1,
            ["LastHookEdited"] = "",
            ["Options"] = {
                {
                    ["Type"] = 4,
                    ["Key"] = "performance",
                    ["Value"] = true,
                    ["Name"] = "Performance",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "",
                },
                {
                    ["Type"] = 4,
                    ["Key"] = "forceBlizz",
                    ["Value"] = false,
                    ["Name"] = "Force Blizzard",
                    ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                    ["Desc"] = "",
                },
            },
            ["Name"] = "Performance Units",
        },
        {
            ["OptionsValues"] = {
            },
            ["HooksTemp"] = {
                ["Nameplate Updated"] =
                "function (self, unitId, unitFrame, envTable)    \n    local inCombat = self.InCombat\n    local isTanking = self.namePlateThreatIsTanking\n    local isTapDenied = UnitIsTapDenied(unitId)\n    \n    if inCombat and not isTanking and not isTapDenied then\n        local exists = UnitExists(self.targetUnitID)\n        if exists then\n            local role = UnitGroupRolesAssigned(self.targetUnitID)\n            local isTank = (role == \"TANK\")\n            \n            if not isTank then\n                local guid = UnitGUID(self.targetUnitID)\n                if envTable.shallHighlight(self, guid) then\n                    Plater.SetNameplateColor(unitFrame, envTable.color)\n                end\n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                ["Constructor"] =
                "function (self, unitId, unitFrame, envTable)\n    envTable.color = \"#57f609\"\n    \n    envTable.npcs = {\n        [61056] = \"Greater Earth Elemental\",\n        [61146] = \"Black Ox Statue\",\n        [95072] = \"Earth Elemental\",\n        [103822] = \"Treant\"\n    }\n    \n    envTable.rules = {\n        [\"Pet\"] = true,\n        [\"Creature\"] = function(npcID)\n            return (envTable.npcs[npcID] ~= nil)\n        end\n    }\n    \n    envTable.getTypeAndID = function(guid)\n        local unitType, _, _, _, _, npcID = strsplit(\"-\", guid)\n        return unitType, tonumber(npcID or \"0\") or 0\n    end\n    \n    envTable.shallHighlight = function(self, guid)\n        local unitType, npcID = envTable.getTypeAndID(guid)\n        if unitType then\n            local value = envTable.rules[unitType]\n            if value then\n                if type(value) == \"boolean\" then\n                    return value\n                elseif type(value) == \"function\" then\n                    return value(npcID)\n                end\n            end -- value\n        end -- unitType\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            },
            ["Hooks"] = {
                ["Constructor"] =
                "function (self, unitId, unitFrame, envTable)\n    envTable.color = \"#57f609\"\n    \n    envTable.npcs = {\n        [61056] = \"Greater Earth Elemental\",\n        [61146] = \"Black Ox Statue\",\n        [95072] = \"Earth Elemental\",\n        [103822] = \"Treant\"\n    }\n    \n    envTable.rules = {\n        [\"Pet\"] = true,\n        [\"Creature\"] = function(npcID)\n            return (envTable.npcs[npcID] ~= nil)\n        end\n    }\n    \n    envTable.getTypeAndID = function(guid)\n        local unitType, _, _, _, _, npcID = strsplit(\"-\", guid)\n        return unitType, tonumber(npcID or \"0\") or 0\n    end\n    \n    envTable.shallHighlight = function(self, guid)\n        local unitType, npcID = envTable.getTypeAndID(guid)\n        if unitType then\n            local value = envTable.rules[unitType]\n            if value then\n                if type(value) == \"boolean\" then\n                    return value\n                elseif type(value) == \"function\" then\n                    return value(npcID)\n                end\n            end -- value\n        end -- unitType\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                ["Nameplate Updated"] =
                "function (self, unitId, unitFrame, envTable)    \n    local inCombat = self.InCombat\n    local isTanking = self.namePlateThreatIsTanking\n    local isTapDenied = UnitIsTapDenied(unitId)\n    \n    if inCombat and not isTanking and not isTapDenied then\n        local exists = UnitExists(self.targetUnitID)\n        if exists then\n            local role = UnitGroupRolesAssigned(self.targetUnitID)\n            local isTank = (role == \"TANK\")\n            \n            if not isTank then\n                local guid = UnitGUID(self.targetUnitID)\n                if envTable.shallHighlight(self, guid) then\n                    Plater.SetNameplateColor(unitFrame, envTable.color)\n                end\n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            },
            ["Time"] = 1740509521,
            ["LoadConditions"] = {
                ["talent"] = {
                },
                ["group"] = {
                },
                ["class"] = {
                },
                ["map_ids"] = {
                },
                ["role"] = {
                    ["Enabled"] = true,
                    ["TANK"] = true,
                },
                ["pvptalent"] = {
                },
                ["affix"] = {
                },
                ["race"] = {
                },
                ["encounter_ids"] = {
                },
                ["spec"] = {
                },
            },
            ["url"] = "",
            ["Icon"] = 627607,
            ["Enabled"] = true,
            ["Revision"] = 106,
            ["semver"] = "",
            ["Author"] = "Brewdux-Tarren Mill",
            ["Desc"] = "Recolors the nameplate, if you the unit is tanked by a pet.",
            ["Prio"] = 99,
            ["version"] = -1,
            ["PlaterCore"] = 1,
            ["Name"] = "Pet Threat Highlighter",
            ["LastHookEdited"] = "Constructor",
            ["Options"] = {
            },
        },
    },
    ["cast_audiocues"] = {
        [466124] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [383823] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [375727] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [434824] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [372222] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [267354] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [372223] = "nil",
        [427176] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [375348] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [465682] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [372735] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [1217294] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [269843] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [283422] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [388801] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [426860] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [260894] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [375351] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [443500] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [226406] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [183088] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [267551] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [412200] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [197974] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [370764] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [201226] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [259940] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [377204] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [468813] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [412012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [427376] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [465754] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [332708] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [413607] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [432031] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [369365] = "nil",
        [395184] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [372107] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [257870] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [256627] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [447270] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [424958] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [333477] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [439621] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [451543] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [376892] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [367521] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [340300] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [200784] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [257426] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [1214546] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [419351] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [473220] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [269029] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [369563] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [200913] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [422541] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [448105] = "nil",
        [422414] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [427323] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [429427] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [412215] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [374839] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [384978] = "nil",
        [387910] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [257397] = "nil",
        [333294] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [1214315] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [377383] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [257862] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [1215738] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [448619] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [339706] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [262377] = "Interface\\AddOns\\WeakAuras\\Media\\Sounds\\RunAway.ogg",
        [317231] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [449130] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [437719] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [391118] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [372311] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [369061] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [421910] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [376683] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [323608] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [377732] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [408141] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [388060] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [450854] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [369828] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [381525] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [183465] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [164357] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [375439] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [385958] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [411012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [384524] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [386660] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [253544] = "Interface\\Addons\\SharedMedia_MyMedia\\sound\\Interrupt.ogg",
        [382708] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [421277] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [200345] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [291865] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [188169] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [385578] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [451496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [375251] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [412129] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [169929] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [447395] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [199151] = "nil",
        [416139] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [427869] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [435012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [428293] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [382712] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [374361] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [265540] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [265721] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [372087] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [396665] = "nil",
        [369409] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [333488] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [378818] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [426893] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [427359] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [266209] = "nil",
        [382233] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [321834] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [440218] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [268260] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [397889] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [1217496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [473114] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [257756] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [427342] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [453161] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [268202] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [226296] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [331718] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [388392] = "nil",
        [265019] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [426260] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [434779] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [426261] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [396812] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [462216] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [382277] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [387629] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [474018] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [387950] = "nil",
        [320822] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [426645] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [87618] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [321968] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [375327] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [200291] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [448640] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [377559] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [374563] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [436592] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [425027] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [330614] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [441119] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [393432] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [377034] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [427025] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [369465] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [431494] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [209628] = "nil",
        [200768] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [293986] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [449090] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [433662] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [372201] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [445457] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [388911] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [169179] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [272609] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [432198] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [156718] = "nil",
        [388976] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [323137] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [367484] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [323496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [369573] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [275907] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [384868] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [324323] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [372225] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [373742] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [385536] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [432520] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [461796] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [200261] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [432967] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [1217653] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [88308] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [188404] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [411994] = "nil",
        [474087] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [371875] = "nil",
        [412505] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [226304] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [391723] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [260793] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [193505] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [375943] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [369675] = "nil",
        [320729] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [265372] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [427616] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [376170] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [459779] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [340160] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [257288] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [376171] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [255567] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [413529] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [451843] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [253721] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
        [472452] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
        [397931] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
    },
    ["extra_icon_caster_outline"] = "OUTLINE",
    ["auras_per_row_amount2"] = 4,
    ["aura_width"] = 15,
    ["aura_width2"] = 15,
    ["health_statusbar_bgcolor"] = {
        0.04313725605607,
        0.04313725605607,
        0.04313725605607,
        0.70000001788139,
    },
    ["buff_frame_anchor_and_size_migrated"] = true,
    ["pet_width_scale"] = 0.99999994039536,
    ["health_animation_time_dilatation"] = 2.8699998855591,
    ["color_override_colors"] = {
        [3] = {
            0.61568629741669,
            0.18823531270027,
            0.21176472306252,
        },
        [4] = {
            0.77647066116333,
            0.69803923368454,
            0.46666669845581,
        },
        [5] = {
            0.39607846736908,
            0.65098041296005,
            0.39607846736908,
        },
    },
    ["quick_hide"] = true,
    ["extra_icon_timer_size"] = 7,
    ["target_highlight_color"] = {
        1,
        1,
    },
    ["cast_statusbar_spark_alpha"] = 0.69999998807907,
    ["extra_icon_stack_outline"] = "OUTLINE",
    ["resources"] = {
        ["y_offset"] = 1,
        ["y_offset_target"] = 9,
        ["scale"] = 0.79999995231628,
    },
    ["click_space"] = {
        135,
    },
    ["extra_icon_auras"] = {
        277242,
    },
    ["castbar_target_font"] = "Cronix-Bold",
    ["castbar_target_outline"] = "NONE",
    ["cast_statusbar_fadein_time"] = 0.019999999552965,
    ["range_check_in_range_or_target_alpha_friendlies"] = 1,
    ["aura_stack_anchor"] = {
        ["y"] = 4.8999996185303,
        ["x"] = 2.7999992370605,
        ["side"] = 5,
    },
    ["aura_sort"] = true,
    ["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark8",
    ["focus_as_target_alpha"] = true,
    ["cast_statusbar_spark_color"] = {
        0.98823529411765,
        [3] = 0.94117647058823,
    },
    ["pet_height_scale"] = 0.99999994039536,
    ["aura_x_offset"] = 0,
    ["first_run3"] = true,
    ["ui_parent_scale_tune"] = 1.6700000762939,
    ["ui_parent_buff_strata"] = "LOW",
    ["healthbar_framelevel"] = 0,
    ["profile_name"] = "croniX Nameplates",
    ["health_statusbar_bgtexture"] = "Cronix",
    ["indicator_raidmark_anchor"] = {
        ["y"] = 0.40000152587891,
        ["x"] = 14,
        ["side"] = 10,
    },
    ["tank"] = {
        ["colors"] = {
            ["pulling_from_tank"] = {
                nil,
                0.56078433990479,
                0.55686277151108,
            },
            ["aggro"] = {
                0,
                0.71372550725937,
            },
            ["noaggro"] = {
                0.61568629741669,
                0.18823531270027,
                0.21176472306252,
            },
            ["nocombat"] = {
                0.61568629741669,
                0.18823531270027,
                0.21176472306252,
            },
            ["pulling"] = {
                0.69019609689713,
                0.6235294342041,
                1,
            },
        },
    },
    ["aura_tracker"] = {
        ["buff_tracked"] = {
            ["280001"] = true,
            ["297133"] = true,
            ["328501"] = false,
            ["329181"] = false,
            ["163689"] = true,
            ["233210"] = true,
            ["227931"] = true,
        },
        ["debuff"] = {
            224991,
            277950,
        },
        ["debuff_banned"] = {
            ["331653"] = true,
            ["330911"] = true,
            ["299151"] = true,
            ["327980"] = true,
            ["284678"] = true,
            ["281242"] = true,
            ["342938"] = true,
            ["340007"] = true,
        },
        ["debuff_tracked"] = {
            ["341408"] = true,
            ["324652"] = false,
            ["342938"] = true,
            ["281242"] = true,
        },
        ["buff_banned"] = {
            ["333553"] = true,
            ["281242"] = true,
            ["61573"] = true,
            ["206150"] = true,
            ["61574"] = true,
        },
    },
    ["extra_icon_caster_font"] = "Cronix",
    ["castbar_target_show"] = true,
    ["cast_statusbar_color"] = {
        0,
        0.71372550725937,
        1,
        1,
    },
    ["update_throttle"] = 0.30000001192093,
    ["tocversion"] = 110007,
    ["castbar_icon_show"] = false,
    ["indicator_extra_raidmark"] = false,
    ["extra_icon_timer_font"] = "Cronix-Bold",
    ["not_affecting_combat_alpha"] = 0.39999997615814,
    ["patch_version"] = 38,
    ["use_health_animation"] = true,
    ["target_highlight_alpha"] = 1,
    ["news_frame"] = {
        ["PlaterNewsFrame"] = {
            ["scale"] = 1,
        },
    },
    ["aura_breakline_space"] = 4,
    ["plater_resources_anchor"] = {
        ["y"] = 40,
        ["x"] = 0,
        ["side"] = 8,
    },
    ["url"] = "https://wago.io/xlCdA3th7/46",
    ["tap_denied_color"] = {
        0.60392159223557,
        0.60392159223557,
        0.60392159223557,
    },
    ["bossmod_icons_anchor"] = {
        ["y"] = 0,
    },
    ["target_highlight_height"] = 18,
    ["target_shady_enabled"] = false,
    ["castbar_framelevel"] = 0,
    ["version"] = 46,
    ["first_run2"] = true,
    ["aura_cooldown_reverse"] = false,
    ["indicator_raidmark_scale"] = 0.69999998807907,
    ["extra_icon_auras_mine"] = {
        ["277242"] = false,
        ["224991"] = true,
    },
    ["aura_height2"] = 13,
    ["cast_statusbar_color_interrupted"] = {
        0.61568629741669,
        0.18823531270027,
        0.21176472306252,
    },
    ["no_spellname_length_limit"] = true,
    ["range_check_in_range_or_target_alpha"] = 1,
    ["captured_casts"] = {
        [384524] = {
            ["encounterName"] = "Watcher Irideus",
            ["source"] = "Watcher Irideus",
            ["encounterID"] = 2615,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 189719,
        },
        [376683] = {
            ["encounterName"] = "Balakar Khan",
            ["source"] = "Balakar Khan",
            ["encounterID"] = 2580,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 186151,
        },
        [375727] = {
            ["encounterName"] = "Chrono-Lord Deios",
            ["npcID"] = 184125,
            ["encounterID"] = 2559,
        },
        [88308] = {
            ["encounterName"] = "Altairus",
            ["source"] = "Altairus",
            ["encounterID"] = 1041,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 43873,
        },
        [265568] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Befouled Spirit",
            ["npcID"] = 133685,
        },
        [372222] = {
            ["encounterName"] = "Azureblade",
            ["source"] = "Azureblade",
            ["encounterID"] = 2585,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 186739,
        },
        [267354] = {
            ["isChanneled"] = true,
            ["source"] = "Hired Assassin",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 134232,
        },
        [372223] = {
            ["source"] = "Qalashi Bonetender",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 189265,
        },
        [427176] = {
            ["encounterName"] = "The Darkness",
            ["source"] = "Wriggling Darkspawn",
            ["npcID"] = 213008,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2788,
        },
        [382233] = {
            ["source"] = "Batak",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 193462,
        },
        [465682] = {
            ["source"] = "Darkfuse Inspector",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 231385,
        },
        [372735] = {
            ["source"] = "Flashfrost Earthshaper",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 187969,
        },
        [1217294] = {
            ["encounterName"] = "Coin-Operated Crowd Pummeler",
            ["source"] = "Coin-Operated Crowd Pummeler",
            ["encounterID"] = 2105,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 129214,
        },
        [269843] = {
            ["encounterName"] = "Unbound Abomination",
            ["source"] = "Unbound Abomination",
            ["npcID"] = 133007,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2123,
        },
        [283422] = {
            ["encounterName"] = "Tussle Tonks",
            ["encounterID"] = 2257,
            ["npcID"] = 145185,
        },
        [388801] = {
            ["source"] = "Risen Warrior",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 195855,
        },
        [426860] = {
            ["encounterName"] = "Anub'ikkaj",
            ["source"] = "Anub'ikkaj",
            ["encounterID"] = 2838,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 211089,
        },
        [260894] = {
            ["encounterName"] = "Elder Leaxa",
            ["source"] = "Elder Leaxa",
            ["npcID"] = 131318,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2111,
        },
        [461796] = {
            ["source"] = "Darkfuse Demolitionist",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 229212,
        },
        [443500] = {
            ["source"] = "Royal Swarmguard",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 220197,
        },
        [226406] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Emberhusk Dominator",
            ["npcID"] = 102287,
        },
        [183088] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Mightstone Breaker",
            ["npcID"] = 90997,
        },
        [267551] = {
            ["npcID"] = 129214,
        },
        [412200] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Time-Lost Aerobot",
            ["npcID"] = 205723,
        },
        [197974] = {
            ["encounterName"] = "Ilysanna Ravencrest",
            ["source"] = "Soul-torn Vanguard",
            ["encounterID"] = 1833,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 100485,
        },
        [384597] = {
            ["source"] = "Qalashi Warden",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 193293,
        },
        [370764] = {
            ["source"] = "Crystal Fury",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 196116,
        },
        [201226] = {
            ["source"] = "Bloodtainted Fury",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 100531,
        },
        [259940] = {
            ["encounterName"] = "Rixxa Fluxfume",
            ["source"] = "Rixxa Fluxflame",
            ["encounterID"] = 2107,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 129231,
        },
        [377204] = {
            ["encounterName"] = "Warlord Sargha",
            ["source"] = "Warlord Sargha",
            ["encounterID"] = 2611,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 189901,
        },
        [468813] = {
            ["encounterName"] = "Geezle Gigazap",
            ["source"] = "Geezle Gigazap",
            ["encounterID"] = 3054,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 226404,
        },
        [412012] = {
            ["isChanneled"] = true,
            ["source"] = "Infinite Timeslicer",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 205408,
        },
        [427376] = {
            ["source"] = "Gilgoblin Hunter",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 40935,
        },
        [465754] = {
            ["source"] = "Shreddinator 3000",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 230740,
        },
        [332708] = {
            ["npcID"] = 167532,
        },
        [413607] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Infinite Twilight Magus",
            ["npcID"] = 201223,
        },
        [432031] = {
            ["encounterName"] = "Ki'katal the Harvester",
            ["source"] = "Bloodworker",
            ["npcID"] = 215968,
            ["isChanneled"] = true,
            ["event"] = "SPELL_CAST_SUCCESS",
            ["encounterID"] = 2901,
        },
        [369365] = {
            ["npcID"] = 184132,
        },
        [395184] = {
            ["source"] = "Blazing Proto-Dragon",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 185883,
        },
        [372107] = {
            ["encounterName"] = "Kokia Blazehoof",
            ["source"] = "Kokia Blazehoof",
            ["encounterID"] = 2606,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 189232,
        },
        [257870] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Irontide Buccaneer",
            ["npcID"] = 130011,
        },
        [256627] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Scrimshaw Enforcer",
            ["npcID"] = 129374,
        },
        [268260] = {
            ["source"] = "Ashvane Cannoneer",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 138465,
        },
        [424958] = {
            ["encounterName"] = "Stormguard Gorren",
            ["source"] = "Stormguard Gorren",
            ["npcID"] = 207205,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2861,
        },
        [333477] = {
            ["npcID"] = 163621,
        },
        [439621] = {
            ["encounterName"] = "Fangs of the Queen",
            ["source"] = "Nx",
            ["encounterID"] = 2908,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 216648,
        },
        [451543] = {
            ["source"] = "Eye of the Queen",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 220003,
        },
        [376892] = {
            ["encounterName"] = "Balakar Khan",
            ["source"] = "Balakar Khan",
            ["encounterID"] = 2580,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 186151,
        },
        [367521] = {
            ["source"] = "Bonebolt Hunter",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 185534,
        },
        [340300] = {
            ["npcID"] = 173720,
        },
        [200784] = {
            ["source"] = "Wyrmtongue Scavenger",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 98792,
        },
        [257426] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Irontide Enforcer",
            ["npcID"] = 129602,
        },
        [1214546] = {
            ["source"] = "Void Ascendant",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 212793,
        },
        [419351] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Infinite Saboteur",
            ["npcID"] = 208438,
        },
        [473220] = {
            ["encounterName"] = "Big M.O.M.M.A.",
            ["source"] = "Big M.O.M.M.A.",
            ["encounterID"] = 3020,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 226398,
        },
        [434779] = {
            ["encounterName"] = "Orator Krix'vizk",
            ["source"] = "Orator Krix'vizk",
            ["encounterID"] = 2907,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 216619,
        },
        [369563] = {
            ["encounterName"] = "The Lost Dwarves",
            ["npcID"] = 184581,
            ["encounterID"] = 2555,
        },
        [169929] = {
            ["encounterName"] = "Yalnu",
            ["source"] = "Flourishing Ancient",
            ["encounterID"] = 1756,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 84400,
        },
        [269029] = {
            ["encounterName"] = "Dread Captain Lockwood",
            ["source"] = "Dread Captain Lockwood",
            ["npcID"] = 129208,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2109,
        },
        [257288] = {
            ["encounterName"] = "Chopper Redhook",
            ["source"] = "Irontide Cleaver",
            ["encounterID"] = 2098,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 129879,
        },
        [200913] = {
            ["source"] = "Wyrmtongue Scavenger",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 98792,
        },
        [422541] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Shuffling Horror",
            ["npcID"] = 208456,
        },
        [448105] = {
            ["encounterName"] = "Drahga Shadowburner",
            ["source"] = "Valiona",
            ["encounterID"] = 1048,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 40320,
        },
        [330614] = {
            ["npcID"] = 163086,
        },
        [427323] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Cursed Stormrider",
            ["npcID"] = 212786,
        },
        [429427] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Cursedforge Stoneshaper",
            ["npcID"] = 214066,
        },
        [451843] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Stormguard Gorren",
            ["npcID"] = 207205,
        },
        [412215] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Spurlok, Timesworn Sentinel",
            ["npcID"] = 205158,
        },
        [384868] = {
            ["source"] = "Nokhud Longbow",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 192789,
        },
        [1215738] = {
            ["encounterName"] = "An Affront of Challengers",
            ["source"] = "Paceran the Virulent",
            ["npcID"] = 164463,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2391,
        },
        [376171] = {
            ["source"] = "Primalist Icecaller",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 190377,
        },
        [262377] = {
            ["npcID"] = 133482,
        },
        [257397] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Irontide Bonesaw",
            ["npcID"] = 129788,
        },
        [333294] = {
            ["npcID"] = 169893,
        },
        [375943] = {
            ["encounterName"] = "Balakar Khan",
            ["source"] = "Balakar Khan",
            ["encounterID"] = 2580,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 186151,
        },
        [268202] = {
            ["encounterName"] = "Gorak Tul",
            ["source"] = "Deathtouched Slaver",
            ["encounterID"] = 2117,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 135552,
        },
        [425027] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Earth Infused Golem",
            ["npcID"] = 210109,
        },
        [376170] = {
            ["encounterName"] = "Decatriarch Wratheye",
            ["source"] = "Decatriarch Wratheye",
            ["encounterID"] = 2569,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 186121,
        },
        [448619] = {
            ["source"] = "Careless Hopgoblin",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 223423,
        },
        [427616] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Unruly Stormrook",
            ["npcID"] = 207186,
        },
        [391118] = {
            ["source"] = "Scalebane Lieutenant",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 191739,
        },
        [265721] = {
            ["source"] = "Terrorachna",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 200349,
        },
        [449130] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Forge Loader",
            ["npcID"] = 213343,
        },
        [437719] = {
            ["source"] = "Primalist Galesinger",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 190373,
        },
        [333488] = {
            ["encounterName"] = "Amarth, The Harvester",
            ["npcID"] = 163157,
            ["encounterID"] = 2388,
        },
        [412129] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Lerai, Timesworn Maiden",
            ["npcID"] = 205152,
        },
        [369061] = {
            ["encounterName"] = "Emberon",
            ["npcID"] = 184422,
            ["encounterID"] = 2558,
        },
        [421910] = {
            ["encounterName"] = "Blazikon",
            ["source"] = "Blazikon",
            ["encounterID"] = 2826,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 208743,
        },
        [272609] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Faceless Corruptor",
            ["npcID"] = 138281,
        },
        [323608] = {
            ["encounterName"] = "Mordretha",
            ["npcID"] = 165946,
            ["encounterID"] = 2404,
        },
        [377732] = {
            ["npcID"] = 184319,
        },
        [200630] = {
            ["source"] = "Mindshattered Screecher",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 95769,
        },
        [388060] = {
            ["source"] = "Stinkbreath",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 187033,
        },
        [459779] = {
            ["encounterName"] = "Demolition Duo",
            ["source"] = "Bront",
            ["encounterID"] = 3019,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 226402,
        },
        [369828] = {
            ["npcID"] = 184023,
        },
        [369573] = {
            ["encounterName"] = "The Lost Dwarves",
            ["npcID"] = 184581,
            ["encounterID"] = 2555,
        },
        [164357] = {
            ["encounterName"] = "Witherbark",
            ["source"] = "Witherbark",
            ["encounterID"] = 1746,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 81522,
        },
        [1217653] = {
            ["encounterName"] = "Demolition Duo",
            ["source"] = "Keeza Quickfuse",
            ["encounterID"] = 3019,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 226403,
        },
        [375439] = {
            ["encounterName"] = "Magmatusk",
            ["source"] = "Magmatusk",
            ["encounterID"] = 2610,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 181861,
        },
        [385958] = {
            ["encounterName"] = "Vexamus",
            ["source"] = "Vexamus",
            ["encounterID"] = 2562,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 194181,
        },
        [411012] = {
            ["source"] = "Young Storm Dragon",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 45919,
        },
        [427869] = {
            ["encounterName"] = "Void Speaker Eirich",
            ["source"] = "Void Speaker Eirich",
            ["npcID"] = 213119,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2883,
        },
        [386660] = {
            ["encounterName"] = "Leymor",
            ["source"] = "Leymor",
            ["encounterID"] = 2582,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 186644,
        },
        [377034] = {
            ["encounterName"] = "Crawth",
            ["source"] = "Crawth",
            ["encounterID"] = 2564,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 191736,
        },
        [382708] = {
            ["source"] = "Qalashi Warden",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 193293,
        },
        [421277] = {
            ["encounterName"] = "The Candle King",
            ["source"] = "The Candle King",
            ["npcID"] = 208745,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2787,
        },
        [200345] = {
            ["isChanneled"] = true,
            ["source"] = "Risen Archer",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 98275,
        },
        [291865] = {
            ["encounterName"] = "King Mechagon",
            ["encounterID"] = 2260,
            ["npcID"] = 150396,
        },
        [188169] = {
            ["encounterName"] = "Rokmora",
            ["source"] = "Rokmora",
            ["npcID"] = 91003,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 1790,
        },
        [385578] = {
            ["encounterName"] = "Azureblade",
            ["source"] = "Azureblade",
            ["encounterID"] = 2585,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 186739,
        },
        [427359] = {
            ["isChanneled"] = true,
            ["event"] = "SPELL_CAST_SUCCESS",
            ["source"] = "Arathi Footman",
            ["npcID"] = 206705,
        },
        [375251] = {
            ["encounterName"] = "Magmatusk",
            ["source"] = "Magmatusk",
            ["encounterID"] = 2610,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 181861,
        },
        [416139] = {
            ["encounterName"] = "Chrono-Lord Deios",
            ["source"] = "Chrono-Lord Deios",
            ["npcID"] = 199000,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2673,
        },
        [323137] = {
            ["encounterName"] = "Ingra Maloch",
            ["npcID"] = 164804,
            ["encounterID"] = 2397,
        },
        [275907] = {
            ["encounterName"] = "Azerokk",
            ["source"] = "Azerokk",
            ["encounterID"] = 2106,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 129227,
        },
        [474087] = {
            ["encounterName"] = "Kul'tharok",
            ["source"] = "Kul'tharok",
            ["npcID"] = 162309,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2364,
        },
        [369409] = {
            ["npcID"] = 184130,
        },
        [188404] = {
            ["encounterName"] = "Hymdall",
            ["source"] = "Storm Drake",
            ["encounterID"] = 1805,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 97788,
        },
        [371875] = {
            ["source"] = "Qalashi Trainee",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 189266,
        },
        [428293] = {
            ["encounterName"] = "Lady Naz'jar",
            ["source"] = "Naz'jar Honor Guard",
            ["encounterID"] = 1045,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 40633,
        },
        [382712] = {
            ["source"] = "Wilted Oak",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 186229,
        },
        [374361] = {
            ["encounterName"] = "Echo of Doragosa",
            ["source"] = "Echo of Doragosa",
            ["encounterID"] = 2565,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 190609,
        },
        [265540] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Fetid Maggot",
            ["npcID"] = 130909,
        },
        [375348] = {
            ["source"] = "Gusting Proto-Dragon",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 190401,
        },
        [1214315] = {
            ["encounterName"] = "Kyrioss",
            ["source"] = "Kyrioss",
            ["encounterID"] = 2816,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 209230,
        },
        [374839] = {
            ["encounterName"] = "Forgemaster Gorek",
            ["source"] = "Forgemaster Gorek",
            ["encounterID"] = 2612,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 189478,
        },
        [340160] = {
            ["npcID"] = 173655,
        },
        [383823] = {
            ["source"] = "Nokhud Hornsounder",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 192796,
        },
        [257862] = {
            ["encounterName"] = "Hadal Darkfathom",
            ["source"] = "Hadal Darkfathom",
            ["npcID"] = 128651,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2099,
        },
        [426893] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Quartermaster Koratite",
            ["npcID"] = 209801,
        },
        [373742] = {
            ["encounterName"] = "Chargath, Bane of Scales",
            ["source"] = "Chargath, Bane of Scales",
            ["encounterID"] = 2613,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 189340,
        },
        [451496] = {
            ["source"] = "Eye of the Queen",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 220003,
        },
        [375065] = {
            ["source"] = "Fetid Rotsinger",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 186226,
        },
        [321834] = {
            ["encounterName"] = "Mistcaller",
            ["npcID"] = 164501,
            ["encounterID"] = 2392,
        },
        [440218] = {
            ["encounterName"] = "Fangs of the Queen",
            ["source"] = "Vx",
            ["npcID"] = 216649,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2908,
        },
        [265019] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Chosen Blood Matron",
            ["npcID"] = 131436,
        },
        [378818] = {
            ["source"] = "Qalashi Thaumaturge",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 192788,
        },
        [396665] = {
            ["source"] = "Magmas",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 199027,
        },
        [397889] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Fallen Waterspeaker",
            ["npcID"] = 200126,
        },
        [257756] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Bilge Rat Buccaneer",
            ["npcID"] = 129527,
        },
        [427342] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Arathi Footman",
            ["npcID"] = 206705,
        },
        [453161] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Hulking Bloodguard",
            ["npcID"] = 216338,
        },
        [253517] = {
            ["source"] = "Dazar'ai Confessor",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 122973,
        },
        [331718] = {
            ["npcID"] = 171772,
        },
        [226296] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Vileshard Hulk",
            ["npcID"] = 91000,
        },
        [388392] = {
            ["source"] = "Unruly Textbook",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 196044,
        },
        [427025] = {
            ["encounterName"] = "The Darkness",
            ["source"] = "The Darkness",
            ["npcID"] = 208747,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2788,
        },
        [426260] = {
            ["source"] = "Torchsnarl",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 212411,
        },
        [422414] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Shuffling Horror",
            ["npcID"] = 208456,
        },
        [372201] = {
            ["source"] = "Qalashi Irontorch",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 189464,
        },
        [367484] = {
            ["source"] = "Claw Fighter",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 185508,
        },
        [462216] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Twilight Flamerender",
            ["npcID"] = 224240,
        },
        [432198] = {
            ["encounterName"] = "Brewmaster Aldryr",
            ["source"] = "Brew Master Aldryr",
            ["encounterID"] = 2900,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 210271,
        },
        [387629] = {
            ["source"] = "Desecrated Ohuna",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 195876,
        },
        [474018] = {
            ["source"] = "Voidrider",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 212786,
        },
        [320822] = {
            ["npcID"] = 165222,
        },
        [448640] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Cursedforge Honor Guard",
            ["npcID"] = 214264,
        },
        [426645] = {
            ["source"] = "Naz'jar Ravager",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 212673,
        },
        [87618] = {
            ["encounterName"] = "Asaad",
            ["source"] = "Asaad",
            ["encounterID"] = 1042,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 43875,
        },
        [321968] = {
            ["npcID"] = 164929,
        },
        [375327] = {
            ["source"] = "Subterranean Proto-Dragon",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 190404,
        },
        [209628] = {
            ["encounterName"] = "Advisor Melandrus",
            ["source"] = "Advisor Melandrus",
            ["encounterID"] = 1870,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 104218,
        },
        [387950] = {
            ["source"] = "Caldera Stomper",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 187919,
        },
        [377559] = {
            ["encounterName"] = "Treemouth",
            ["source"] = "Treemouth",
            ["encounterID"] = 2568,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 186120,
        },
        [374563] = {
            ["source"] = "Dazzling Dragonfly",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 190362,
        },
        [382277] = {
            ["source"] = "Balara",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 193457,
        },
        [426261] = {
            ["source"] = "Sootsnout",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 212412,
        },
        [396812] = {
            ["source"] = "Spellbound Scepter",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 196576,
        },
        [169179] = {
            ["encounterName"] = "Yalnu",
            ["source"] = "Yalnu",
            ["encounterID"] = 1756,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 83846,
        },
        [408141] = {
            ["encounterName"] = "Blight of Galakrond",
            ["source"] = "Dazhak",
            ["npcID"] = 201788,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2668,
        },
        [473114] = {
            ["encounterName"] = "Swampface",
            ["source"] = "Swampface",
            ["encounterID"] = 3053,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 226396,
        },
        [372311] = {
            ["source"] = "Qalashi Trainee",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 189266,
        },
        [369465] = {
            ["npcID"] = 186420,
        },
        [431494] = {
            ["source"] = "Nightfall Tactician",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 213934,
        },
        [433662] = {
            ["isChanneled"] = true,
            ["event"] = "SPELL_CAST_SUCCESS",
            ["source"] = "Reinforced Drone",
            ["npcID"] = 216856,
        },
        [200768] = {
            ["source"] = "Crazed Razorbeak",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 95766,
        },
        [293986] = {
            ["npcID"] = 151476,
        },
        [449090] = {
            ["isChanneled"] = true,
            ["source"] = "Careless Hopgoblin",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 223423,
        },
        [323496] = {
            ["npcID"] = 165872,
        },
        [441119] = {
            ["source"] = "Bee Wrangler",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 210264,
        },
        [445457] = {
            ["encounterName"] = "Skardyn Monstrosity",
            ["source"] = "Voidstone Monstrosity",
            ["npcID"] = 207207,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2836,
        },
        [388911] = {
            ["source"] = "Spellbound Battleaxe",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 196577,
        },
        [436592] = {
            ["encounterName"] = "Goldie Baronbottom",
            ["source"] = "Goldie Baronbottom",
            ["encounterID"] = 2930,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 214661,
        },
        [393432] = {
            ["source"] = "Refti Defender",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 190340,
        },
        [200291] = {
            ["source"] = "Risen Scout",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 98691,
        },
        [156718] = {
            ["source"] = "Monstrous Corpse Spider",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 76104,
        },
        [388976] = {
            ["source"] = "Arcane Ravager",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 196671,
        },
        [472452] = {
            ["encounterName"] = "Big M.O.M.M.A.",
            ["source"] = "Darkfuse Mechadrone",
            ["encounterID"] = 3020,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 228424,
        },
        [253544] = {
            ["source"] = "Dazar'ai Confessor",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 122973,
        },
        [450854] = {
            ["source"] = "Deathscreamer Iken'tak",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 211263,
        },
        [324323] = {
            ["npcID"] = 165919,
        },
        [409492] = {
            ["source"] = "Afflicted Soul",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 204773,
        },
        [434824] = {
            ["source"] = "Ixin",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 217531,
        },
        [447270] = {
            ["encounterName"] = "Captain Dailcry",
            ["source"] = "Captain Dailcry",
            ["npcID"] = 207946,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2847,
        },
        [88194] = {
            ["source"] = "Young Storm Dragon",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 45919,
        },
        [1217496] = {
            ["source"] = "Bubbles",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 231197,
        },
        [385536] = {
            ["isChanneled"] = true,
            ["source"] = "Primalist Flamedancer",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 190206,
        },
        [432520] = {
            ["source"] = "Nightfall Darkcaster",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 213893,
        },
        [369675] = {
            ["npcID"] = 184022,
        },
        [200261] = {
            ["source"] = "Soul-Torn Champion",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 98243,
        },
        [432967] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Sentry Stagshell",
            ["npcID"] = 216340,
        },
        [253721] = {
            ["isChanneled"] = true,
            ["source"] = "Shieldbearer of Zul",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 127879,
        },
        [199151] = {
            ["source"] = "Angerhoof Bull",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 96611,
        },
        [411994] = {
            ["isChanneled"] = true,
            ["source"] = "Infinite Chronoweaver",
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 205384,
        },
        [266209] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Fallen Deathspeaker",
            ["npcID"] = 134284,
        },
        [372087] = {
            ["source"] = "Defier Draghar",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 187897,
        },
        [372225] = {
            ["source"] = "Qalashi Bonesplitter",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 189467,
        },
        [412505] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Tyr's Vanguard",
            ["npcID"] = 205151,
        },
        [226304] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Vileshard Hulk",
            ["npcID"] = 91000,
        },
        [391723] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Flamegullet",
            ["npcID"] = 197697,
        },
        [260793] = {
            ["encounterName"] = "Cragmaw the Infested",
            ["source"] = "Cragmaw the Infested",
            ["npcID"] = 131817,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2118,
        },
        [193505] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Vileshard Hulk",
            ["npcID"] = 91000,
        },
        [466124] = {
            ["encounterName"] = "Geezle Gigazap",
            ["source"] = "Geezle Gigazap",
            ["encounterID"] = 3054,
            ["isChanneled"] = true,
            ["event"] = "SPELL_CAST_SUCCESS",
            ["npcID"] = 226404,
        },
        [375351] = {
            ["source"] = "Glacial Proto-Dragon",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 190403,
        },
        [397931] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Minion of Doubt",
            ["npcID"] = 57109,
        },
        [265372] = {
            ["source"] = "Bewitched Captain",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 131587,
        },
        [183465] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Tarspitter Lurker",
            ["npcID"] = 91001,
        },
        [381525] = {
            ["encounterName"] = "Kyrakka and Erkhart Stormvein",
            ["source"] = "Kyrakka",
            ["encounterID"] = 2623,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 190484,
        },
        [317231] = {
            ["encounterName"] = "Xav the Unfallen",
            ["npcID"] = 162329,
            ["encounterID"] = 2366,
        },
        [447395] = {
            ["encounterName"] = "Forgemaster Throngus",
            ["source"] = "Forgemaster Throngus",
            ["encounterID"] = 1050,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 40177,
        },
        [435012] = {
            ["encounterName"] = "Anub'zekt",
            ["source"] = "Anub'zekt",
            ["npcID"] = 215405,
            ["event"] = "SPELL_CAST_START",
            ["encounterID"] = 2906,
        },
        [339706] = {
            ["encounterName"] = "Mordretha",
            ["npcID"] = 173549,
            ["encounterID"] = 2404,
        },
        [255567] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "T'lonja",
            ["npcID"] = 128455,
        },
        [413529] = {
            ["event"] = "SPELL_CAST_START",
            ["source"] = "Timestream Anomaly",
            ["npcID"] = 199749,
        },
        [377383] = {
            ["source"] = "Alpha Eagle",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 192333,
        },
        [387910] = {
            ["source"] = "Algeth'ar Echoknight",
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 196200,
        },
        [384978] = {
            ["encounterName"] = "Umbrelskul",
            ["source"] = "Umbrelskul",
            ["encounterID"] = 2584,
            ["event"] = "SPELL_CAST_START",
            ["npcID"] = 186738,
        },
        [320729] = {
            ["encounterName"] = "Xav the Unfallen",
            ["npcID"] = 162329,
            ["encounterID"] = 2366,
        },
    },
    ["extra_icon_timer_outline"] = "OUTLINE",
    ["number_region_first_run"] = true,
    ["castbar_target_anchor"] = {
        ["side"] = 9,
    },
    ["cast_statusbar_color_channeling"] = {
        0.37647062540054,
        nil,
        0.48235297203064,
        0.96000000089407,
    },
    ["aura2_grow_direction"] = 3,
    ["aura_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\transparent",
    ["show_healthbars_on_not_attackable"] = true,
    ["aura_alpha"] = 0.84999996423721,
    ["range_check_alpha_friendlies"] = 0.79999995231628,
    ["aura_show_enrage"] = true,
    ["dps"] = {
        ["colors"] = {
            ["solo"] = {
                0,
                0.71372550725937,
            },
            ["notontank"] = {
                0.69019609689713,
                0.6235294342041,
            },
            ["aggro"] = {
                0.61568629741669,
                0.18823531270027,
                0.21176472306252,
            },
            ["noaggro"] = {
                0,
                0.71372550725937,
            },
            ["pulling"] = {
                nil,
                0.56078433990479,
                0.55686277151108,
            },
        },
    },
    ["indicator_elite"] = false,
    ["aura2_x_offset"] = 2.5,
    ["castbar_target_text_size"] = 6,
    ["aura_cooldown_show_swipe"] = false,
    ["target_shady_alpha"] = 0.29999998211861,
    ["extra_icon_show_purge_border"] = {
        nil,
        0.71372550725937,
    },
    ["cast_statusbar_spark_width"] = 20,
}

function private:PlaterImportTwink()
    local name = UnitName("PLAYER")
    local realm = GetRealmName()
    PlaterDB["profileKeys"][name.." - "..realm] = private.Profilename
end

function private:PlaterImport()
  PlaterDB["profiles"][private.Profilename] = PlaterDump

  local name = UnitName("PLAYER")
  local realm = GetRealmName()
  --if we overwrite the PlaterDB to add our profiles it will forget which profile to load
  --set the profile key manually so the correct profile is selected after a reload
  PlaterDB["profileKeys"][name.." - "..realm] = private.Profilename
  
  PluginInstallStepComplete.message = "Plater Profile Imported"
  PluginInstallStepComplete:Show()
end